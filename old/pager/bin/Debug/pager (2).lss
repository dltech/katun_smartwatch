
bin/Debug/pager.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f14  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ce  00800060  00001f14  00001fe8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000014c  0080012e  0080012e  000020b6  2**0
                  ALLOC
  3 .eeprom       00000007  00810000  00810000  000020b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fuse         00000002  00820000  00820000  000020bd  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .stab         00009348  00000000  00000000  000020c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00003990  00000000  00000000  0000b408  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .comment      00000011  00000000  00000000  0000ed98  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	73 c0       	rjmp	.+230    	; 0xe8 <__ctors_end>
       2:	8d c0       	rjmp	.+282    	; 0x11e <__bad_interrupt>
       4:	8c c0       	rjmp	.+280    	; 0x11e <__bad_interrupt>
       6:	86 cb       	rjmp	.-2292   	; 0xfffff714 <__fuse+0xff7df714>
       8:	8a c0       	rjmp	.+276    	; 0x11e <__bad_interrupt>
       a:	89 c0       	rjmp	.+274    	; 0x11e <__bad_interrupt>
       c:	54 c2       	rjmp	.+1192   	; 0x4b6 <__vector_6>
       e:	87 c0       	rjmp	.+270    	; 0x11e <__bad_interrupt>
      10:	86 c0       	rjmp	.+268    	; 0x11e <__bad_interrupt>
      12:	85 c0       	rjmp	.+266    	; 0x11e <__bad_interrupt>
      14:	84 c0       	rjmp	.+264    	; 0x11e <__bad_interrupt>
      16:	83 c0       	rjmp	.+262    	; 0x11e <__bad_interrupt>
      18:	82 c0       	rjmp	.+260    	; 0x11e <__bad_interrupt>
      1a:	81 c0       	rjmp	.+258    	; 0x11e <__bad_interrupt>
      1c:	80 c0       	rjmp	.+256    	; 0x11e <__bad_interrupt>
      1e:	7f c0       	rjmp	.+254    	; 0x11e <__bad_interrupt>
      20:	7e c0       	rjmp	.+252    	; 0x11e <__bad_interrupt>
      22:	7d c0       	rjmp	.+250    	; 0x11e <__bad_interrupt>
      24:	7c c0       	rjmp	.+248    	; 0x11e <__bad_interrupt>
      26:	0e c6       	rjmp	.+3100   	; 0xc44 <selectMenu+0xc2>
      28:	10 c6       	rjmp	.+3104   	; 0xc4a <selectMenu+0xc8>
      2a:	12 c6       	rjmp	.+3108   	; 0xc50 <selectMenu+0xce>
      2c:	14 c6       	rjmp	.+3112   	; 0xc56 <selectMenu+0xd4>
      2e:	16 c6       	rjmp	.+3116   	; 0xc5c <selectMenu+0xda>
      30:	18 c6       	rjmp	.+3120   	; 0xc62 <selectMenu+0xe0>
      32:	1a c6       	rjmp	.+3124   	; 0xc68 <selectMenu+0xe6>
      34:	1c c6       	rjmp	.+3128   	; 0xc6e <selectMenu+0xec>
      36:	1e c6       	rjmp	.+3132   	; 0xc74 <selectMenu+0xf2>
      38:	20 c6       	rjmp	.+3136   	; 0xc7a <selectMenu+0xf8>
      3a:	22 c6       	rjmp	.+3140   	; 0xc80 <selectMenu+0xfe>
      3c:	24 c6       	rjmp	.+3144   	; 0xc86 <selectMenu+0x104>

0000003e <m_s2i4>:
      3e:	70 00 4e 00 c3 00 c3 00 00 20 48 61 b7 61 e3 00     p.N...... Ha.a..

0000004e <m_s2i3>:
      4e:	3e 00 60 00 c3 00 dd 00 04 20 a8 6f e3 63 b3 2e     >.`...... .o.c..
      5e:	20 00                                                .

00000060 <m_s2i2>:
      60:	4e 00 70 00 c3 00 dd 00 05 20 4b 61 bd 61 bb 00     N.p...... Ka.a..

00000070 <m_s2i1>:
      70:	60 00 3e 00 c3 00 dd 00 03 20 20 a4 b3 79 ba 00     `.>......  ..y..

00000080 <m_s1i6>:
      80:	c3 00 92 00 dd 00 dd 00 07 41 ba bf 2e 20 b3 c3     .........A... ..
      90:	b7 00                                               ..

00000092 <m_s1i5>:
      92:	80 00 a2 00 dd 00 dd 00 06 20 43 b3 c7 b7 c4 00     ......... C.....

000000a2 <m_s1i4>:
      a2:	92 00 b2 00 dd 00 dd 00 02 20 20 e0 61 bf 61 00     .........  .a.a.

000000b2 <m_s1i3>:
      b2:	a2 00 c3 00 dd 00 70 00 00 20 48 61 63 bf 70 2e     ......p.. Hac.p.
	...

000000c3 <m_s1i2>:
      c3:	b2 00 92 00 dd 00 d3 00 00 20 42 c3 78 6f e3 00     ......... B.xo..

000000d3 <m_s1i1>:
      d3:	c3 00 c3 00 dd 00 c3 00 07 00                       ..........

000000dd <Null_Menu>:
	...

000000e7 <strNULL>:
	...

000000e8 <__ctors_end>:
      e8:	11 24       	eor	r1, r1
      ea:	1f be       	out	0x3f, r1	; 63
      ec:	cf e5       	ldi	r28, 0x5F	; 95
      ee:	d4 e0       	ldi	r29, 0x04	; 4
      f0:	de bf       	out	0x3e, r29	; 62
      f2:	cd bf       	out	0x3d, r28	; 61

000000f4 <__do_copy_data>:
      f4:	11 e0       	ldi	r17, 0x01	; 1
      f6:	a0 e6       	ldi	r26, 0x60	; 96
      f8:	b0 e0       	ldi	r27, 0x00	; 0
      fa:	e4 e1       	ldi	r30, 0x14	; 20
      fc:	ff e1       	ldi	r31, 0x1F	; 31
      fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x10>
     100:	05 90       	lpm	r0, Z+
     102:	0d 92       	st	X+, r0
     104:	ae 32       	cpi	r26, 0x2E	; 46
     106:	b1 07       	cpc	r27, r17
     108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0xc>

0000010a <__do_clear_bss>:
     10a:	12 e0       	ldi	r17, 0x02	; 2
     10c:	ae e2       	ldi	r26, 0x2E	; 46
     10e:	b1 e0       	ldi	r27, 0x01	; 1
     110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
     112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
     114:	aa 37       	cpi	r26, 0x7A	; 122
     116:	b1 07       	cpc	r27, r17
     118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
     11a:	1f db       	rcall	.-2498   	; 0xfffff75a <__fuse+0xff7df75a>
     11c:	f9 ce       	rjmp	.-526    	; 0xffffff10 <__fuse+0xff7dff10>

0000011e <__bad_interrupt>:
     11e:	70 cf       	rjmp	.-288    	; 0x0 <__vectors>

00000120 <display_call>:
extern char lcd_buffer[9];
volatile uint8_t active_call_id[NCALLS_MAX], n_active_calls;

void display_call(void)
{
        if(n_active_calls)
     120:	80 91 33 01 	lds	r24, 0x0133
     124:	88 23       	and	r24, r24
     126:	f9 f0       	breq	.+62     	; 0x166 <display_call+0x46>
            if(n_active_calls == 1)     sprintf(lcd_buffer, "ID %03d", active_call_id[0]);
     128:	80 91 33 01 	lds	r24, 0x0133
     12c:	81 30       	cpi	r24, 0x01	; 1
     12e:	39 f4       	brne	.+14     	; 0x13e <display_call+0x1e>
     130:	80 91 34 01 	lds	r24, 0x0134
     134:	1f 92       	push	r1
     136:	8f 93       	push	r24
     138:	81 e6       	ldi	r24, 0x61	; 97
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	06 c0       	rjmp	.+12     	; 0x14a <display_call+0x2a>
            else                        sprintf(lcd_buffer, "B\303\267. %2d", n_active_calls);
     13e:	80 91 33 01 	lds	r24, 0x0133
     142:	1f 92       	push	r1
     144:	8f 93       	push	r24
     146:	89 e6       	ldi	r24, 0x69	; 105
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	9f 93       	push	r25
     14c:	8f 93       	push	r24
     14e:	8e e7       	ldi	r24, 0x7E	; 126
     150:	91 e0       	ldi	r25, 0x01	; 1
     152:	9f 93       	push	r25
     154:	8f 93       	push	r24
     156:	f0 db       	rcall	.-2080   	; 0xfffff938 <__fuse+0xff7df938>
     158:	0f 90       	pop	r0
     15a:	0f 90       	pop	r0
     15c:	0f 90       	pop	r0
     15e:	0f 90       	pop	r0
     160:	0f 90       	pop	r0
     162:	0f 90       	pop	r0
     164:	02 c0       	rjmp	.+4      	; 0x16a <display_call+0x4a>
        else lcd_buffer[0] = '\0';
     166:	10 92 7e 01 	sts	0x017E, r1
        lcd_cleanstr(1);
     16a:	81 e0       	ldi	r24, 0x01	; 1
     16c:	2b d1       	rcall	.+598    	; 0x3c4 <lcd_cleanstr>
        lcd_puts(lcd_buffer);
     16e:	8e e7       	ldi	r24, 0x7E	; 126
     170:	91 e0       	ldi	r25, 0x01	; 1
     172:	0f c1       	rjmp	.+542    	; 0x392 <lcd_puts>

00000174 <repeatKey>:
		}
	}
	return(0);
}

unsigned char repeatKey(msg_par par) {
     174:	cf 93       	push	r28
     176:	c8 2f       	mov	r28, r24
	if (prevKey == lastKey) {
     178:	60 91 54 01 	lds	r22, 0x0154
     17c:	80 91 53 01 	lds	r24, 0x0153
     180:	68 13       	cpse	r22, r24
     182:	0e c0       	rjmp	.+28     	; 0x1a0 <repeatKey+0x2c>
		sendMessage(MSG_KEY_PRESS, lastKey);
     184:	81 e0       	ldi	r24, 0x01	; 1
     186:	95 d9       	rcall	.-3286   	; 0xfffff4b2 <__fuse+0xff7df4b2>
		if (par>5)
     188:	c6 30       	cpi	r28, 0x06	; 6
     18a:	28 f0       	brcs	.+10     	; 0x196 <repeatKey+0x22>
			setTimer(MSG_KEY_REPEAT,par-1,par);
     18c:	4c 2f       	mov	r20, r28
     18e:	50 e0       	ldi	r21, 0x00	; 0
     190:	6f ef       	ldi	r22, 0xFF	; 255
     192:	6c 0f       	add	r22, r28
     194:	03 c0       	rjmp	.+6      	; 0x19c <repeatKey+0x28>
		else
			setTimer(MSG_KEY_REPEAT,5,5);
     196:	45 e0       	ldi	r20, 0x05	; 5
     198:	50 e0       	ldi	r21, 0x00	; 0
     19a:	65 e0       	ldi	r22, 0x05	; 5
     19c:	82 e0       	ldi	r24, 0x02	; 2
     19e:	15 da       	rcall	.-3030   	; 0xfffff5ca <__fuse+0xff7df5ca>
	}
	return(0);
}
     1a0:	80 e0       	ldi	r24, 0x00	; 0
     1a2:	cf 91       	pop	r28
     1a4:	08 95       	ret

000001a6 <getKeyCode>:
uint8_t kf1,kf2,kf3;

extern uint8_t light_on;

unsigned char getKeyCode(uint8_t ah) {
	if (!(ah & _BV(KBD_PIN_OK))) {
     1a6:	80 ff       	sbrs	r24, 0
     1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <getKeyCode+0x12>
		return KEY_OK;
	}
	if (!(ah & _BV(KBD_PIN_LEFT))) {
     1aa:	82 ff       	sbrs	r24, 2
     1ac:	07 c0       	rjmp	.+14     	; 0x1bc <getKeyCode+0x16>
		return KEY_LEFT;
	}
	if (!(ah & _BV(KBD_PIN_RIGHT))) {
     1ae:	86 95       	lsr	r24
     1b0:	81 70       	andi	r24, 0x01	; 1
     1b2:	91 e0       	ldi	r25, 0x01	; 1
     1b4:	89 27       	eor	r24, r25
     1b6:	08 95       	ret

extern uint8_t light_on;

unsigned char getKeyCode(uint8_t ah) {
	if (!(ah & _BV(KBD_PIN_OK))) {
		return KEY_OK;
     1b8:	83 e0       	ldi	r24, 0x03	; 3
     1ba:	08 95       	ret
	}
	if (!(ah & _BV(KBD_PIN_LEFT))) {
		return KEY_LEFT;
     1bc:	82 e0       	ldi	r24, 0x02	; 2
	}
	if (!(ah & _BV(KBD_PIN_RIGHT))) {
		return KEY_RIGHT;
	}
	return 0;
}
     1be:	08 95       	ret

000001c0 <readKey>:

unsigned char readKey(msg_par par) {
     1c0:	1f 93       	push	r17
     1c2:	cf 93       	push	r28
     1c4:	df 93       	push	r29
     1c6:	1f 92       	push	r1
     1c8:	cd b7       	in	r28, 0x3d	; 61
     1ca:	de b7       	in	r29, 0x3e	; 62
	kf3=kf2;
     1cc:	60 91 56 01 	lds	r22, 0x0156
     1d0:	60 93 52 01 	sts	0x0152, r22
	kf2=kf1;
     1d4:	10 91 55 01 	lds	r17, 0x0155
     1d8:	10 93 56 01 	sts	0x0156, r17
	kf1=getKeyCode(KBD_PIN & KBD_MASK);
     1dc:	83 b3       	in	r24, 0x13	; 19
     1de:	87 70       	andi	r24, 0x07	; 7
     1e0:	69 83       	std	Y+1, r22	; 0x01
     1e2:	e1 df       	rcall	.-62     	; 0x1a6 <getKeyCode>
     1e4:	80 93 55 01 	sts	0x0155, r24

	if ((kf2==kf1) && (kf3==kf2)) {
     1e8:	69 81       	ldd	r22, Y+1	; 0x01
     1ea:	18 13       	cpse	r17, r24
     1ec:	1e c0       	rjmp	.+60     	; 0x22a <readKey+0x6a>
     1ee:	61 13       	cpse	r22, r17
     1f0:	1c c0       	rjmp	.+56     	; 0x22a <readKey+0x6a>
		prevKey = lastKey;
     1f2:	80 91 53 01 	lds	r24, 0x0153
     1f6:	80 93 54 01 	sts	0x0154, r24
		lastKey = kf1;
     1fa:	60 93 53 01 	sts	0x0153, r22

		if (prevKey != lastKey) {
     1fe:	86 17       	cp	r24, r22
     200:	a1 f0       	breq	.+40     	; 0x22a <readKey+0x6a>
			sendMessage(MSG_KEY_PRESS, lastKey);
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	56 d9       	rcall	.-3412   	; 0xfffff4b2 <__fuse+0xff7df4b2>
            if(light_on)    sendMessage(MSG_LIGHT, 0);
     206:	80 91 7c 01 	lds	r24, 0x017C
     20a:	88 23       	and	r24, r24
     20c:	19 f0       	breq	.+6      	; 0x214 <readKey+0x54>
     20e:	60 e0       	ldi	r22, 0x00	; 0
     210:	89 e0       	ldi	r24, 0x09	; 9
     212:	4f d9       	rcall	.-3426   	; 0xfffff4b2 <__fuse+0xff7df4b2>
			killTimer(MSG_KEY_REPEAT);
     214:	82 e0       	ldi	r24, 0x02	; 2
     216:	16 da       	rcall	.-3028   	; 0xfffff644 <__fuse+0xff7df644>
			if (lastKey) {
     218:	80 91 53 01 	lds	r24, 0x0153
     21c:	88 23       	and	r24, r24
     21e:	29 f0       	breq	.+10     	; 0x22a <readKey+0x6a>
				setTimer(MSG_KEY_REPEAT,200,500);
     220:	44 ef       	ldi	r20, 0xF4	; 244
     222:	51 e0       	ldi	r21, 0x01	; 1
     224:	68 ec       	ldi	r22, 0xC8	; 200
     226:	82 e0       	ldi	r24, 0x02	; 2
     228:	d0 d9       	rcall	.-3168   	; 0xfffff5ca <__fuse+0xff7df5ca>
			}
		}
	}
	return(0);
}
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	0f 90       	pop	r0
     22e:	df 91       	pop	r29
     230:	cf 91       	pop	r28
     232:	1f 91       	pop	r17
     234:	08 95       	ret

00000236 <KBD_init>:
}



void  KBD_init() {
	KBD_PORT |= KBD_MASK;
     236:	85 b3       	in	r24, 0x15	; 21
     238:	87 60       	ori	r24, 0x07	; 7
     23a:	85 bb       	out	0x15, r24	; 21
	KBD_DDR &= ~ KBD_MASK;
     23c:	84 b3       	in	r24, 0x14	; 20
     23e:	88 7f       	andi	r24, 0xF8	; 248
     240:	84 bb       	out	0x14, r24	; 20

	lastKey = 0;
     242:	10 92 53 01 	sts	0x0153, r1
	prevKey = 0;
     246:	10 92 54 01 	sts	0x0154, r1

	setHandler(MSG_KEY_SCAN, &readKey);
     24a:	60 ee       	ldi	r22, 0xE0	; 224
     24c:	70 e0       	ldi	r23, 0x00	; 0
     24e:	83 e0       	ldi	r24, 0x03	; 3
     250:	75 d8       	rcall	.-3862   	; 0xfffff33c <__fuse+0xff7df33c>
	setHandler(MSG_KEY_REPEAT, &repeatKey);
     252:	6a eb       	ldi	r22, 0xBA	; 186
     254:	70 e0       	ldi	r23, 0x00	; 0
     256:	82 e0       	ldi	r24, 0x02	; 2
     258:	71 d8       	rcall	.-3870   	; 0xfffff33c <__fuse+0xff7df33c>

	setTimer(MSG_KEY_SCAN, 1, 1);
     25a:	41 e0       	ldi	r20, 0x01	; 1
     25c:	50 e0       	ldi	r21, 0x00	; 0
     25e:	61 e0       	ldi	r22, 0x01	; 1
     260:	83 e0       	ldi	r24, 0x03	; 3
     262:	b3 c9       	rjmp	.-3226   	; 0xfffff5ca <__fuse+0xff7df5ca>

00000264 <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     264:	92 9a       	sbi	0x12, 2	; 18
    lcd_e_delay();
     266:	00 c0       	rjmp	.+0      	; 0x268 <toggle_e+0x4>
    lcd_e_low();
     268:	92 98       	cbi	0x12, 2	; 18
     26a:	08 95       	ret

0000026c <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs)
{
     26c:	cf 93       	push	r28
     26e:	df 93       	push	r29
     270:	1f 92       	push	r1
     272:	cd b7       	in	r28, 0x3d	; 61
     274:	de b7       	in	r29, 0x3e	; 62
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
     276:	66 23       	and	r22, r22
     278:	11 f0       	breq	.+4      	; 0x27e <lcd_write+0x12>
       lcd_rs_high();
     27a:	90 9a       	sbi	0x12, 0	; 18
     27c:	01 c0       	rjmp	.+2      	; 0x280 <lcd_write+0x14>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
     27e:	90 98       	cbi	0x12, 0	; 18
    }
    lcd_rw_low();
     280:	91 98       	cbi	0x12, 1	; 18
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     282:	8c 9a       	sbi	0x11, 4	; 17
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     284:	8d 9a       	sbi	0x11, 5	; 17
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     286:	8e 9a       	sbi	0x11, 6	; 17
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     288:	8f 9a       	sbi	0x11, 7	; 17

        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     28a:	97 98       	cbi	0x12, 7	; 18
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     28c:	96 98       	cbi	0x12, 6	; 18
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     28e:	95 98       	cbi	0x12, 5	; 18
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     290:	94 98       	cbi	0x12, 4	; 18
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     292:	87 fd       	sbrc	r24, 7
     294:	97 9a       	sbi	0x12, 7	; 18
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     296:	86 fd       	sbrc	r24, 6
     298:	96 9a       	sbi	0x12, 6	; 18
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     29a:	85 fd       	sbrc	r24, 5
     29c:	95 9a       	sbi	0x12, 5	; 18
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     29e:	84 fd       	sbrc	r24, 4
     2a0:	94 9a       	sbi	0x12, 4	; 18
        lcd_e_toggle();
     2a2:	89 83       	std	Y+1, r24	; 0x01
     2a4:	df df       	rcall	.-66     	; 0x264 <toggle_e>

        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     2a6:	97 98       	cbi	0x12, 7	; 18
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     2a8:	96 98       	cbi	0x12, 6	; 18
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     2aa:	95 98       	cbi	0x12, 5	; 18
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     2ac:	94 98       	cbi	0x12, 4	; 18
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     2ae:	89 81       	ldd	r24, Y+1	; 0x01
     2b0:	83 fd       	sbrc	r24, 3
     2b2:	97 9a       	sbi	0x12, 7	; 18
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     2b4:	82 fd       	sbrc	r24, 2
     2b6:	96 9a       	sbi	0x12, 6	; 18
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     2b8:	81 fd       	sbrc	r24, 1
     2ba:	95 9a       	sbi	0x12, 5	; 18
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     2bc:	80 fd       	sbrc	r24, 0
     2be:	94 9a       	sbi	0x12, 4	; 18
        lcd_e_toggle();
     2c0:	d1 df       	rcall	.-94     	; 0x264 <toggle_e>

        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     2c2:	94 9a       	sbi	0x12, 4	; 18
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     2c4:	95 9a       	sbi	0x12, 5	; 18
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     2c6:	96 9a       	sbi	0x12, 6	; 18
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     2c8:	97 9a       	sbi	0x12, 7	; 18
    }
}
     2ca:	0f 90       	pop	r0
     2cc:	df 91       	pop	r29
     2ce:	cf 91       	pop	r28
     2d0:	08 95       	ret

000002d2 <lcd_read.constprop.0>:


    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
     2d2:	90 98       	cbi	0x12, 0	; 18
    lcd_rw_high();                           /* RW=1  read mode      */
     2d4:	91 9a       	sbi	0x12, 1	; 18
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
     2d6:	8c 98       	cbi	0x11, 4	; 17
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
     2d8:	8d 98       	cbi	0x11, 5	; 17
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
     2da:	8e 98       	cbi	0x11, 6	; 17
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
     2dc:	8f 98       	cbi	0x11, 7	; 17

        /* read high nibble first */
        lcd_e_high();
     2de:	92 9a       	sbi	0x12, 2	; 18
        lcd_e_delay();
     2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <lcd_read.constprop.0+0x10>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
     2e2:	84 99       	sbic	0x10, 4	; 16
     2e4:	02 c0       	rjmp	.+4      	; 0x2ea <lcd_read.constprop.0+0x18>
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);

        /* read high nibble first */
        lcd_e_high();
        lcd_e_delay();
        data = 0;
     2e6:	80 e0       	ldi	r24, 0x00	; 0
     2e8:	01 c0       	rjmp	.+2      	; 0x2ec <lcd_read.constprop.0+0x1a>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
     2ea:	80 e1       	ldi	r24, 0x10	; 16
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
     2ec:	85 99       	sbic	0x10, 5	; 16
     2ee:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
     2f0:	86 99       	sbic	0x10, 6	; 16
     2f2:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
     2f4:	87 99       	sbic	0x10, 7	; 16
     2f6:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
     2f8:	92 98       	cbi	0x12, 2	; 18

        lcd_e_delay();                       /* Enable 500ns low       */
     2fa:	00 c0       	rjmp	.+0      	; 0x2fc <lcd_read.constprop.0+0x2a>

        /* read low nibble */
        lcd_e_high();
     2fc:	92 9a       	sbi	0x12, 2	; 18
        lcd_e_delay();
     2fe:	00 c0       	rjmp	.+0      	; 0x300 <lcd_read.constprop.0+0x2e>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
     300:	84 99       	sbic	0x10, 4	; 16
     302:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
     304:	85 99       	sbic	0x10, 5	; 16
     306:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
     308:	86 99       	sbic	0x10, 6	; 16
     30a:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;
     30c:	87 99       	sbic	0x10, 7	; 16
     30e:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
     310:	92 98       	cbi	0x12, 2	; 18
    }
    return data;
}
     312:	08 95       	ret

00000314 <lcd_waitbusy>:

{
    register uint8_t c;

    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
     314:	de df       	rcall	.-68     	; 0x2d2 <lcd_read.constprop.0>
     316:	87 fd       	sbrc	r24, 7
     318:	fd cf       	rjmp	.-6      	; 0x314 <lcd_waitbusy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     31a:	84 e0       	ldi	r24, 0x04	; 4
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	01 97       	sbiw	r24, 0x01	; 1
     320:	f1 f7       	brne	.-4      	; 0x31e <lcd_waitbusy+0xa>

    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
     322:	d7 cf       	rjmp	.-82     	; 0x2d2 <lcd_read.constprop.0>

00000324 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
     324:	cf 93       	push	r28
     326:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
     328:	f5 df       	rcall	.-22     	; 0x314 <lcd_waitbusy>
    lcd_write(cmd,0);
     32a:	60 e0       	ldi	r22, 0x00	; 0
     32c:	8c 2f       	mov	r24, r28
}
     32e:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
    lcd_write(cmd,0);
     330:	9d cf       	rjmp	.-198    	; 0x26c <lcd_write>

00000332 <lcd_data>:
Send data byte to LCD controller
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
     332:	cf 93       	push	r28
     334:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
     336:	ee df       	rcall	.-36     	; 0x314 <lcd_waitbusy>
    lcd_write(data,1);
     338:	61 e0       	ldi	r22, 0x01	; 1
     33a:	8c 2f       	mov	r24, r28
}
     33c:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
    lcd_waitbusy();
    lcd_write(data,1);
     33e:	96 cf       	rjmp	.-212    	; 0x26c <lcd_write>

00000340 <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 )
     340:	61 11       	cpse	r22, r1
     342:	02 c0       	rjmp	.+4      	; 0x348 <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
     344:	80 58       	subi	r24, 0x80	; 128
     346:	01 c0       	rjmp	.+2      	; 0x34a <lcd_gotoxy+0xa>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
     348:	80 54       	subi	r24, 0x40	; 64
     34a:	ec cf       	rjmp	.-40     	; 0x324 <lcd_command>

0000034c <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
     34c:	e3 df       	rcall	.-58     	; 0x314 <lcd_waitbusy>
}
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	08 95       	ret

00000352 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	e7 cf       	rjmp	.-50     	; 0x324 <lcd_command>

00000356 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
     356:	82 e0       	ldi	r24, 0x02	; 2
     358:	e5 cf       	rjmp	.-54     	; 0x324 <lcd_command>

0000035a <lcd_putc>:
Display character at current cursor position
Input:    character to be displayed
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
     35a:	cf 93       	push	r28
     35c:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
     35e:	da df       	rcall	.-76     	; 0x314 <lcd_waitbusy>
    if (c=='\n')
     360:	ca 30       	cpi	r28, 0x0A	; 10
     362:	41 f4       	brne	.+16     	; 0x374 <lcd_putc+0x1a>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
     364:	80 34       	cpi	r24, 0x40	; 64
     366:	10 f4       	brcc	.+4      	; 0x36c <lcd_putc+0x12>
        addressCounter = LCD_START_LINE2;
     368:	80 e4       	ldi	r24, 0x40	; 64
     36a:	01 c0       	rjmp	.+2      	; 0x36e <lcd_putc+0x14>
    else
        addressCounter = LCD_START_LINE1;
     36c:	80 e0       	ldi	r24, 0x00	; 0
        addressCounter = LCD_START_LINE4;
    else
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
     36e:	80 58       	subi	r24, 0x80	; 128
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
    }

}/* lcd_putc */
     370:	cf 91       	pop	r28
        addressCounter = LCD_START_LINE4;
    else
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
     372:	d8 cf       	rjmp	.-80     	; 0x324 <lcd_command>
#if LCD_LINES==1
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#elif LCD_LINES==2
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
     374:	80 31       	cpi	r24, 0x10	; 16
     376:	19 f4       	brne	.+6      	; 0x37e <lcd_putc+0x24>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);
     378:	60 e0       	ldi	r22, 0x00	; 0
     37a:	80 ec       	ldi	r24, 0xC0	; 192
     37c:	04 c0       	rjmp	.+8      	; 0x386 <lcd_putc+0x2c>
        }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ){
     37e:	80 35       	cpi	r24, 0x50	; 80
     380:	19 f4       	brne	.+6      	; 0x388 <lcd_putc+0x2e>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
     382:	60 e0       	ldi	r22, 0x00	; 0
     384:	80 e8       	ldi	r24, 0x80	; 128
     386:	72 df       	rcall	.-284    	; 0x26c <lcd_write>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE4,0);
        }else if ( pos == LCD_START_LINE4+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
     388:	c5 df       	rcall	.-118    	; 0x314 <lcd_waitbusy>
#endif
        lcd_write(c, 1);
     38a:	61 e0       	ldi	r22, 0x01	; 1
     38c:	8c 2f       	mov	r24, r28
    }

}/* lcd_putc */
     38e:	cf 91       	pop	r28
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
     390:	6d cf       	rjmp	.-294    	; 0x26c <lcd_write>

00000392 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	ec 01       	movw	r28, r24
    register char c;

    while ( (c = *s++) ) {
     398:	89 91       	ld	r24, Y+
     39a:	88 23       	and	r24, r24
     39c:	11 f0       	breq	.+4      	; 0x3a2 <lcd_puts+0x10>
        lcd_putc(c);
     39e:	dd df       	rcall	.-70     	; 0x35a <lcd_putc>
     3a0:	fb cf       	rjmp	.-10     	; 0x398 <lcd_puts+0x6>
    }

}/* lcd_puts */
     3a2:	df 91       	pop	r29
     3a4:	cf 91       	pop	r28
     3a6:	08 95       	ret

000003a8 <lcd_puts_p>:
Input:     string from program memory be be displayed
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	fc 01       	movw	r30, r24
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     3ae:	84 91       	lpm	r24, Z
     3b0:	ef 01       	movw	r28, r30
     3b2:	21 96       	adiw	r28, 0x01	; 1
     3b4:	88 23       	and	r24, r24
     3b6:	19 f0       	breq	.+6      	; 0x3be <lcd_puts_p+0x16>
        lcd_putc(c);
     3b8:	d0 df       	rcall	.-96     	; 0x35a <lcd_putc>
     3ba:	fe 01       	movw	r30, r28
     3bc:	f8 cf       	rjmp	.-16     	; 0x3ae <lcd_puts_p+0x6>
    }

}/* lcd_puts_p */
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	08 95       	ret

000003c4 <lcd_cleanstr>:
Input:    horisontal position
Returns:  none
*************************************************************************/
void lcd_cleanstr(uint8_t y)
/* print empty string on lcd */
{
     3c4:	cf 93       	push	r28
     3c6:	df 93       	push	r29
     3c8:	d8 2f       	mov	r29, r24
    register char i;

    lcd_gotoxy(0,y);
     3ca:	68 2f       	mov	r22, r24
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	b8 df       	rcall	.-144    	; 0x340 <lcd_gotoxy>
     3d0:	c0 e1       	ldi	r28, 0x10	; 16

    for ( i=0 ; i<LCD_DISP_LENGTH ; ++i )
        lcd_putc(' ');
     3d2:	80 e2       	ldi	r24, 0x20	; 32
     3d4:	c2 df       	rcall	.-124    	; 0x35a <lcd_putc>
     3d6:	c1 50       	subi	r28, 0x01	; 1
{
    register char i;

    lcd_gotoxy(0,y);

    for ( i=0 ; i<LCD_DISP_LENGTH ; ++i )
     3d8:	e1 f7       	brne	.-8      	; 0x3d2 <lcd_cleanstr+0xe>
        lcd_putc(' ');

    lcd_gotoxy(0,y);
     3da:	6d 2f       	mov	r22, r29
     3dc:	80 e0       	ldi	r24, 0x00	; 0

}/* lcd_cleanstr */
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
    lcd_gotoxy(0,y);

    for ( i=0 ; i<LCD_DISP_LENGTH ; ++i )
        lcd_putc(' ');

    lcd_gotoxy(0,y);
     3e2:	ae cf       	rjmp	.-164    	; 0x340 <lcd_gotoxy>

000003e4 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     3e4:	cf 93       	push	r28
     3e6:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     3e8:	88 9a       	sbi	0x11, 0	; 17
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     3ea:	89 9a       	sbi	0x11, 1	; 17
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     3ec:	8a 9a       	sbi	0x11, 2	; 17
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     3ee:	8c 9a       	sbi	0x11, 4	; 17
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     3f0:	8d 9a       	sbi	0x11, 5	; 17
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     3f2:	8e 9a       	sbi	0x11, 6	; 17
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     3f4:	8f 9a       	sbi	0x11, 7	; 17
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     3f6:	e0 e0       	ldi	r30, 0x00	; 0
     3f8:	fd e7       	ldi	r31, 0x7D	; 125
     3fa:	31 97       	sbiw	r30, 0x01	; 1
     3fc:	f1 f7       	brne	.-4      	; 0x3fa <lcd_init+0x16>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
     3fe:	95 9a       	sbi	0x12, 5	; 18
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
     400:	94 9a       	sbi	0x12, 4	; 18
    lcd_e_toggle();
     402:	30 df       	rcall	.-416    	; 0x264 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     404:	e0 e0       	ldi	r30, 0x00	; 0
     406:	f7 e2       	ldi	r31, 0x27	; 39
     408:	31 97       	sbiw	r30, 0x01	; 1
     40a:	f1 f7       	brne	.-4      	; 0x408 <lcd_init+0x24>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
     40c:	2b df       	rcall	.-426    	; 0x264 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     40e:	e0 e8       	ldi	r30, 0x80	; 128
     410:	f0 e0       	ldi	r31, 0x00	; 0
     412:	31 97       	sbiw	r30, 0x01	; 1
     414:	f1 f7       	brne	.-4      	; 0x412 <lcd_init+0x2e>
    /* repeat last command */
    lcd_e_toggle();
    delay(64);           /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
     416:	26 df       	rcall	.-436    	; 0x264 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     418:	e0 e8       	ldi	r30, 0x80	; 128
     41a:	f0 e0       	ldi	r31, 0x00	; 0
     41c:	31 97       	sbiw	r30, 0x01	; 1
     41e:	f1 f7       	brne	.-4      	; 0x41c <lcd_init+0x38>
    /* repeat last command a third time */
    lcd_e_toggle();
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     420:	94 98       	cbi	0x12, 4	; 18
    lcd_e_toggle();
     422:	20 df       	rcall	.-448    	; 0x264 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     424:	e0 e8       	ldi	r30, 0x80	; 128
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	31 97       	sbiw	r30, 0x01	; 1
     42a:	f1 f7       	brne	.-4      	; 0x428 <lcd_init+0x44>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     42c:	88 e2       	ldi	r24, 0x28	; 40
     42e:	7a df       	rcall	.-268    	; 0x324 <lcd_command>
}/* lcd_cleanstr */


static void lcd_addsymbols(void)
{
    lcd_command((1<<LCD_CGRAM) | 0x00);
     430:	80 e4       	ldi	r24, 0x40	; 64
     432:	78 df       	rcall	.-272    	; 0x324 <lcd_command>
    lcd_data(0x00);
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	7d df       	rcall	.-262    	; 0x332 <lcd_data>
    lcd_command((1<<LCD_CGRAM) | 0x01);
     438:	81 e4       	ldi	r24, 0x41	; 65
     43a:	74 df       	rcall	.-280    	; 0x324 <lcd_command>
    lcd_data(0x15);
     43c:	85 e1       	ldi	r24, 0x15	; 21
     43e:	79 df       	rcall	.-270    	; 0x332 <lcd_data>
    lcd_command((1<<LCD_CGRAM) | 0x02);
     440:	82 e4       	ldi	r24, 0x42	; 66
     442:	70 df       	rcall	.-288    	; 0x324 <lcd_command>
    lcd_data(0x0e);
     444:	8e e0       	ldi	r24, 0x0E	; 14
     446:	75 df       	rcall	.-278    	; 0x332 <lcd_data>
    lcd_command((1<<LCD_CGRAM) | 0x03);
     448:	83 e4       	ldi	r24, 0x43	; 67
     44a:	6c df       	rcall	.-296    	; 0x324 <lcd_command>
    lcd_data(0x04);
     44c:	84 e0       	ldi	r24, 0x04	; 4
     44e:	71 df       	rcall	.-286    	; 0x332 <lcd_data>
    lcd_command((1<<LCD_CGRAM) | 0x04);
     450:	84 e4       	ldi	r24, 0x44	; 68
     452:	68 df       	rcall	.-304    	; 0x324 <lcd_command>
    lcd_data(0x04);
     454:	84 e0       	ldi	r24, 0x04	; 4
     456:	6d df       	rcall	.-294    	; 0x332 <lcd_data>
    lcd_command((1<<LCD_CGRAM) | 0x05);
     458:	85 e4       	ldi	r24, 0x45	; 69
     45a:	64 df       	rcall	.-312    	; 0x324 <lcd_command>
    lcd_data(0x04);
     45c:	84 e0       	ldi	r24, 0x04	; 4
     45e:	69 df       	rcall	.-302    	; 0x332 <lcd_data>
    lcd_command((1<<LCD_CGRAM) | 0x06);
     460:	86 e4       	ldi	r24, 0x46	; 70
     462:	60 df       	rcall	.-320    	; 0x324 <lcd_command>
    lcd_data(0x00);
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	65 df       	rcall	.-310    	; 0x332 <lcd_data>
    lcd_command((1<<LCD_CGRAM) | 0x07);
     468:	87 e4       	ldi	r24, 0x47	; 71
     46a:	5c df       	rcall	.-328    	; 0x324 <lcd_command>
    lcd_data(0x00);
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	61 df       	rcall	.-318    	; 0x332 <lcd_data>
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
#endif
    lcd_addsymbols();
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     470:	88 e0       	ldi	r24, 0x08	; 8
     472:	58 df       	rcall	.-336    	; 0x324 <lcd_command>
    lcd_clrscr();                           /* display clear                */
     474:	6e df       	rcall	.-292    	; 0x352 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     476:	86 e0       	ldi	r24, 0x06	; 6
     478:	55 df       	rcall	.-342    	; 0x324 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
     47a:	8c 2f       	mov	r24, r28

}/* lcd_init */
     47c:	cf 91       	pop	r28
#endif
    lcd_addsymbols();
    lcd_command(LCD_DISP_OFF);              /* display off                  */
    lcd_clrscr();                           /* display clear                */
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
    lcd_command(dispAttr);                  /* display/cursor control       */
     47e:	52 cf       	rjmp	.-348    	; 0x324 <lcd_command>

00000480 <clock_init>:

volatile uint8_t time[7];               // тут хранится время

void clock_init(void)
{
    CLOCK_TCCRA = CLOCK_TCCRA_DEF;      // инициализация таймера
     480:	1f bc       	out	0x2f, r1	; 47
    CLOCK_TCCRB = CLOCK_TCCRB_DEF;
     482:	8d e0       	ldi	r24, 0x0D	; 13
     484:	8e bd       	out	0x2e, r24	; 46
    CLOCK_COMP_REG = CLOCK_COMP_DEF;
     486:	84 e8       	ldi	r24, 0x84	; 132
     488:	9e e1       	ldi	r25, 0x1E	; 30
     48a:	9b bd       	out	0x2b, r25	; 43
     48c:	8a bd       	out	0x2a, r24	; 42

    TIMSK |= (1<<OCIE1A);               // включить прерывание по переполнению таймера
     48e:	89 b7       	in	r24, 0x39	; 57
     490:	80 61       	ori	r24, 0x10	; 16
     492:	89 bf       	out	0x39, r24	; 57

    time[0] = time[1] = time[2] = 0;    // внести начальное значение времени (1 января 2014, 00:00:00)
     494:	10 92 59 01 	sts	0x0159, r1
     498:	10 92 58 01 	sts	0x0158, r1
     49c:	10 92 57 01 	sts	0x0157, r1
    time[3] = time[4] = time[5] = 1;
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	80 93 5c 01 	sts	0x015C, r24
     4a6:	80 93 5b 01 	sts	0x015B, r24
     4aa:	80 93 5a 01 	sts	0x015A, r24
    time[6] = 14;
     4ae:	8e e0       	ldi	r24, 0x0E	; 14
     4b0:	80 93 5d 01 	sts	0x015D, r24
     4b4:	08 95       	ret

000004b6 <__vector_6>:
}


ISR(TIMER1_COMPA_vect)
{
     4b6:	1f 92       	push	r1
     4b8:	0f 92       	push	r0
     4ba:	0f b6       	in	r0, 0x3f	; 63
     4bc:	0f 92       	push	r0
     4be:	11 24       	eor	r1, r1
     4c0:	8f 93       	push	r24
    cli();
     4c2:	f8 94       	cli

    if( (++time[0]) >= 60 )
     4c4:	80 91 57 01 	lds	r24, 0x0157
     4c8:	8f 5f       	subi	r24, 0xFF	; 255
     4ca:	80 93 57 01 	sts	0x0157, r24
     4ce:	8c 33       	cpi	r24, 0x3C	; 60
     4d0:	a0 f0       	brcs	.+40     	; 0x4fa <__vector_6+0x44>
    {
        time[0] = 0;
     4d2:	10 92 57 01 	sts	0x0157, r1
        if( (++time[1]) >= 60 )
     4d6:	80 91 58 01 	lds	r24, 0x0158
     4da:	8f 5f       	subi	r24, 0xFF	; 255
     4dc:	80 93 58 01 	sts	0x0158, r24
     4e0:	8c 33       	cpi	r24, 0x3C	; 60
     4e2:	58 f0       	brcs	.+22     	; 0x4fa <__vector_6+0x44>
        {
            time[1] = 0;
     4e4:	10 92 58 01 	sts	0x0158, r1
            if( (++time[2]) >= 24 )
     4e8:	80 91 59 01 	lds	r24, 0x0159
     4ec:	8f 5f       	subi	r24, 0xFF	; 255
     4ee:	80 93 59 01 	sts	0x0159, r24
     4f2:	88 31       	cpi	r24, 0x18	; 24
     4f4:	10 f0       	brcs	.+4      	; 0x4fa <__vector_6+0x44>
            {
                time[2] = 0;
     4f6:	10 92 59 01 	sts	0x0159, r1
            }
        }
    }
    sei();
     4fa:	78 94       	sei
}
     4fc:	8f 91       	pop	r24
     4fe:	0f 90       	pop	r0
     500:	0f be       	out	0x3f, r0	; 63
     502:	0f 90       	pop	r0
     504:	1f 90       	pop	r1
     506:	18 95       	reti

00000508 <_crc16_update>:
		: "=r" (__ret), "=d" (__tmp)
		: "r" (__data), "0" (__crc)
		: "r0"
	);
	return __ret;
}
     508:	86 27       	eor	r24, r22
     50a:	68 2f       	mov	r22, r24
     50c:	62 95       	swap	r22
     50e:	68 27       	eor	r22, r24
     510:	06 2e       	mov	r0, r22
     512:	66 95       	lsr	r22
     514:	66 95       	lsr	r22
     516:	60 25       	eor	r22, r0
     518:	06 2e       	mov	r0, r22
     51a:	66 95       	lsr	r22
     51c:	60 25       	eor	r22, r0
     51e:	67 70       	andi	r22, 0x07	; 7
     520:	08 2e       	mov	r0, r24
     522:	89 2f       	mov	r24, r25
     524:	66 95       	lsr	r22
     526:	07 94       	ror	r0
     528:	67 95       	ror	r22
     52a:	90 2d       	mov	r25, r0
     52c:	86 27       	eor	r24, r22
     52e:	06 94       	lsr	r0
     530:	67 95       	ror	r22
     532:	90 25       	eor	r25, r0
     534:	86 27       	eor	r24, r22
     536:	08 95       	ret

00000538 <rfm22_write>:


/* Записывает по SPI data по адресу address */
void rfm22_write (unsigned char address,unsigned char data)
{
	RFM22_PORT &= ~(1<<NSEL);
     538:	c2 98       	cbi	0x18, 2	; 24

	SPDR = address | (1<<7);        // записывает адрес
     53a:	80 68       	ori	r24, 0x80	; 128
     53c:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR<<7));
     53e:	8e b1       	in	r24, 0x0e	; 14
     540:	88 23       	and	r24, r24
     542:	e9 f3       	breq	.-6      	; 0x53e <rfm22_write+0x6>

	SPDR = data;                    // записывает данные
     544:	6f b9       	out	0x0f, r22	; 15
	while (!(SPSR<<7));
     546:	8e b1       	in	r24, 0x0e	; 14
     548:	88 23       	and	r24, r24
     54a:	e9 f3       	breq	.-6      	; 0x546 <rfm22_write+0xe>

	RFM22_PORT |= (1<<NSEL);
     54c:	c2 9a       	sbi	0x18, 2	; 24
     54e:	08 95       	ret

00000550 <rfm22_read>:
/* Считывает по SPI данные data по адресу address */
uint8_t rfm22_read(unsigned char address)
{
	unsigned char data;

	RFM22_PORT &= ~(1<<NSEL);
     550:	c2 98       	cbi	0x18, 2	; 24

	SPDR = address;		 		// записывает адрес
     552:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR<<7));
     554:	8e b1       	in	r24, 0x0e	; 14
     556:	88 23       	and	r24, r24
     558:	e9 f3       	breq	.-6      	; 0x554 <rfm22_read+0x4>

	SPDR = 0xff;         		// записывает пустые данные
     55a:	8f ef       	ldi	r24, 0xFF	; 255
     55c:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR<<7));
     55e:	8e b1       	in	r24, 0x0e	; 14
     560:	88 23       	and	r24, r24
     562:	e9 f3       	breq	.-6      	; 0x55e <rfm22_read+0xe>
	data = SPDR;
     564:	8f b1       	in	r24, 0x0f	; 15

	RFM22_PORT |= (1<<NSEL);
     566:	c2 9a       	sbi	0x18, 2	; 24
	return data;
}
     568:	08 95       	ret

0000056a <rfm22_write_burst>:
/* Записывает последовательно lenght байт по SPI из *data по адресу address */
void rfm22_write_burst (uint8_t address, volatile uint8_t *data, uint8_t lenght)
{
	register uint8_t i=0;

	RFM22_PORT &= ~(1<<NSEL);
     56a:	c2 98       	cbi	0x18, 2	; 24

	SPDR = address | (1 << 7);		 // записывает адрес
     56c:	80 68       	ori	r24, 0x80	; 128
     56e:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR<<7));
     570:	8e b1       	in	r24, 0x0e	; 14
     572:	88 23       	and	r24, r24
     574:	e9 f3       	breq	.-6      	; 0x570 <rfm22_write_burst+0x6>
     576:	96 2f       	mov	r25, r22
     578:	fb 01       	movw	r30, r22
     57a:	8e 2f       	mov	r24, r30
     57c:	89 1b       	sub	r24, r25

	for(i=0 ; i<lenght ; ++i) {		// записывает данные
     57e:	84 17       	cp	r24, r20
     580:	38 f4       	brcc	.+14     	; 0x590 <rfm22_write_burst+0x26>
		SPDR = *(data+i);
     582:	80 81       	ld	r24, Z
     584:	8f b9       	out	0x0f, r24	; 15
		while (!(SPSR<<7));
     586:	8e b1       	in	r24, 0x0e	; 14
     588:	88 23       	and	r24, r24
     58a:	e9 f3       	breq	.-6      	; 0x586 <rfm22_write_burst+0x1c>
     58c:	31 96       	adiw	r30, 0x01	; 1
     58e:	f5 cf       	rjmp	.-22     	; 0x57a <rfm22_write_burst+0x10>
		}

	RFM22_PORT |= (1<<NSEL);
     590:	c2 9a       	sbi	0x18, 2	; 24
     592:	08 95       	ret

00000594 <rfm22_read_burst>:
/* Считывает последовательно lenght байт по SPI, начиная с адреса address, в *data */
void rfm22_read_burst  (uint8_t address, volatile uint8_t *data, uint8_t lenght)
{
	register uint8_t i=0;

	RFM22_PORT &= ~(1<<NSEL);
     594:	c2 98       	cbi	0x18, 2	; 24

	SPDR = address;		 			// записывает адрес
     596:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR<<7));
     598:	8e b1       	in	r24, 0x0e	; 14
     59a:	88 23       	and	r24, r24
     59c:	e9 f3       	breq	.-6      	; 0x598 <rfm22_read_burst+0x4>
     59e:	96 2f       	mov	r25, r22
     5a0:	fb 01       	movw	r30, r22

	for(i=0 ; i<lenght ; ++i) {		// считывает данные
		SPDR=0xff;
     5a2:	2f ef       	ldi	r18, 0xFF	; 255
     5a4:	8e 2f       	mov	r24, r30
     5a6:	89 1b       	sub	r24, r25
	RFM22_PORT &= ~(1<<NSEL);

	SPDR = address;		 			// записывает адрес
	while (!(SPSR<<7));

	for(i=0 ; i<lenght ; ++i) {		// считывает данные
     5a8:	84 17       	cp	r24, r20
     5aa:	38 f4       	brcc	.+14     	; 0x5ba <rfm22_read_burst+0x26>
		SPDR=0xff;
     5ac:	2f b9       	out	0x0f, r18	; 15
		while (!(SPSR<<7));
     5ae:	8e b1       	in	r24, 0x0e	; 14
     5b0:	88 23       	and	r24, r24
     5b2:	e9 f3       	breq	.-6      	; 0x5ae <rfm22_read_burst+0x1a>
		*(data+i) = SPDR;
     5b4:	8f b1       	in	r24, 0x0f	; 15
     5b6:	81 93       	st	Z+, r24
     5b8:	f5 cf       	rjmp	.-22     	; 0x5a4 <rfm22_read_burst+0x10>
		}

	RFM22_PORT |= (1<<NSEL);
     5ba:	c2 9a       	sbi	0x18, 2	; 24
     5bc:	08 95       	ret

000005be <rfm22_init>:



uint8_t rfm22_init(void)
{
	RFM22_DDR |= RFM22_MASK;					//включает RFM
     5be:	87 b3       	in	r24, 0x17	; 23
     5c0:	8e 62       	ori	r24, 0x2E	; 46
     5c2:	87 bb       	out	0x17, r24	; 23
	RFM22_PORT |= (1<<NSEL) | (1<<NIRQ);
     5c4:	88 b3       	in	r24, 0x18	; 24
     5c6:	85 60       	ori	r24, 0x05	; 5
     5c8:	88 bb       	out	0x18, r24	; 24
	RFM22_PORT &= ~(1<<SDN);
     5ca:	c1 98       	cbi	0x18, 1	; 24

	SPCR = RFM22_SPCR;
     5cc:	81 e5       	ldi	r24, 0x51	; 81
     5ce:	8d b9       	out	0x0d, r24	; 13
    RFM22_TCCR = RFM22_TCCR_DEF;
     5d0:	85 e0       	ldi	r24, 0x05	; 5
     5d2:	83 bf       	out	0x33, r24	; 51

    rfm22_write(INTERRUPT_EN1_P, INTERRUPT_EN1);
     5d4:	66 e0       	ldi	r22, 0x06	; 6
     5d6:	b0 df       	rcall	.-160    	; 0x538 <rfm22_write>
    rfm22_write(INTERRUPT_EN2_P, INTERRUPT_EN2);
     5d8:	60 e0       	ldi	r22, 0x00	; 0
     5da:	86 e0       	ldi	r24, 0x06	; 6
     5dc:	ad df       	rcall	.-166    	; 0x538 <rfm22_write>
    rfm22_write(OPERATING_MODE1_P, 1<<LOW_BATTERY_EN);
     5de:	60 e4       	ldi	r22, 0x40	; 64
     5e0:	87 e0       	ldi	r24, 0x07	; 7
     5e2:	aa df       	rcall	.-172    	; 0x538 <rfm22_write>

    rfm22_write(OSC_LOAD_CAP_P, OSC_LOAD_CAP);
     5e4:	6f e7       	ldi	r22, 0x7F	; 127
     5e6:	89 e0       	ldi	r24, 0x09	; 9
     5e8:	a7 df       	rcall	.-178    	; 0x538 <rfm22_write>
    rfm22_write(LOW_BATTERY_THR_P, LOW_BATTERY_THR);
     5ea:	6f e0       	ldi	r22, 0x0F	; 15
     5ec:	8a e1       	ldi	r24, 0x1A	; 26
     5ee:	a4 df       	rcall	.-184    	; 0x538 <rfm22_write>

    rfm22_write(IF_FILTER_BW_P, IF_FILTER_BW);
     5f0:	61 e0       	ldi	r22, 0x01	; 1
     5f2:	8c e1       	ldi	r24, 0x1C	; 28
     5f4:	a1 df       	rcall	.-190    	; 0x538 <rfm22_write>
    rfm22_write(CLK_REC_OVER_P, CLK_REC_OVER);
     5f6:	61 ea       	ldi	r22, 0xA1	; 161
     5f8:	80 e2       	ldi	r24, 0x20	; 32
     5fa:	9e df       	rcall	.-196    	; 0x538 <rfm22_write>
    rfm22_write(CLK_REC_OFFSET2_P, CLK_REC_OFFSET2);
     5fc:	60 e2       	ldi	r22, 0x20	; 32
     5fe:	81 e2       	ldi	r24, 0x21	; 33
     600:	9b df       	rcall	.-202    	; 0x538 <rfm22_write>
    rfm22_write(CLK_REC_OFFSET1_P, CLK_REC_OFFSET1);
     602:	6e e4       	ldi	r22, 0x4E	; 78
     604:	82 e2       	ldi	r24, 0x22	; 34
     606:	98 df       	rcall	.-208    	; 0x538 <rfm22_write>
    rfm22_write(CLK_REC_OFFSET0_P, CLK_REC_OFFSET0);
     608:	65 ea       	ldi	r22, 0xA5	; 165
     60a:	83 e2       	ldi	r24, 0x23	; 35
     60c:	95 df       	rcall	.-214    	; 0x538 <rfm22_write>
    rfm22_write(CLK_REC_CRGAIN1_P, CLK_REC_CRGAIN1);
     60e:	60 e0       	ldi	r22, 0x00	; 0
     610:	84 e2       	ldi	r24, 0x24	; 36
     612:	92 df       	rcall	.-220    	; 0x538 <rfm22_write>
    rfm22_write(CLK_REC_CRGAIN0_P, CLK_REC_CRGAIN0);
     614:	64 e3       	ldi	r22, 0x34	; 52
     616:	85 e2       	ldi	r24, 0x25	; 37
     618:	8f df       	rcall	.-226    	; 0x538 <rfm22_write>

    rfm22_write(RSSI_THRESHOLD_P, RSSI_THRESHOLD);
     61a:	6a ea       	ldi	r22, 0xAA	; 170
     61c:	87 e2       	ldi	r24, 0x27	; 39
     61e:	8c df       	rcall	.-232    	; 0x538 <rfm22_write>

    rfm22_write(AFC_LIMITER_P, AFC_LIMITER);
     620:	6e e1       	ldi	r22, 0x1E	; 30
     622:	8a e2       	ldi	r24, 0x2A	; 42
     624:	89 df       	rcall	.-238    	; 0x538 <rfm22_write>
    rfm22_write(DATA_ACC_CTRL_P, DATA_ACC_CTRL);
     626:	68 e8       	ldi	r22, 0x88	; 136
     628:	80 e3       	ldi	r24, 0x30	; 48
     62a:	86 df       	rcall	.-244    	; 0x538 <rfm22_write>
    rfm22_write(HEADER_CTRL1_P, HEADER_CTRL1);
     62c:	60 e0       	ldi	r22, 0x00	; 0
     62e:	82 e3       	ldi	r24, 0x32	; 50
     630:	83 df       	rcall	.-250    	; 0x538 <rfm22_write>
    rfm22_write(HEADER_CTRL2_P, HEADER_CTRL2);
     632:	62 e0       	ldi	r22, 0x02	; 2
     634:	83 e3       	ldi	r24, 0x33	; 51
     636:	80 df       	rcall	.-256    	; 0x538 <rfm22_write>
    rfm22_write(PREAMBLE_LENGHT_P, PREAMBLE_LENGHT);
     638:	66 e0       	ldi	r22, 0x06	; 6
     63a:	84 e3       	ldi	r24, 0x34	; 52
     63c:	7d df       	rcall	.-262    	; 0x538 <rfm22_write>
    rfm22_write(PREAMBLE_DETCTR_P, PREAMBLE_DETCTR);
     63e:	68 e1       	ldi	r22, 0x18	; 24
     640:	85 e3       	ldi	r24, 0x35	; 53
     642:	7a df       	rcall	.-268    	; 0x538 <rfm22_write>

    rfm22_write(SYNCH_WORD3_P, SYNCH_WORD3);
     644:	6d e2       	ldi	r22, 0x2D	; 45
     646:	86 e3       	ldi	r24, 0x36	; 54
     648:	77 df       	rcall	.-274    	; 0x538 <rfm22_write>
    rfm22_write(SYNCH_WORD2_P, SYNCH_WORD2);
     64a:	64 ed       	ldi	r22, 0xD4	; 212
     64c:	87 e3       	ldi	r24, 0x37	; 55
     64e:	74 df       	rcall	.-280    	; 0x538 <rfm22_write>

    rfm22_write(TX_POWER_P, TX_POWER);
     650:	6f e0       	ldi	r22, 0x0F	; 15
     652:	8d e6       	ldi	r24, 0x6D	; 109
     654:	71 df       	rcall	.-286    	; 0x538 <rfm22_write>
    rfm22_write(TX_DATA_RATE1_P, TX_DATA_RATE1);
     656:	6e e4       	ldi	r22, 0x4E	; 78
     658:	8e e6       	ldi	r24, 0x6E	; 110
     65a:	6e df       	rcall	.-292    	; 0x538 <rfm22_write>
    rfm22_write(TX_DATA_RATE0_P, TX_DATA_RATE0);
     65c:	65 ea       	ldi	r22, 0xA5	; 165
     65e:	8f e6       	ldi	r24, 0x6F	; 111
     660:	6b df       	rcall	.-298    	; 0x538 <rfm22_write>
    rfm22_write(MODULAT_CTRL1_P, MODULAT_CTRL1);
     662:	60 e2       	ldi	r22, 0x20	; 32
     664:	80 e7       	ldi	r24, 0x70	; 112
     666:	68 df       	rcall	.-304    	; 0x538 <rfm22_write>
    rfm22_write(MODULAT_CTRL2_P, MODULAT_CTRL2);
     668:	62 e2       	ldi	r22, 0x22	; 34
     66a:	81 e7       	ldi	r24, 0x71	; 113
     66c:	65 df       	rcall	.-310    	; 0x538 <rfm22_write>
    rfm22_write(FREQ_DEVIATION_P, FREQ_DEVIATION);
     66e:	60 e3       	ldi	r22, 0x30	; 48
     670:	82 e7       	ldi	r24, 0x72	; 114
     672:	62 df       	rcall	.-316    	; 0x538 <rfm22_write>
    rfm22_write(FREQ_BAND_SEL_P, FREQ_BAND_SEL);
     674:	63 e5       	ldi	r22, 0x53	; 83
     676:	85 e7       	ldi	r24, 0x75	; 117
     678:	5f df       	rcall	.-322    	; 0x538 <rfm22_write>
    rfm22_write(CARRIER_FREQ1_P, CARRIER_FREQ1);
     67a:	6d e4       	ldi	r22, 0x4D	; 77
     67c:	86 e7       	ldi	r24, 0x76	; 118
     67e:	5c df       	rcall	.-328    	; 0x538 <rfm22_write>
    rfm22_write(CARRIER_FREQ2_P, CARRIER_FREQ2);
     680:	60 ec       	ldi	r22, 0xC0	; 192
     682:	87 e7       	ldi	r24, 0x77	; 119
     684:	59 df       	rcall	.-334    	; 0x538 <rfm22_write>

    rfm22_write(FREQ_HOP_CHSEL_P, FREQ_HOP_CHSEL);
     686:	60 e0       	ldi	r22, 0x00	; 0
     688:	89 e7       	ldi	r24, 0x79	; 121
     68a:	56 df       	rcall	.-340    	; 0x538 <rfm22_write>
    rfm22_write(FREQ_HOP_STSIZE_P, FREQ_HOP_STSIZE);
     68c:	6c e0       	ldi	r22, 0x0C	; 12
     68e:	8a e7       	ldi	r24, 0x7A	; 122
     690:	53 df       	rcall	.-346    	; 0x538 <rfm22_write>

    if ( SYNCH_WORD3 != rfm22_read(SYNCH_WORD3_P) ) return 1;			// проверка модуля
     692:	86 e3       	ldi	r24, 0x36	; 54
     694:	5d df       	rcall	.-326    	; 0x550 <rfm22_read>
     696:	91 e0       	ldi	r25, 0x01	; 1
     698:	8d 32       	cpi	r24, 0x2D	; 45
     69a:	09 f4       	brne	.+2      	; 0x69e <rfm22_init+0xe0>
     69c:	90 e0       	ldi	r25, 0x00	; 0
	else                                            return 0;
}
     69e:	89 2f       	mov	r24, r25
     6a0:	08 95       	ret

000006a2 <rfm22_wait_event>:
}



uint8_t rfm22_wait_event (uint8_t event)
{
     6a2:	cf 93       	push	r28
     6a4:	c8 2f       	mov	r28, r24
    uint8_t interrupt = 0;
    RFM22_TCNT = 0;
     6a6:	12 be       	out	0x32, r1	; 50



uint8_t rfm22_wait_event (uint8_t event)
{
    uint8_t interrupt = 0;
     6a8:	80 e0       	ldi	r24, 0x00	; 0
    RFM22_TCNT = 0;

    while (((event & interrupt) == 0) & (RFM22_TCNT<RFM22_WAIT_TIME))
     6aa:	28 2f       	mov	r18, r24
     6ac:	2c 23       	and	r18, r28
     6ae:	92 b7       	in	r25, 0x32	; 50
     6b0:	21 11       	cpse	r18, r1
     6b2:	07 c0       	rjmp	.+14     	; 0x6c2 <rfm22_wait_event+0x20>
     6b4:	98 3c       	cpi	r25, 0xC8	; 200
     6b6:	28 f4       	brcc	.+10     	; 0x6c2 <rfm22_wait_event+0x20>
        if ((RFM22_PIN & (1<<NIRQ)) == 0)
     6b8:	b0 99       	sbic	0x16, 0	; 22
     6ba:	f9 cf       	rjmp	.-14     	; 0x6ae <rfm22_wait_event+0xc>
            interrupt = rfm22_read(INTERRUPT_ST1_P);
     6bc:	83 e0       	ldi	r24, 0x03	; 3
     6be:	48 df       	rcall	.-368    	; 0x550 <rfm22_read>
     6c0:	f4 cf       	rjmp	.-24     	; 0x6aa <rfm22_wait_event+0x8>

    return interrupt;
}
     6c2:	cf 91       	pop	r28
     6c4:	08 95       	ret

000006c6 <rfm22_allclean>:


// очистка прерываний и всех буферов
void rfm22_allclean(void)
{
    rfm22_read(INTERRUPT_ST1_P);
     6c6:	83 e0       	ldi	r24, 0x03	; 3
     6c8:	43 df       	rcall	.-378    	; 0x550 <rfm22_read>
    rfm22_read(INTERRUPT_ST2_P);
     6ca:	84 e0       	ldi	r24, 0x04	; 4
     6cc:	41 df       	rcall	.-382    	; 0x550 <rfm22_read>
    rfm22_write(OPERATING_MODE2_P, (1<<TX_FIFO_CLR) | (1<<RX_FIFO_CLR) );
     6ce:	63 e0       	ldi	r22, 0x03	; 3
     6d0:	88 e0       	ldi	r24, 0x08	; 8
     6d2:	32 df       	rcall	.-412    	; 0x538 <rfm22_write>
    rfm22_write(OPERATING_MODE2_P, 0x00);
     6d4:	60 e0       	ldi	r22, 0x00	; 0
     6d6:	88 e0       	ldi	r24, 0x08	; 8
     6d8:	2f cf       	rjmp	.-418    	; 0x538 <rfm22_write>

000006da <rfm22_transmit_start>:
}



void rfm22_transmit_start(uint8_t nbytes)
{
     6da:	1f 93       	push	r17
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
     6e0:	18 2f       	mov	r17, r24
    uint8_t i;
    uint16_t crc=0xffff;

    if(nbytes > DATA_BYTES_MAX) return;                                     // ели размер пакета больше размера буфера - ничего не отправляет.
     6e2:	89 31       	cpi	r24, 0x19	; 25
     6e4:	48 f5       	brcc	.+82     	; 0x738 <rfm22_transmit_start+0x5e>

    rfm22_allclean();
     6e6:	ef df       	rcall	.-34     	; 0x6c6 <rfm22_allclean>

    for(i=0 ; i<nbytes ; ++i)   crc = _crc16_update(crc, pack_buffer[i]);
     6e8:	c0 e0       	ldi	r28, 0x00	; 0
     6ea:	d0 e0       	ldi	r29, 0x00	; 0


void rfm22_transmit_start(uint8_t nbytes)
{
    uint8_t i;
    uint16_t crc=0xffff;
     6ec:	8f ef       	ldi	r24, 0xFF	; 255
     6ee:	9f ef       	ldi	r25, 0xFF	; 255

    if(nbytes > DATA_BYTES_MAX) return;                                     // ели размер пакета больше размера буфера - ничего не отправляет.

    rfm22_allclean();

    for(i=0 ; i<nbytes ; ++i)   crc = _crc16_update(crc, pack_buffer[i]);
     6f0:	c1 17       	cp	r28, r17
     6f2:	38 f4       	brcc	.+14     	; 0x702 <rfm22_transmit_start+0x28>
     6f4:	de 01       	movw	r26, r28
     6f6:	a2 5a       	subi	r26, 0xA2	; 162
     6f8:	be 4f       	sbci	r27, 0xFE	; 254
     6fa:	6c 91       	ld	r22, X
     6fc:	05 df       	rcall	.-502    	; 0x508 <_crc16_update>
     6fe:	21 96       	adiw	r28, 0x01	; 1
     700:	f7 cf       	rjmp	.-18     	; 0x6f0 <rfm22_transmit_start+0x16>
    pack_buffer[nbytes++] = (uint8_t)(crc>>8);
     702:	a1 2f       	mov	r26, r17
     704:	b0 e0       	ldi	r27, 0x00	; 0
     706:	a2 5a       	subi	r26, 0xA2	; 162
     708:	be 4f       	sbci	r27, 0xFE	; 254
     70a:	9c 93       	st	X, r25
    pack_buffer[nbytes++] = (uint8_t)crc;
     70c:	c2 e0       	ldi	r28, 0x02	; 2
     70e:	c1 0f       	add	r28, r17
    if(nbytes > DATA_BYTES_MAX) return;                                     // ели размер пакета больше размера буфера - ничего не отправляет.

    rfm22_allclean();

    for(i=0 ; i<nbytes ; ++i)   crc = _crc16_update(crc, pack_buffer[i]);
    pack_buffer[nbytes++] = (uint8_t)(crc>>8);
     710:	1f 5f       	subi	r17, 0xFF	; 255
    pack_buffer[nbytes++] = (uint8_t)crc;
     712:	e1 2f       	mov	r30, r17
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	e2 5a       	subi	r30, 0xA2	; 162
     718:	fe 4f       	sbci	r31, 0xFE	; 254
     71a:	80 83       	st	Z, r24

    rfm22_write_burst(FIFO_ACCESS_P, pack_buffer, nbytes);
     71c:	4c 2f       	mov	r20, r28
     71e:	6e e5       	ldi	r22, 0x5E	; 94
     720:	71 e0       	ldi	r23, 0x01	; 1
     722:	8f e7       	ldi	r24, 0x7F	; 127
     724:	22 df       	rcall	.-444    	; 0x56a <rfm22_write_burst>
    rfm22_write(TX_PACK_LENGHT_P, nbytes);
     726:	6c 2f       	mov	r22, r28
     728:	8e e3       	ldi	r24, 0x3E	; 62
     72a:	06 df       	rcall	.-500    	; 0x538 <rfm22_write>

    rfm22_write(OPERATING_MODE1_P, (1<<TX_ON));
     72c:	68 e0       	ldi	r22, 0x08	; 8
     72e:	87 e0       	ldi	r24, 0x07	; 7
}
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
    pack_buffer[nbytes++] = (uint8_t)crc;

    rfm22_write_burst(FIFO_ACCESS_P, pack_buffer, nbytes);
    rfm22_write(TX_PACK_LENGHT_P, nbytes);

    rfm22_write(OPERATING_MODE1_P, (1<<TX_ON));
     736:	00 cf       	rjmp	.-512    	; 0x538 <rfm22_write>
}
     738:	df 91       	pop	r29
     73a:	cf 91       	pop	r28
     73c:	1f 91       	pop	r17
     73e:	08 95       	ret

00000740 <rfm22_receive_start>:



void rfm22_receive_start(void)
{
    rfm22_allclean();
     740:	c2 df       	rcall	.-124    	; 0x6c6 <rfm22_allclean>
    rfm22_write(OPERATING_MODE1_P, (1<<RX_ON));
     742:	64 e0       	ldi	r22, 0x04	; 4
     744:	87 e0       	ldi	r24, 0x07	; 7
     746:	f8 ce       	rjmp	.-528    	; 0x538 <rfm22_write>

00000748 <rfm22_sleep>:



void rfm22_sleep(void)
{
    rfm22_write(OPERATING_MODE1_P, (1<<LOW_BATTERY_EN));
     748:	60 e4       	ldi	r22, 0x40	; 64
     74a:	87 e0       	ldi	r24, 0x07	; 7
     74c:	f5 de       	rcall	.-534    	; 0x538 <rfm22_write>
    rfm22_allclean();
     74e:	bb cf       	rjmp	.-138    	; 0x6c6 <rfm22_allclean>

00000750 <rfm22_transmit_complete>:
    rfm22_write(OPERATING_MODE1_P, (1<<TX_ON));
}


uint8_t rfm22_transmit_complete(void)
{
     750:	cf 93       	push	r28
     752:	df 93       	push	r29
     754:	1f 92       	push	r1
     756:	cd b7       	in	r28, 0x3d	; 61
     758:	de b7       	in	r29, 0x3e	; 62
    uint8_t error = 0;

    if ( ((1<<PACKET_SENT) & rfm22_wait_event(1<<PACKET_SENT)) == 0 )
     75a:	84 e0       	ldi	r24, 0x04	; 4
     75c:	a2 df       	rcall	.-188    	; 0x6a2 <rfm22_wait_event>
     75e:	82 ff       	sbrs	r24, 2
     760:	02 c0       	rjmp	.+4      	; 0x766 <rfm22_transmit_complete+0x16>
}


uint8_t rfm22_transmit_complete(void)
{
    uint8_t error = 0;
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	01 c0       	rjmp	.+2      	; 0x768 <rfm22_transmit_complete+0x18>

    if ( ((1<<PACKET_SENT) & rfm22_wait_event(1<<PACKET_SENT)) == 0 )
        error = 2;
     766:	82 e0       	ldi	r24, 0x02	; 2

    rfm22_sleep();
     768:	89 83       	std	Y+1, r24	; 0x01
     76a:	ee df       	rcall	.-36     	; 0x748 <rfm22_sleep>
    return error;
}
     76c:	89 81       	ldd	r24, Y+1	; 0x01
     76e:	0f 90       	pop	r0
     770:	df 91       	pop	r29
     772:	cf 91       	pop	r28
     774:	08 95       	ret

00000776 <rfm22_receive_complete>:
}



uint8_t rfm22_receive_complete(void)
{
     776:	1f 93       	push	r17
     778:	cf 93       	push	r28
     77a:	df 93       	push	r29
    uint8_t i, error = 0;
    uint16_t crc=0xffff;

    if ( ((1<<PACKET_RECEIVED) & rfm22_wait_event(1<<PACKET_RECEIVED)) == 0 )
     77c:	82 e0       	ldi	r24, 0x02	; 2
     77e:	91 df       	rcall	.-222    	; 0x6a2 <rfm22_wait_event>
     780:	81 ff       	sbrs	r24, 1
     782:	3c c0       	rjmp	.+120    	; 0x7fc <rfm22_receive_complete+0x86>
        return 1;                                                                               // возвращает 2 если не дождался пакета

    pack_size = rfm22_read(RX_PACK_LENGHT_P);
     784:	8b e4       	ldi	r24, 0x4B	; 75
     786:	e4 de       	rcall	.-568    	; 0x550 <rfm22_read>
     788:	80 93 78 01 	sts	0x0178, r24

    if(pack_size<BUFFER_SIZE_MAX)   rfm22_read_burst(FIFO_ACCESS_P, pack_buffer, pack_size);    // защита от переполнения буфера
     78c:	80 91 78 01 	lds	r24, 0x0178
     790:	8a 31       	cpi	r24, 0x1A	; 26
     792:	40 f4       	brcc	.+16     	; 0x7a4 <rfm22_receive_complete+0x2e>
     794:	40 91 78 01 	lds	r20, 0x0178
     798:	6e e5       	ldi	r22, 0x5E	; 94
     79a:	71 e0       	ldi	r23, 0x01	; 1
     79c:	8f e7       	ldi	r24, 0x7F	; 127
     79e:	fa de       	rcall	.-524    	; 0x594 <rfm22_read_burst>



uint8_t rfm22_receive_complete(void)
{
    uint8_t i, error = 0;
     7a0:	10 e0       	ldi	r17, 0x00	; 0
     7a2:	01 c0       	rjmp	.+2      	; 0x7a6 <rfm22_receive_complete+0x30>
        return 1;                                                                               // возвращает 2 если не дождался пакета

    pack_size = rfm22_read(RX_PACK_LENGHT_P);

    if(pack_size<BUFFER_SIZE_MAX)   rfm22_read_burst(FIFO_ACCESS_P, pack_buffer, pack_size);    // защита от переполнения буфера
    else                            error = 2;
     7a4:	12 e0       	ldi	r17, 0x02	; 2

    pack_size -= 2;
     7a6:	80 91 78 01 	lds	r24, 0x0178
     7aa:	82 50       	subi	r24, 0x02	; 2
     7ac:	80 93 78 01 	sts	0x0178, r24
    for(i=0 ; ((i<pack_size) && (i<DATA_BYTES_MAX)) ; ++i)   crc = _crc16_update(crc, pack_buffer[i]);
     7b0:	c0 e0       	ldi	r28, 0x00	; 0
     7b2:	d0 e0       	ldi	r29, 0x00	; 0


uint8_t rfm22_receive_complete(void)
{
    uint8_t i, error = 0;
    uint16_t crc=0xffff;
     7b4:	8f ef       	ldi	r24, 0xFF	; 255
     7b6:	9f ef       	ldi	r25, 0xFF	; 255

    if(pack_size<BUFFER_SIZE_MAX)   rfm22_read_burst(FIFO_ACCESS_P, pack_buffer, pack_size);    // защита от переполнения буфера
    else                            error = 2;

    pack_size -= 2;
    for(i=0 ; ((i<pack_size) && (i<DATA_BYTES_MAX)) ; ++i)   crc = _crc16_update(crc, pack_buffer[i]);
     7b8:	20 91 78 01 	lds	r18, 0x0178
     7bc:	c2 17       	cp	r28, r18
     7be:	48 f0       	brcs	.+18     	; 0x7d2 <rfm22_receive_complete+0x5c>

    if( ( ((uint8_t)(crc>>8)) != pack_buffer[pack_size] )  ||  ( ((uint8_t)crc) != pack_buffer[pack_size+1] ) )
     7c0:	e0 91 78 01 	lds	r30, 0x0178
     7c4:	f0 e0       	ldi	r31, 0x00	; 0
     7c6:	e2 5a       	subi	r30, 0xA2	; 162
     7c8:	fe 4f       	sbci	r31, 0xFE	; 254
     7ca:	20 81       	ld	r18, Z
     7cc:	29 13       	cpse	r18, r25
     7ce:	12 c0       	rjmp	.+36     	; 0x7f4 <rfm22_receive_complete+0x7e>
     7d0:	0a c0       	rjmp	.+20     	; 0x7e6 <rfm22_receive_complete+0x70>

    if(pack_size<BUFFER_SIZE_MAX)   rfm22_read_burst(FIFO_ACCESS_P, pack_buffer, pack_size);    // защита от переполнения буфера
    else                            error = 2;

    pack_size -= 2;
    for(i=0 ; ((i<pack_size) && (i<DATA_BYTES_MAX)) ; ++i)   crc = _crc16_update(crc, pack_buffer[i]);
     7d2:	c8 31       	cpi	r28, 0x18	; 24
     7d4:	d1 05       	cpc	r29, r1
     7d6:	a1 f3       	breq	.-24     	; 0x7c0 <rfm22_receive_complete+0x4a>
     7d8:	fe 01       	movw	r30, r28
     7da:	e2 5a       	subi	r30, 0xA2	; 162
     7dc:	fe 4f       	sbci	r31, 0xFE	; 254
     7de:	60 81       	ld	r22, Z
     7e0:	93 de       	rcall	.-730    	; 0x508 <_crc16_update>
     7e2:	21 96       	adiw	r28, 0x01	; 1
     7e4:	e9 cf       	rjmp	.-46     	; 0x7b8 <rfm22_receive_complete+0x42>

    if( ( ((uint8_t)(crc>>8)) != pack_buffer[pack_size] )  ||  ( ((uint8_t)crc) != pack_buffer[pack_size+1] ) )
     7e6:	e0 91 78 01 	lds	r30, 0x0178
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	e1 5a       	subi	r30, 0xA1	; 161
     7ee:	fe 4f       	sbci	r31, 0xFE	; 254
     7f0:	90 81       	ld	r25, Z
     7f2:	98 13       	cpse	r25, r24
        error = 3;                                                                              // возвращает 1 если ошибка контрольной суммы
     7f4:	13 e0       	ldi	r17, 0x03	; 3

    rfm22_sleep();
     7f6:	a8 df       	rcall	.-176    	; 0x748 <rfm22_sleep>

    return error;
     7f8:	81 2f       	mov	r24, r17
     7fa:	01 c0       	rjmp	.+2      	; 0x7fe <rfm22_receive_complete+0x88>
{
    uint8_t i, error = 0;
    uint16_t crc=0xffff;

    if ( ((1<<PACKET_RECEIVED) & rfm22_wait_event(1<<PACKET_RECEIVED)) == 0 )
        return 1;                                                                               // возвращает 2 если не дождался пакета
     7fc:	81 e0       	ldi	r24, 0x01	; 1
        error = 3;                                                                              // возвращает 1 если ошибка контрольной суммы

    rfm22_sleep();

    return error;
}
     7fe:	df 91       	pop	r29
     800:	cf 91       	pop	r28
     802:	1f 91       	pop	r17
     804:	08 95       	ret

00000806 <light>:
}


uint8_t light(msg_par par)
{
    PORTC |= (1<<PC3);
     806:	ab 9a       	sbi	0x15, 3	; 21
    setTimer(MSG_LIGHT_OFF, 0, light_duration);
     808:	40 91 89 01 	lds	r20, 0x0189
     80c:	50 91 8a 01 	lds	r21, 0x018A
     810:	60 e0       	ldi	r22, 0x00	; 0
     812:	8a e0       	ldi	r24, 0x0A	; 10
     814:	da d6       	rcall	.+3508   	; 0x15ca <setTimer>
    return 0;
}
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	08 95       	ret

0000081a <light_timer>:

uint8_t light_timer(msg_par par)
{
    PORTC &= ~(1<<PC3);
     81a:	ab 98       	cbi	0x15, 3	; 21
    killTimer(MSG_LIGHT_OFF);
     81c:	8a e0       	ldi	r24, 0x0A	; 10
     81e:	12 d7       	rcall	.+3620   	; 0x1644 <killTimer>
    return 0;
}
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	08 95       	ret

00000824 <tx_to_rx>:
    return 0;
}


uint8_t tx_to_rx(msg_par par)
{
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
     828:	1f 92       	push	r1
     82a:	cd b7       	in	r28, 0x3d	; 61
     82c:	de b7       	in	r29, 0x3e	; 62
     82e:	68 2f       	mov	r22, r24
    killTimer(MSG_TXRX);
     830:	8b e0       	ldi	r24, 0x0B	; 11
     832:	69 83       	std	Y+1, r22	; 0x01
     834:	07 d7       	rcall	.+3598   	; 0x1644 <killTimer>
    setTimer(MSG_PACK_HANDLER, par, RX_WAIT_TIME);
     836:	40 e3       	ldi	r20, 0x30	; 48
     838:	50 e0       	ldi	r21, 0x00	; 0
     83a:	69 81       	ldd	r22, Y+1	; 0x01
     83c:	8c e0       	ldi	r24, 0x0C	; 12
     83e:	c5 d6       	rcall	.+3466   	; 0x15ca <setTimer>

    rfm22_transmit_complete();
     840:	87 df       	rcall	.-242    	; 0x750 <rfm22_transmit_complete>
    rfm22_receive_start();
     842:	7e df       	rcall	.-260    	; 0x740 <rfm22_receive_start>

    return 0;
}
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	0f 90       	pop	r0
     848:	df 91       	pop	r29
     84a:	cf 91       	pop	r28
     84c:	08 95       	ret

0000084e <packet_handler>:


uint8_t packet_handler(msg_par par)
{
     84e:	cf 93       	push	r28
    uint8_t i;

    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     850:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     852:	f8 94       	cli
    {
        killTimer(MSG_PACK_HANDLER);
     854:	8c e0       	ldi	r24, 0x0C	; 12
     856:	f6 d6       	rcall	.+3564   	; 0x1644 <killTimer>

        if( rfm22_receive_complete() ) {                                // если пакет не пакет
     858:	8e df       	rcall	.-228    	; 0x776 <rfm22_receive_complete>
     85a:	88 23       	and	r24, r24
     85c:	59 f0       	breq	.+22     	; 0x874 <packet_handler+0x26>
            if(req_rep_counter <= 30)   ++req_rep_counter;
     85e:	80 91 30 01 	lds	r24, 0x0130
     862:	8f 31       	cpi	r24, 0x1F	; 31
     864:	08 f0       	brcs	.+2      	; 0x868 <packet_handler+0x1a>
     866:	80 c0       	rjmp	.+256    	; 0x968 <packet_handler+0x11a>
     868:	80 91 30 01 	lds	r24, 0x0130
     86c:	8f 5f       	subi	r24, 0xFF	; 255
     86e:	80 93 30 01 	sts	0x0130, r24
     872:	7a c0       	rjmp	.+244    	; 0x968 <packet_handler+0x11a>
            return 1;                                                   // разворачиваемся и уходим
        }
        if(pack_buffer[0] != PAGER)     return 2;                       // если пакет не наш, опять уходим
     874:	80 91 5e 01 	lds	r24, 0x015E
     878:	83 37       	cpi	r24, 0x73	; 115
     87a:	09 f0       	breq	.+2      	; 0x87e <packet_handler+0x30>
     87c:	77 c0       	rjmp	.+238    	; 0x96c <packet_handler+0x11e>

        req_rep_counter = 0;
     87e:	10 92 30 01 	sts	0x0130, r1

/// Собственно, обработчик пакета
        switch(pack_buffer[1])
     882:	80 91 5f 01 	lds	r24, 0x015F
     886:	8d 34       	cpi	r24, 0x4D	; 77
     888:	31 f0       	breq	.+12     	; 0x896 <packet_handler+0x48>
     88a:	83 36       	cpi	r24, 0x63	; 99
     88c:	09 f0       	breq	.+2      	; 0x890 <packet_handler+0x42>
     88e:	69 c0       	rjmp	.+210    	; 0x962 <packet_handler+0x114>
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	03 c0       	rjmp	.+6      	; 0x89c <packet_handler+0x4e>
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	19 c0       	rjmp	.+50     	; 0x8ce <packet_handler+0x80>
        {
            case CLOCK :
            {
                for(i=0 ; i<7 ; ++i)   time[i] = pack_buffer[i+2];
     89c:	fc 01       	movw	r30, r24
     89e:	e0 5a       	subi	r30, 0xA0	; 160
     8a0:	fe 4f       	sbci	r31, 0xFE	; 254
     8a2:	20 81       	ld	r18, Z
     8a4:	fc 01       	movw	r30, r24
     8a6:	e9 5a       	subi	r30, 0xA9	; 169
     8a8:	fe 4f       	sbci	r31, 0xFE	; 254
     8aa:	20 83       	st	Z, r18
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	87 30       	cpi	r24, 0x07	; 7
     8b0:	91 05       	cpc	r25, r1
     8b2:	a1 f7       	brne	.-24     	; 0x89c <packet_handler+0x4e>
     8b4:	56 c0       	rjmp	.+172    	; 0x962 <packet_handler+0x114>
                break;
            }
            case EVENT :
            {
                for(i=0 ; ( (i<N_ACTIVE_CALL_MAX) && (i<(pack_size-2)) ) ; ++i)   active_call_id[i] = pack_buffer[i+2];    // копирует информацию об активных вызовах в буфер пейджера
     8b6:	fc 01       	movw	r30, r24
     8b8:	e0 5a       	subi	r30, 0xA0	; 160
     8ba:	fe 4f       	sbci	r31, 0xFE	; 254
     8bc:	20 81       	ld	r18, Z
     8be:	fc 01       	movw	r30, r24
     8c0:	ec 5c       	subi	r30, 0xCC	; 204
     8c2:	fe 4f       	sbci	r31, 0xFE	; 254
     8c4:	20 83       	st	Z, r18
     8c6:	01 96       	adiw	r24, 0x01	; 1
     8c8:	88 31       	cpi	r24, 0x18	; 24
     8ca:	91 05       	cpc	r25, r1
     8cc:	41 f0       	breq	.+16     	; 0x8de <packet_handler+0x90>
     8ce:	20 91 78 01 	lds	r18, 0x0178
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	22 50       	subi	r18, 0x02	; 2
     8d6:	31 09       	sbc	r19, r1
     8d8:	82 17       	cp	r24, r18
     8da:	93 07       	cpc	r25, r19
     8dc:	64 f3       	brlt	.-40     	; 0x8b6 <packet_handler+0x68>

                if(n_active_calls != (pack_size-2))                                         // если количество вызовов изменилось
     8de:	20 91 33 01 	lds	r18, 0x0133
     8e2:	80 91 78 01 	lds	r24, 0x0178
     8e6:	30 e0       	ldi	r19, 0x00	; 0
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	02 97       	sbiw	r24, 0x02	; 2
     8ec:	28 17       	cp	r18, r24
     8ee:	39 07       	cpc	r19, r25
     8f0:	89 f1       	breq	.+98     	; 0x954 <packet_handler+0x106>
                {
                    if(snd_on)                                                              // звуковая игнализация
     8f2:	80 91 79 01 	lds	r24, 0x0179
     8f6:	88 23       	and	r24, r24
     8f8:	99 f0       	breq	.+38     	; 0x920 <packet_handler+0xd2>
                    {
                        if(n_active_calls > (pack_size-2))
     8fa:	80 91 78 01 	lds	r24, 0x0178
     8fe:	20 91 33 01 	lds	r18, 0x0133
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	01 97       	sbiw	r24, 0x01	; 1
     906:	30 e0       	ldi	r19, 0x00	; 0
                            setTimer(MSG_BEEP, 2, snd_duration);
     908:	40 91 7a 01 	lds	r20, 0x017A
     90c:	50 91 7b 01 	lds	r21, 0x017B

                if(n_active_calls != (pack_size-2))                                         // если количество вызовов изменилось
                {
                    if(snd_on)                                                              // звуковая игнализация
                    {
                        if(n_active_calls > (pack_size-2))
     910:	28 17       	cp	r18, r24
     912:	39 07       	cpc	r19, r25
     914:	14 f0       	brlt	.+4      	; 0x91a <packet_handler+0xcc>
                            setTimer(MSG_BEEP, 2, snd_duration);
     916:	62 e0       	ldi	r22, 0x02	; 2
     918:	01 c0       	rjmp	.+2      	; 0x91c <packet_handler+0xce>
                        else
                            setTimer(MSG_BEEP, 6, snd_duration);
     91a:	66 e0       	ldi	r22, 0x06	; 6
     91c:	88 e0       	ldi	r24, 0x08	; 8
     91e:	55 d6       	rcall	.+3242   	; 0x15ca <setTimer>
                    }
                    if(light_on)   sendMessage(MSG_LIGHT, 0);                               // подсветка
     920:	80 91 7c 01 	lds	r24, 0x017C
     924:	88 23       	and	r24, r24
     926:	19 f0       	breq	.+6      	; 0x92e <packet_handler+0xe0>
     928:	60 e0       	ldi	r22, 0x00	; 0
     92a:	89 e0       	ldi	r24, 0x09	; 9
     92c:	c2 d5       	rcall	.+2948   	; 0x14b2 <sendMessage>

                    n_active_calls = pack_size - 2;
     92e:	80 91 78 01 	lds	r24, 0x0178
     932:	82 50       	subi	r24, 0x02	; 2
     934:	80 93 33 01 	sts	0x0133, r24
                    if(!active_on)
     938:	80 91 2f 01 	lds	r24, 0x012F
     93c:	81 11       	cpse	r24, r1
     93e:	0a c0       	rjmp	.+20     	; 0x954 <packet_handler+0x106>
                    {
                        if(n_active_calls)
     940:	80 91 33 01 	lds	r24, 0x0133
     944:	88 23       	and	r24, r24
     946:	19 f0       	breq	.+6      	; 0x94e <packet_handler+0x100>
                        {
                            stopMenu();
     948:	d6 d1       	rcall	.+940    	; 0xcf6 <stopMenu>
                            startMenuNull();
     94a:	32 d2       	rcall	.+1124   	; 0xdb0 <startMenuNull>
     94c:	02 c0       	rjmp	.+4      	; 0x952 <packet_handler+0x104>
                            display_call();
                        }
                        else if( checkMenu() )   display_call();
     94e:	3d d2       	rcall	.+1146   	; 0xdca <checkMenu>
     950:	81 11       	cpse	r24, r1
     952:	e6 db       	rcall	.-2100   	; 0x120 <display_call>
                    }
                }
                if(active_on)   sendMessage(MSG_KEY_PRESS, 0);
     954:	80 91 2f 01 	lds	r24, 0x012F
     958:	88 23       	and	r24, r24
     95a:	19 f0       	breq	.+6      	; 0x962 <packet_handler+0x114>
     95c:	60 e0       	ldi	r22, 0x00	; 0
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	a8 d5       	rcall	.+2896   	; 0x14b2 <sendMessage>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     962:	cf bf       	out	0x3f, r28	; 63
                break;
            }
        }
    }

    return 0;
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	04 c0       	rjmp	.+8      	; 0x970 <packet_handler+0x122>
    {
        killTimer(MSG_PACK_HANDLER);

        if( rfm22_receive_complete() ) {                                // если пакет не пакет
            if(req_rep_counter <= 30)   ++req_rep_counter;
            return 1;                                                   // разворачиваемся и уходим
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	01 c0       	rjmp	.+2      	; 0x96e <packet_handler+0x120>
        }
        if(pack_buffer[0] != PAGER)     return 2;                       // если пакет не наш, опять уходим
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	cf bf       	out	0x3f, r28	; 63
            }
        }
    }

    return 0;
}
     970:	cf 91       	pop	r28
     972:	08 95       	ret

00000974 <send_request>:
    }
}


uint8_t send_request(msg_par par)
{
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	c8 2f       	mov	r28, r24
    static uint8_t req_rep_counter_local;

    if(!rf_on) {
     97a:	80 91 60 00 	lds	r24, 0x0060
     97e:	81 11       	cpse	r24, r1
     980:	04 c0       	rjmp	.+8      	; 0x98a <send_request+0x16>
        status1 = '!';
     982:	81 e2       	ldi	r24, 0x21	; 33
     984:	80 93 88 01 	sts	0x0188, r24
        return 0;
     988:	50 c0       	rjmp	.+160    	; 0xa2a <send_request+0xb6>
    }

    if( (req_rep_counter > 0) && (status1 != 'x') ) {
     98a:	80 91 30 01 	lds	r24, 0x0130
     98e:	88 23       	and	r24, r24
     990:	61 f0       	breq	.+24     	; 0x9aa <send_request+0x36>
     992:	80 91 88 01 	lds	r24, 0x0188
     996:	88 37       	cpi	r24, 0x78	; 120
     998:	41 f0       	breq	.+16     	; 0x9aa <send_request+0x36>
        setTimer(MSG_SEND_REQ, par, REPEAT_TIME);
     99a:	40 ea       	ldi	r20, 0xA0	; 160
     99c:	50 e0       	ldi	r21, 0x00	; 0
     99e:	6c 2f       	mov	r22, r28
     9a0:	86 e0       	ldi	r24, 0x06	; 6
     9a2:	13 d6       	rcall	.+3110   	; 0x15ca <setTimer>
        status1 = 'x';
     9a4:	88 e7       	ldi	r24, 0x78	; 120
     9a6:	80 93 88 01 	sts	0x0188, r24
    }
    if( (req_rep_counter == 7) && (snd_on > 0) )    setTimer(MSG_BEEP, 2, snd_duration);
     9aa:	80 91 30 01 	lds	r24, 0x0130
     9ae:	87 30       	cpi	r24, 0x07	; 7
     9b0:	59 f4       	brne	.+22     	; 0x9c8 <send_request+0x54>
     9b2:	80 91 79 01 	lds	r24, 0x0179
     9b6:	88 23       	and	r24, r24
     9b8:	39 f0       	breq	.+14     	; 0x9c8 <send_request+0x54>
     9ba:	40 91 7a 01 	lds	r20, 0x017A
     9be:	50 91 7b 01 	lds	r21, 0x017B
     9c2:	62 e0       	ldi	r22, 0x02	; 2
     9c4:	88 e0       	ldi	r24, 0x08	; 8
     9c6:	01 d6       	rcall	.+3074   	; 0x15ca <setTimer>

    if( (req_rep_counter == 0) && (status1 != 0x00) ) {
     9c8:	80 91 30 01 	lds	r24, 0x0130
     9cc:	81 11       	cpse	r24, r1
     9ce:	1a c0       	rjmp	.+52     	; 0xa04 <send_request+0x90>
     9d0:	80 91 88 01 	lds	r24, 0x0188
     9d4:	88 23       	and	r24, r24
     9d6:	b1 f0       	breq	.+44     	; 0xa04 <send_request+0x90>
        setTimer(MSG_SEND_REQ, EVENT, EVENT_SYNCH_TIME);
     9d8:	40 e4       	ldi	r20, 0x40	; 64
     9da:	5f e1       	ldi	r21, 0x1F	; 31
     9dc:	6d e4       	ldi	r22, 0x4D	; 77
     9de:	86 e0       	ldi	r24, 0x06	; 6
     9e0:	f4 d5       	rcall	.+3048   	; 0x15ca <setTimer>
        status1 = 0x00;
     9e2:	10 92 88 01 	sts	0x0188, r1
        if( (snd_on>0) && (req_rep_counter_local >= 7) )  setTimer(MSG_BEEP, 2, snd_duration);
     9e6:	80 91 79 01 	lds	r24, 0x0179
     9ea:	88 23       	and	r24, r24
     9ec:	59 f0       	breq	.+22     	; 0xa04 <send_request+0x90>
     9ee:	80 91 32 01 	lds	r24, 0x0132
     9f2:	87 30       	cpi	r24, 0x07	; 7
     9f4:	38 f0       	brcs	.+14     	; 0xa04 <send_request+0x90>
     9f6:	40 91 7a 01 	lds	r20, 0x017A
     9fa:	50 91 7b 01 	lds	r21, 0x017B
     9fe:	62 e0       	ldi	r22, 0x02	; 2
     a00:	88 e0       	ldi	r24, 0x08	; 8
     a02:	e3 d5       	rcall	.+3014   	; 0x15ca <setTimer>
    }
    req_rep_counter_local = req_rep_counter;
     a04:	80 91 30 01 	lds	r24, 0x0130
     a08:	80 93 32 01 	sts	0x0132, r24

    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     a0c:	df b7       	in	r29, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a0e:	f8 94       	cli
    {
        pack_buffer[0] = PAGER;
     a10:	83 e7       	ldi	r24, 0x73	; 115
     a12:	80 93 5e 01 	sts	0x015E, r24
        pack_buffer[1] = par;
     a16:	c0 93 5f 01 	sts	0x015F, r28

        rfm22_transmit_start(2);
     a1a:	82 e0       	ldi	r24, 0x02	; 2
     a1c:	5e de       	rcall	.-836    	; 0x6da <rfm22_transmit_start>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a1e:	df bf       	out	0x3f, r29	; 63
    }
    setTimer(MSG_TXRX, par, COMMAND_TX_TIME);
     a20:	4e e0       	ldi	r20, 0x0E	; 14
     a22:	50 e0       	ldi	r21, 0x00	; 0
     a24:	6c 2f       	mov	r22, r28
     a26:	8b e0       	ldi	r24, 0x0B	; 11
     a28:	d0 d5       	rcall	.+2976   	; 0x15ca <setTimer>

    return 0;
}
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	df 91       	pop	r29
     a2e:	cf 91       	pop	r28
     a30:	08 95       	ret

00000a32 <beep>:

uint8_t beep(msg_par par)
{
	static uint8_t i;

	PORTC ^= (1<<PC4);
     a32:	95 b3       	in	r25, 0x15	; 21
     a34:	20 e1       	ldi	r18, 0x10	; 16
     a36:	92 27       	eor	r25, r18
     a38:	95 bb       	out	0x15, r25	; 21
	i++;
     a3a:	90 91 31 01 	lds	r25, 0x0131
     a3e:	9f 5f       	subi	r25, 0xFF	; 255
	if(i>=par)
     a40:	98 17       	cp	r25, r24
     a42:	18 f4       	brcc	.+6      	; 0xa4a <beep+0x18>
uint8_t beep(msg_par par)
{
	static uint8_t i;

	PORTC ^= (1<<PC4);
	i++;
     a44:	90 93 31 01 	sts	0x0131, r25
     a48:	05 c0       	rjmp	.+10     	; 0xa54 <beep+0x22>
	if(i>=par)
	{
		i=0;
     a4a:	10 92 31 01 	sts	0x0131, r1
        PORTC &= ~(1<<PC4);
     a4e:	ac 98       	cbi	0x15, 4	; 21
        killTimer(MSG_BEEP);
     a50:	88 e0       	ldi	r24, 0x08	; 8
     a52:	f8 d5       	rcall	.+3056   	; 0x1644 <killTimer>
	}
	return 1;
}
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	08 95       	ret

00000a58 <voltage_measure>:
    return 1;
}


void voltage_measure(void)
{
     a58:	cf 92       	push	r12
     a5a:	df 92       	push	r13
     a5c:	ef 92       	push	r14
     a5e:	ff 92       	push	r15
    uint8_t voltage = 0x1f & rfm22_read(BATTERY_VOLTAGE_P);
     a60:	8b e1       	ldi	r24, 0x1B	; 27
     a62:	76 dd       	rcall	.-1300   	; 0x550 <rfm22_read>
     a64:	8f 71       	andi	r24, 0x1F	; 31

    if(voltage>3)
     a66:	84 30       	cpi	r24, 0x04	; 4
     a68:	a0 f1       	brcs	.+104    	; 0xad2 <voltage_measure+0x7a>
    {
        if(voltage > BAT_THRES_45)
     a6a:	68 2f       	mov	r22, r24
     a6c:	70 e0       	ldi	r23, 0x00	; 0
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	f8 d6       	rcall	.+3568   	; 0x1864 <__floatsisf>
     a74:	6b 01       	movw	r12, r22
     a76:	7c 01       	movw	r14, r24
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	40 ec       	ldi	r20, 0xC0	; 192
     a7e:	51 e4       	ldi	r21, 0x41	; 65
     a80:	2c d7       	rcall	.+3672   	; 0x18da <__gesf2>
     a82:	18 16       	cp	r1, r24
     a84:	14 f4       	brge	.+4      	; 0xa8a <voltage_measure+0x32>
            status2 = 0x9b;
     a86:	8b e9       	ldi	r24, 0x9B	; 155
     a88:	22 c0       	rjmp	.+68     	; 0xace <voltage_measure+0x76>
        else if(voltage > BAT_THRES_35)
     a8a:	20 e0       	ldi	r18, 0x00	; 0
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	40 ea       	ldi	r20, 0xA0	; 160
     a90:	51 e4       	ldi	r21, 0x41	; 65
     a92:	c7 01       	movw	r24, r14
     a94:	b6 01       	movw	r22, r12
     a96:	21 d7       	rcall	.+3650   	; 0x18da <__gesf2>
     a98:	18 16       	cp	r1, r24
     a9a:	14 f4       	brge	.+4      	; 0xaa0 <voltage_measure+0x48>
            status2 = 0x9c;
     a9c:	8c e9       	ldi	r24, 0x9C	; 156
     a9e:	17 c0       	rjmp	.+46     	; 0xace <voltage_measure+0x76>
        else if(voltage > BAT_THRES_25)
     aa0:	2f ef       	ldi	r18, 0xFF	; 255
     aa2:	3f ef       	ldi	r19, 0xFF	; 255
     aa4:	4f e7       	ldi	r20, 0x7F	; 127
     aa6:	51 e4       	ldi	r21, 0x41	; 65
     aa8:	c7 01       	movw	r24, r14
     aaa:	b6 01       	movw	r22, r12
     aac:	16 d7       	rcall	.+3628   	; 0x18da <__gesf2>
     aae:	18 16       	cp	r1, r24
     ab0:	14 f4       	brge	.+4      	; 0xab6 <voltage_measure+0x5e>
            status2 = 0x9d;
     ab2:	8d e9       	ldi	r24, 0x9D	; 157
     ab4:	0c c0       	rjmp	.+24     	; 0xace <voltage_measure+0x76>
        else if(voltage > BAT_THRES_15)
     ab6:	2e ef       	ldi	r18, 0xFE	; 254
     ab8:	3f ef       	ldi	r19, 0xFF	; 255
     aba:	4f e3       	ldi	r20, 0x3F	; 63
     abc:	51 e4       	ldi	r21, 0x41	; 65
     abe:	c7 01       	movw	r24, r14
     ac0:	b6 01       	movw	r22, r12
     ac2:	0b d7       	rcall	.+3606   	; 0x18da <__gesf2>
     ac4:	18 16       	cp	r1, r24
     ac6:	14 f4       	brge	.+4      	; 0xacc <voltage_measure+0x74>
            status2 = 0x9e;
     ac8:	8e e9       	ldi	r24, 0x9E	; 158
     aca:	01 c0       	rjmp	.+2      	; 0xace <voltage_measure+0x76>
        else
            status2 = 0x9f;
     acc:	8f e9       	ldi	r24, 0x9F	; 159
     ace:	80 93 7d 01 	sts	0x017D, r24
    }
}
     ad2:	ff 90       	pop	r15
     ad4:	ef 90       	pop	r14
     ad6:	df 90       	pop	r13
     ad8:	cf 90       	pop	r12
     ada:	08 95       	ret

00000adc <clock>:
}



uint8_t clock(msg_par par)
{
     adc:	cf 93       	push	r28
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     ade:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ae0:	f8 94       	cli
	{
        if(time[1] == 0)    sendMessage(MSG_SEND_REQ, CLOCK);       // синхронизация времени раз в час
     ae2:	80 91 58 01 	lds	r24, 0x0158
     ae6:	81 11       	cpse	r24, r1
     ae8:	03 c0       	rjmp	.+6      	; 0xaf0 <clock+0x14>
     aea:	63 e6       	ldi	r22, 0x63	; 99
     aec:	86 e0       	ldi	r24, 0x06	; 6
     aee:	e1 d4       	rcall	.+2498   	; 0x14b2 <sendMessage>
        voltage_measure();
     af0:	b3 df       	rcall	.-154    	; 0xa58 <voltage_measure>

        sprintf(lcd_buffer, "%02d %02d ", time[2], time[1]);
     af2:	90 91 58 01 	lds	r25, 0x0158
     af6:	80 91 59 01 	lds	r24, 0x0159
     afa:	1f 92       	push	r1
     afc:	9f 93       	push	r25
     afe:	1f 92       	push	r1
     b00:	8f 93       	push	r24
     b02:	82 e7       	ldi	r24, 0x72	; 114
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	9f 93       	push	r25
     b08:	8f 93       	push	r24
     b0a:	8e e7       	ldi	r24, 0x7E	; 126
     b0c:	91 e0       	ldi	r25, 0x01	; 1
     b0e:	9f 93       	push	r25
     b10:	8f 93       	push	r24
     b12:	12 d7       	rcall	.+3620   	; 0x1938 <sprintf>
        lcd_gotoxy(0,0);
     b14:	60 e0       	ldi	r22, 0x00	; 0
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	13 dc       	rcall	.-2010   	; 0x340 <lcd_gotoxy>
        lcd_puts(lcd_buffer);
     b1a:	8e e7       	ldi	r24, 0x7E	; 126
     b1c:	91 e0       	ldi	r25, 0x01	; 1
     b1e:	39 dc       	rcall	.-1934   	; 0x392 <lcd_puts>
        lcd_putc(status1);
     b20:	80 91 88 01 	lds	r24, 0x0188
     b24:	1a dc       	rcall	.-1996   	; 0x35a <lcd_putc>
        lcd_putc(status2);
     b26:	80 91 7d 01 	lds	r24, 0x017D
     b2a:	17 dc       	rcall	.-2002   	; 0x35a <lcd_putc>

        lcd_gotoxy(2,0);
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	82 e0       	ldi	r24, 0x02	; 2
     b30:	07 dc       	rcall	.-2034   	; 0x340 <lcd_gotoxy>
        if(time[0]&0x01)    lcd_putc(' ');
     b32:	80 91 57 01 	lds	r24, 0x0157
     b36:	2d b7       	in	r18, 0x3d	; 61
     b38:	3e b7       	in	r19, 0x3e	; 62
     b3a:	28 5f       	subi	r18, 0xF8	; 248
     b3c:	3f 4f       	sbci	r19, 0xFF	; 255
     b3e:	0f b6       	in	r0, 0x3f	; 63
     b40:	f8 94       	cli
     b42:	3e bf       	out	0x3e, r19	; 62
     b44:	0f be       	out	0x3f, r0	; 63
     b46:	2d bf       	out	0x3d, r18	; 61
     b48:	80 ff       	sbrs	r24, 0
     b4a:	02 c0       	rjmp	.+4      	; 0xb50 <clock+0x74>
     b4c:	80 e2       	ldi	r24, 0x20	; 32
     b4e:	01 c0       	rjmp	.+2      	; 0xb52 <clock+0x76>
        else                lcd_putc(':');
     b50:	8a e3       	ldi	r24, 0x3A	; 58
     b52:	03 dc       	rcall	.-2042   	; 0x35a <lcd_putc>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b54:	cf bf       	out	0x3f, r28	; 63
    }
    return 1;
}
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	cf 91       	pop	r28
     b5a:	08 95       	ret

00000b5c <dispMenu>:


/* Вывод пункта меню на экран */
unsigned char dispMenu(msg_par par) {

    if(selectedMenuItem == (menuItem*)&m_s1i1)
     b5c:	80 91 a2 01 	lds	r24, 0x01A2
     b60:	90 91 a3 01 	lds	r25, 0x01A3
     b64:	83 5d       	subi	r24, 0xD3	; 211
     b66:	90 40       	sbci	r25, 0x00	; 0
     b68:	11 f4       	brne	.+4      	; 0xb6e <dispMenu+0x12>
        display_call();
     b6a:	da da       	rcall	.-2636   	; 0x120 <display_call>
     b6c:	08 c0       	rjmp	.+16     	; 0xb7e <dispMenu+0x22>
    else {
        lcd_cleanstr(1);
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	29 dc       	rcall	.-1966   	; 0x3c4 <lcd_cleanstr>
        lcd_puts_p((char *)&selectedMenuItem->Text);
     b72:	80 91 a2 01 	lds	r24, 0x01A2
     b76:	90 91 a3 01 	lds	r25, 0x01A3
     b7a:	09 96       	adiw	r24, 0x09	; 9
     b7c:	15 dc       	rcall	.-2006   	; 0x3a8 <lcd_puts_p>
    }

	return (1);
}
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	08 95       	ret

00000b82 <selectMenu>:
MAKE_MENU(m_s2i4,  m_s2i1,    m_s2i3,      m_s1i2,     m_s1i2,       0, " Ha\267a\343");                            // Назад


/* В этой функции описывается алгоритм выбора пунктов меню */
uint8_t selectMenu(msg_par par)
{
     b82:	cf 93       	push	r28
     b84:	df 93       	push	r29
     b86:	1f 92       	push	r1
     b88:	cd b7       	in	r28, 0x3d	; 61
     b8a:	de b7       	in	r29, 0x3e	; 62
    lcd_clrscr();
     b8c:	89 83       	std	Y+1, r24	; 0x01
     b8e:	e1 db       	rcall	.-2110   	; 0x352 <lcd_clrscr>

	switch (par)
     b90:	89 81       	ldd	r24, Y+1	; 0x01
     b92:	84 30       	cpi	r24, 0x04	; 4
     b94:	09 f1       	breq	.+66     	; 0xbd8 <selectMenu+0x56>
     b96:	90 f4       	brcc	.+36     	; 0xbbc <selectMenu+0x3a>
     b98:	82 30       	cpi	r24, 0x02	; 2
     b9a:	99 f1       	breq	.+102    	; 0xc02 <selectMenu+0x80>
     b9c:	83 30       	cpi	r24, 0x03	; 3
     b9e:	09 f0       	breq	.+2      	; 0xba2 <selectMenu+0x20>
     ba0:	9c c0       	rjmp	.+312    	; 0xcda <selectMenu+0x158>
	{
    case MENU_SND :
	{
		lcd_init(LCD_DISP_ON_CURSOR_BLINK);
     ba2:	8f e0       	ldi	r24, 0x0F	; 15
     ba4:	1f dc       	rcall	.-1986   	; 0x3e4 <lcd_init>
		lcd_gotoxy(0,1);
     ba6:	61 e0       	ldi	r22, 0x01	; 1
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	ca db       	rcall	.-2156   	; 0x340 <lcd_gotoxy>
		lcd_puts("\343\273\270\277   c");
     bac:	8d e7       	ldi	r24, 0x7D	; 125
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	f0 db       	rcall	.-2080   	; 0x392 <lcd_puts>
        menu_x = 0;
     bb2:	10 92 87 01 	sts	0x0187, r1
		setHandler(MSG_KEY_PRESS, &Key_snd);
     bb6:	67 e2       	ldi	r22, 0x27	; 39
     bb8:	77 e0       	ldi	r23, 0x07	; 7
     bba:	8a c0       	rjmp	.+276    	; 0xcd0 <selectMenu+0x14e>
/* В этой функции описывается алгоритм выбора пунктов меню */
uint8_t selectMenu(msg_par par)
{
    lcd_clrscr();

	switch (par)
     bbc:	86 30       	cpi	r24, 0x06	; 6
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <selectMenu+0x40>
     bc0:	83 c0       	rjmp	.+262    	; 0xcc8 <selectMenu+0x146>
     bc2:	b8 f0       	brcs	.+46     	; 0xbf2 <selectMenu+0x70>
     bc4:	87 30       	cpi	r24, 0x07	; 7
     bc6:	09 f0       	breq	.+2      	; 0xbca <selectMenu+0x48>
     bc8:	88 c0       	rjmp	.+272    	; 0xcda <selectMenu+0x158>
        sendMessage(MSG_KEY_PRESS, 0);
        break;
	}
	case MENU_ACT :
	{
        setHandler(MSG_KEY_PRESS, &Key_active);
     bca:	6b ed       	ldi	r22, 0xDB	; 219
     bcc:	78 e0       	ldi	r23, 0x08	; 8
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	b5 d3       	rcall	.+1898   	; 0x133c <setHandler>
        nevent = 0;
     bd2:	10 92 8c 01 	sts	0x018C, r1
     bd6:	7e c0       	rjmp	.+252    	; 0xcd4 <selectMenu+0x152>
        sendMessage(MSG_KEY_PRESS, 0);
		break;
	}
    case MENU_LIGHT :
	{
		lcd_init(LCD_DISP_ON_CURSOR_BLINK);
     bd8:	8f e0       	ldi	r24, 0x0F	; 15
     bda:	04 dc       	rcall	.-2040   	; 0x3e4 <lcd_init>
		lcd_gotoxy(0,1);
     bdc:	61 e0       	ldi	r22, 0x01	; 1
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	af db       	rcall	.-2210   	; 0x340 <lcd_gotoxy>
		lcd_puts("\343\273\270\277   c");
     be2:	8d e7       	ldi	r24, 0x7D	; 125
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	d5 db       	rcall	.-2134   	; 0x392 <lcd_puts>
        menu_x = 0;
     be8:	10 92 87 01 	sts	0x0187, r1
		setHandler(MSG_KEY_PRESS, &Key_light);
     bec:	65 ed       	ldi	r22, 0xD5	; 213
     bee:	77 e0       	ldi	r23, 0x07	; 7
     bf0:	6f c0       	rjmp	.+222    	; 0xcd0 <selectMenu+0x14e>
        sendMessage(MSG_KEY_PRESS, 0);
		break;
	}
	case MENU_CH :
	{
 		lcd_init(LCD_DISP_ON_CURSOR_BLINK);
     bf2:	8f e0       	ldi	r24, 0x0F	; 15
     bf4:	f7 db       	rcall	.-2066   	; 0x3e4 <lcd_init>
        lcd_puts("B\263e\343\270\277e");
     bf6:	86 e8       	ldi	r24, 0x86	; 134
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	cb db       	rcall	.-2154   	; 0x392 <lcd_puts>

        setHandler(MSG_KEY_PRESS, &Key_channel);
     bfc:	6b e8       	ldi	r22, 0x8B	; 139
     bfe:	78 e0       	ldi	r23, 0x08	; 8
     c00:	67 c0       	rjmp	.+206    	; 0xcd0 <selectMenu+0x14e>
        sendMessage(MSG_KEY_PRESS, 0);
        break;
	}
	case MENU_DATE :
	{
        sprintf(lcd_buffer,"%02d ", time[4]);
     c02:	80 91 5b 01 	lds	r24, 0x015B
     c06:	1f 92       	push	r1
     c08:	8f 93       	push	r24
     c0a:	87 e7       	ldi	r24, 0x77	; 119
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	9f 93       	push	r25
     c10:	8f 93       	push	r24
     c12:	8e e7       	ldi	r24, 0x7E	; 126
     c14:	91 e0       	ldi	r25, 0x01	; 1
     c16:	9f 93       	push	r25
     c18:	8f 93       	push	r24
     c1a:	8e d6       	rcall	.+3356   	; 0x1938 <sprintf>
        lcd_puts(lcd_buffer);
     c1c:	8e e7       	ldi	r24, 0x7E	; 126
     c1e:	91 e0       	ldi	r25, 0x01	; 1
     c20:	b8 db       	rcall	.-2192   	; 0x392 <lcd_puts>
        switch(time[5])
     c22:	80 91 5c 01 	lds	r24, 0x015C
     c26:	0f 90       	pop	r0
     c28:	0f 90       	pop	r0
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	0f 90       	pop	r0
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	fc 01       	movw	r30, r24
     c36:	31 97       	sbiw	r30, 0x01	; 1
     c38:	ec 30       	cpi	r30, 0x0C	; 12
     c3a:	f1 05       	cpc	r31, r1
     c3c:	38 f5       	brcc	.+78     	; 0xc8c <selectMenu+0x10a>
     c3e:	ed 5e       	subi	r30, 0xED	; 237
     c40:	ff 4f       	sbci	r31, 0xFF	; 255
     c42:	09 94       	ijmp
        {
            case 1 :
                lcd_puts("\307\275\263.");
     c44:	8e e8       	ldi	r24, 0x8E	; 142
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	20 c0       	rjmp	.+64     	; 0xc8a <selectMenu+0x108>
                break;
            case 2 :
                lcd_puts("\344e\263p.");
     c4a:	83 e9       	ldi	r24, 0x93	; 147
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	1d c0       	rjmp	.+58     	; 0xc8a <selectMenu+0x108>
                break;
            case 3 :
                lcd_puts("\274ap\277");
     c50:	89 e9       	ldi	r24, 0x99	; 153
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	1a c0       	rjmp	.+52     	; 0xc8a <selectMenu+0x108>
                break;
            case 4 :
                lcd_puts("a\276p.");
     c56:	8e e9       	ldi	r24, 0x9E	; 158
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	17 c0       	rjmp	.+46     	; 0xc8a <selectMenu+0x108>
                break;
            case 5 :
                lcd_puts("\274a\307");
     c5c:	83 ea       	ldi	r24, 0xA3	; 163
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	14 c0       	rjmp	.+40     	; 0xc8a <selectMenu+0x108>
                break;
            case 6 :
                lcd_puts("\270\306\275\307");
     c62:	87 ea       	ldi	r24, 0xA7	; 167
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	11 c0       	rjmp	.+34     	; 0xc8a <selectMenu+0x108>
                break;
            case 7 :
                lcd_puts("\270\306\273\307");
     c68:	8c ea       	ldi	r24, 0xAC	; 172
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	0e c0       	rjmp	.+28     	; 0xc8a <selectMenu+0x108>
                break;
            case 8 :
                lcd_puts("a\263\264.");
     c6e:	81 eb       	ldi	r24, 0xB1	; 177
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	0b c0       	rjmp	.+22     	; 0xc8a <selectMenu+0x108>
                break;
            case 9 :
                lcd_puts("ce\275\277.");
     c74:	86 eb       	ldi	r24, 0xB6	; 182
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	08 c0       	rjmp	.+16     	; 0xc8a <selectMenu+0x108>
                break;
            case 10 :
                lcd_puts("o\272\277.");
     c7a:	8c eb       	ldi	r24, 0xBC	; 188
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	05 c0       	rjmp	.+10     	; 0xc8a <selectMenu+0x108>
                break;
            case 11 :
                lcd_puts("\275o\307\262p.");
     c80:	81 ec       	ldi	r24, 0xC1	; 193
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <selectMenu+0x108>
                break;
            case 12 :
                lcd_puts("\343e\272.");
     c86:	88 ec       	ldi	r24, 0xC8	; 200
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	83 db       	rcall	.-2298   	; 0x392 <lcd_puts>
                break;
        }

        lcd_gotoxy(0,1);
     c8c:	61 e0       	ldi	r22, 0x01	; 1
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	57 db       	rcall	.-2386   	; 0x340 <lcd_gotoxy>
        sprintf(lcd_buffer, "  20%02d", time[6]);
     c92:	80 91 5d 01 	lds	r24, 0x015D
     c96:	1f 92       	push	r1
     c98:	8f 93       	push	r24
     c9a:	8d ec       	ldi	r24, 0xCD	; 205
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	9f 93       	push	r25
     ca0:	8f 93       	push	r24
     ca2:	8e e7       	ldi	r24, 0x7E	; 126
     ca4:	91 e0       	ldi	r25, 0x01	; 1
     ca6:	9f 93       	push	r25
     ca8:	8f 93       	push	r24
     caa:	46 d6       	rcall	.+3212   	; 0x1938 <sprintf>
        lcd_puts(lcd_buffer);
     cac:	8e e7       	ldi	r24, 0x7E	; 126
     cae:	91 e0       	ldi	r25, 0x01	; 1
     cb0:	70 db       	rcall	.-2336   	; 0x392 <lcd_puts>
                break;
            case 7 :
                lcd_puts("\263c");
                break;
        } */
        setHandler(MSG_KEY_PRESS, &Key_ok);
     cb2:	65 e9       	ldi	r22, 0x95	; 149
     cb4:	79 e0       	ldi	r23, 0x09	; 9
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	41 d3       	rcall	.+1666   	; 0x133c <setHandler>
        break;
     cba:	0f 90       	pop	r0
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	09 c0       	rjmp	.+18     	; 0xcda <selectMenu+0x158>
	}
    case MENU_RF :
	{
        lcd_init(LCD_DISP_ON_CURSOR_BLINK);
     cc8:	8f e0       	ldi	r24, 0x0F	; 15
     cca:	8c db       	rcall	.-2280   	; 0x3e4 <lcd_init>
        setHandler(MSG_KEY_PRESS, &Key_rf);
     ccc:	6f ee       	ldi	r22, 0xEF	; 239
     cce:	76 e0       	ldi	r23, 0x06	; 6
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	34 d3       	rcall	.+1640   	; 0x133c <setHandler>
	}
	case MENU_ACT :
	{
        setHandler(MSG_KEY_PRESS, &Key_active);
        nevent = 0;
        sendMessage(MSG_KEY_PRESS, 0);
     cd4:	60 e0       	ldi	r22, 0x00	; 0
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	ec d3       	rcall	.+2008   	; 0x14b2 <sendMessage>
        break;
	}
	}
	return 1;
}
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	0f 90       	pop	r0
     cde:	df 91       	pop	r29
     ce0:	cf 91       	pop	r28
     ce2:	08 95       	ret

00000ce4 <menuChange>:


/* Функция перехода к другому пункту меню, если пункт есть - то переходит, иначе - остается */
void menuChange(menuItem* NewMenu)
{
	if ((menuItem*)NewMenu == (menuItem*)&NULL_ENTRY)
     ce4:	20 e0       	ldi	r18, 0x00	; 0
     ce6:	8d 3d       	cpi	r24, 0xDD	; 221
     ce8:	92 07       	cpc	r25, r18
     cea:	21 f0       	breq	.+8      	; 0xcf4 <menuChange+0x10>
	  return;

	selectedMenuItem = NewMenu;
     cec:	90 93 a3 01 	sts	0x01A3, r25
     cf0:	80 93 a2 01 	sts	0x01A2, r24
     cf4:	08 95       	ret

00000cf6 <stopMenu>:
}


/* выход из меню */
uint8_t stopMenu(void) {
	killHandlersNum(MSG_KEY_PRESS);
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	92 d3       	rcall	.+1828   	; 0x141e <killHandlersNum>
	killTimer(MSG_CLOCK_DISP_REF);
     cfa:	87 e0       	ldi	r24, 0x07	; 7
     cfc:	a3 d4       	rcall	.+2374   	; 0x1644 <killTimer>
	killHandler(MSG_DISP_REFRESH, &dispMenu);
     cfe:	6e ea       	ldi	r22, 0xAE	; 174
     d00:	75 e0       	ldi	r23, 0x05	; 5
     d02:	84 e0       	ldi	r24, 0x04	; 4
     d04:	3f d3       	rcall	.+1662   	; 0x1384 <killHandler>
	return (0);
}
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	08 95       	ret

00000d0a <menuKey>:
	return (1);
}


/* Переход к другому пункту меню по нажатой кнопке */
uint8_t menuKey(msg_par par) {
     d0a:	1f 93       	push	r17
     d0c:	cf 93       	push	r28
     d0e:	df 93       	push	r29
     d10:	1f 92       	push	r1
     d12:	cd b7       	in	r28, 0x3d	; 61
     d14:	de b7       	in	r29, 0x3e	; 62
     d16:	18 2f       	mov	r17, r24
	if(light_on)    sendMessage(MSG_LIGHT, 0);
     d18:	80 91 7c 01 	lds	r24, 0x017C
     d1c:	88 23       	and	r24, r24
     d1e:	19 f0       	breq	.+6      	; 0xd26 <menuKey+0x1c>
     d20:	60 e0       	ldi	r22, 0x00	; 0
     d22:	89 e0       	ldi	r24, 0x09	; 9
     d24:	c6 d3       	rcall	.+1932   	; 0x14b2 <sendMessage>

	switch (par) {
     d26:	11 30       	cpi	r17, 0x01	; 1
     d28:	61 f0       	breq	.+24     	; 0xd42 <menuKey+0x38>
     d2a:	30 f1       	brcs	.+76     	; 0xd78 <menuKey+0x6e>
     d2c:	12 30       	cpi	r17, 0x02	; 2
     d2e:	19 f0       	breq	.+6      	; 0xd36 <menuKey+0x2c>
     d30:	13 30       	cpi	r17, 0x03	; 3
     d32:	61 f0       	breq	.+24     	; 0xd4c <menuKey+0x42>
     d34:	1f c0       	rjmp	.+62     	; 0xd74 <menuKey+0x6a>
	case 0: {
		return 1;
        }
	case KEY_LEFT: {
		menuChange(PREVIOUS);
     d36:	e0 91 a2 01 	lds	r30, 0x01A2
     d3a:	f0 91 a3 01 	lds	r31, 0x01A3
     d3e:	32 96       	adiw	r30, 0x02	; 2
     d40:	16 c0       	rjmp	.+44     	; 0xd6e <menuKey+0x64>
		break;
        }
	case KEY_RIGHT: {
		menuChange(NEXT);
     d42:	e0 91 a2 01 	lds	r30, 0x01A2
     d46:	f0 91 a3 01 	lds	r31, 0x01A3
     d4a:	11 c0       	rjmp	.+34     	; 0xd6e <menuKey+0x64>
		break;
        }
	case KEY_OK:
		{ // выбор пункта
			uint8_t sel;
			sel = SELECT;
     d4c:	80 91 a2 01 	lds	r24, 0x01A2
     d50:	90 91 a3 01 	lds	r25, 0x01A3
     d54:	fc 01       	movw	r30, r24
     d56:	38 96       	adiw	r30, 0x08	; 8
     d58:	64 91       	lpm	r22, Z
			if (sel != 0) {
     d5a:	66 23       	and	r22, r22
     d5c:	31 f0       	breq	.+12     	; 0xd6a <menuKey+0x60>

                stopMenu();
     d5e:	69 83       	std	Y+1, r22	; 0x01
     d60:	ca df       	rcall	.-108    	; 0xcf6 <stopMenu>
				sendMessage(MSG_MENU_SELECT, sel);
     d62:	69 81       	ldd	r22, Y+1	; 0x01
     d64:	85 e0       	ldi	r24, 0x05	; 5
     d66:	a5 d3       	rcall	.+1866   	; 0x14b2 <sendMessage>

				return (1);
     d68:	07 c0       	rjmp	.+14     	; 0xd78 <menuKey+0x6e>
			} else {
				menuChange(CHILD);
     d6a:	fc 01       	movw	r30, r24
     d6c:	36 96       	adiw	r30, 0x06	; 6
     d6e:	85 91       	lpm	r24, Z+
     d70:	94 91       	lpm	r25, Z
     d72:	b8 df       	rcall	.-144    	; 0xce4 <menuChange>
			}
			break;
		}
	}
    dispMenu(0);
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	f2 de       	rcall	.-540    	; 0xb5c <dispMenu>

	return (1);
}
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	0f 90       	pop	r0
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	1f 91       	pop	r17
     d82:	08 95       	ret

00000d84 <startMenu>:
}


/* вход в меню */
uint8_t startMenu(void) {
	lcd_init(LCD_DISP_ON);
     d84:	8c e0       	ldi	r24, 0x0C	; 12
     d86:	2e db       	rcall	.-2468   	; 0x3e4 <lcd_init>
	dispMenu(0);
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	e8 de       	rcall	.-560    	; 0xb5c <dispMenu>

	setHandler(MSG_KEY_PRESS, &menuKey);
     d8c:	65 e8       	ldi	r22, 0x85	; 133
     d8e:	76 e0       	ldi	r23, 0x06	; 6
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	d4 d2       	rcall	.+1448   	; 0x133c <setHandler>
	setHandler(MSG_DISP_REFRESH, &dispMenu);
     d94:	6e ea       	ldi	r22, 0xAE	; 174
     d96:	75 e0       	ldi	r23, 0x05	; 5
     d98:	84 e0       	ldi	r24, 0x04	; 4
     d9a:	d0 d2       	rcall	.+1440   	; 0x133c <setHandler>
    setTimer(MSG_CLOCK_DISP_REF, 0, 800);
     d9c:	40 e2       	ldi	r20, 0x20	; 32
     d9e:	53 e0       	ldi	r21, 0x03	; 3
     da0:	60 e0       	ldi	r22, 0x00	; 0
     da2:	87 e0       	ldi	r24, 0x07	; 7
     da4:	12 d4       	rcall	.+2084   	; 0x15ca <setTimer>
    sendMessage(MSG_CLOCK_DISP_REF, 0);
     da6:	60 e0       	ldi	r22, 0x00	; 0
     da8:	87 e0       	ldi	r24, 0x07	; 7
     daa:	83 d3       	rcall	.+1798   	; 0x14b2 <sendMessage>
    return (0);
}
     dac:	80 e0       	ldi	r24, 0x00	; 0
     dae:	08 95       	ret

00000db0 <startMenuNull>:


/* вход в меню */
uint8_t startMenuNull(void) {
	selectedMenuItem = (menuItem*)&m_s1i1;
     db0:	83 ed       	ldi	r24, 0xD3	; 211
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	90 93 a3 01 	sts	0x01A3, r25
     db8:	80 93 a2 01 	sts	0x01A2, r24
    startMenu();
     dbc:	e3 df       	rcall	.-58     	; 0xd84 <startMenu>
    if(n_active_calls) display_call();
     dbe:	80 91 33 01 	lds	r24, 0x0133
     dc2:	81 11       	cpse	r24, r1
     dc4:	ad d9       	rcall	.-3238   	; 0x120 <display_call>
    return (0);
}
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	08 95       	ret

00000dca <checkMenu>:


uint8_t checkMenu(void)
{
    if(	selectedMenuItem == (menuItem*)&m_s1i1 ) return 1;
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	20 91 a2 01 	lds	r18, 0x01A2
     dd0:	30 91 a3 01 	lds	r19, 0x01A3
     dd4:	23 5d       	subi	r18, 0xD3	; 211
     dd6:	30 40       	sbci	r19, 0x00	; 0
     dd8:	09 f0       	breq	.+2      	; 0xddc <checkMenu+0x12>
     dda:	80 e0       	ldi	r24, 0x00	; 0
    else                                         return 0;
}
     ddc:	08 95       	ret

00000dde <Key_rf>:
	return 1;
}


uint8_t Key_rf(msg_par par)
{
     dde:	cf 93       	push	r28
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     de0:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     de2:	f8 94       	cli
	{
        switch (par)
     de4:	82 30       	cpi	r24, 0x02	; 2
     de6:	29 f0       	breq	.+10     	; 0xdf2 <Key_rf+0x14>
     de8:	83 30       	cpi	r24, 0x03	; 3
     dea:	99 f0       	breq	.+38     	; 0xe12 <Key_rf+0x34>
     dec:	81 30       	cpi	r24, 0x01	; 1
     dee:	c9 f4       	brne	.+50     	; 0xe22 <Key_rf+0x44>
     df0:	06 c0       	rjmp	.+12     	; 0xdfe <Key_rf+0x20>
        {
            case KEY_LEFT : {
                if(rf_on)  rf_on = 0;
     df2:	80 91 60 00 	lds	r24, 0x0060
     df6:	81 11       	cpse	r24, r1
     df8:	06 c0       	rjmp	.+12     	; 0xe06 <Key_rf+0x28>
                else       rf_on = 1;
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	07 c0       	rjmp	.+14     	; 0xe0c <Key_rf+0x2e>
                break;
            }

            case KEY_RIGHT : {
                if(rf_on)  rf_on = 0;
     dfe:	90 91 60 00 	lds	r25, 0x0060
     e02:	99 23       	and	r25, r25
     e04:	19 f0       	breq	.+6      	; 0xe0c <Key_rf+0x2e>
     e06:	10 92 60 00 	sts	0x0060, r1
     e0a:	0d c0       	rjmp	.+26     	; 0xe26 <Key_rf+0x48>
                else       rf_on = 1;
     e0c:	80 93 60 00 	sts	0x0060, r24
     e10:	0a c0       	rjmp	.+20     	; 0xe26 <Key_rf+0x48>
                break;
            }

            case KEY_OK:
            {
                lcd_init(LCD_DISP_ON);
     e12:	8c e0       	ldi	r24, 0x0C	; 12
     e14:	e7 da       	rcall	.-2610   	; 0x3e4 <lcd_init>
                killHandler(MSG_KEY_PRESS, &Key_rf);
     e16:	6f ee       	ldi	r22, 0xEF	; 239
     e18:	76 e0       	ldi	r23, 0x06	; 6
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	b3 d2       	rcall	.+1382   	; 0x1384 <killHandler>
                startMenu();
     e1e:	b2 df       	rcall	.-156    	; 0xd84 <startMenu>
     e20:	12 c0       	rjmp	.+36     	; 0xe46 <Key_rf+0x68>
                break;
            }
        }

        if ( (par == KEY_LEFT) | (par == KEY_RIGHT) | (par == 0) )
     e22:	83 30       	cpi	r24, 0x03	; 3
     e24:	80 f4       	brcc	.+32     	; 0xe46 <Key_rf+0x68>
        {
            lcd_gotoxy(0,1);
     e26:	61 e0       	ldi	r22, 0x01	; 1
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	8a da       	rcall	.-2796   	; 0x340 <lcd_gotoxy>
            if (rf_on) lcd_puts("  \263\272\273. ");
     e2c:	80 91 60 00 	lds	r24, 0x0060
     e30:	88 23       	and	r24, r24
     e32:	19 f0       	breq	.+6      	; 0xe3a <Key_rf+0x5c>
     e34:	86 ed       	ldi	r24, 0xD6	; 214
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <Key_rf+0x60>
            else       lcd_puts("  \263\303\272\273.");
     e3a:	8e ed       	ldi	r24, 0xDE	; 222
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	a9 da       	rcall	.-2734   	; 0x392 <lcd_puts>
            lcd_gotoxy(4,1);
     e40:	61 e0       	ldi	r22, 0x01	; 1
     e42:	84 e0       	ldi	r24, 0x04	; 4
     e44:	7d da       	rcall	.-2822   	; 0x340 <lcd_gotoxy>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     e46:	cf bf       	out	0x3f, r28	; 63
        }
    }
	return (1);
}
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	cf 91       	pop	r28
     e4c:	08 95       	ret

00000e4e <Key_snd>:




uint8_t Key_snd(msg_par par)
{
     e4e:	cf 93       	push	r28
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     e50:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     e52:	f8 94       	cli
	{
        switch (par)
     e54:	82 30       	cpi	r24, 0x02	; 2
     e56:	39 f0       	breq	.+14     	; 0xe66 <Key_snd+0x18>
     e58:	83 30       	cpi	r24, 0x03	; 3
     e5a:	09 f4       	brne	.+2      	; 0xe5e <Key_snd+0x10>
     e5c:	48 c0       	rjmp	.+144    	; 0xeee <Key_snd+0xa0>
     e5e:	81 30       	cpi	r24, 0x01	; 1
     e60:	09 f0       	breq	.+2      	; 0xe64 <Key_snd+0x16>
     e62:	61 c0       	rjmp	.+194    	; 0xf26 <Key_snd+0xd8>
     e64:	1e c0       	rjmp	.+60     	; 0xea2 <Key_snd+0x54>
        {
            case KEY_LEFT : {
                switch (menu_x)
     e66:	80 91 87 01 	lds	r24, 0x0187
     e6a:	88 23       	and	r24, r24
     e6c:	19 f0       	breq	.+6      	; 0xe74 <Key_snd+0x26>
     e6e:	81 30       	cpi	r24, 0x01	; 1
     e70:	39 f0       	breq	.+14     	; 0xe80 <Key_snd+0x32>
     e72:	5b c0       	rjmp	.+182    	; 0xf2a <Key_snd+0xdc>
                {
                    case 0:
                        if (snd_on)    snd_on = 0;
     e74:	80 91 79 01 	lds	r24, 0x0179
     e78:	81 11       	cpse	r24, r1
     e7a:	1e c0       	rjmp	.+60     	; 0xeb8 <Key_snd+0x6a>
                        else           snd_on = 1;
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	1f c0       	rjmp	.+62     	; 0xebe <Key_snd+0x70>
                        break;
                    case 1:
                        if (snd_duration>160)  snd_duration -= 160;
     e80:	80 91 7a 01 	lds	r24, 0x017A
     e84:	90 91 7b 01 	lds	r25, 0x017B
     e88:	81 3a       	cpi	r24, 0xA1	; 161
     e8a:	91 05       	cpc	r25, r1
     e8c:	38 f0       	brcs	.+14     	; 0xe9c <Key_snd+0x4e>
     e8e:	80 91 7a 01 	lds	r24, 0x017A
     e92:	90 91 7b 01 	lds	r25, 0x017B
     e96:	80 5a       	subi	r24, 0xA0	; 160
     e98:	91 09       	sbc	r25, r1
     e9a:	24 c0       	rjmp	.+72     	; 0xee4 <Key_snd+0x96>
                        else                   snd_duration = 1600;
     e9c:	80 e4       	ldi	r24, 0x40	; 64
     e9e:	96 e0       	ldi	r25, 0x06	; 6
     ea0:	21 c0       	rjmp	.+66     	; 0xee4 <Key_snd+0x96>
                }
                break;
            }

            case KEY_RIGHT : {
                switch (menu_x)
     ea2:	90 91 87 01 	lds	r25, 0x0187
     ea6:	99 23       	and	r25, r25
     ea8:	19 f0       	breq	.+6      	; 0xeb0 <Key_snd+0x62>
     eaa:	91 30       	cpi	r25, 0x01	; 1
     eac:	59 f0       	breq	.+22     	; 0xec4 <Key_snd+0x76>
     eae:	3d c0       	rjmp	.+122    	; 0xf2a <Key_snd+0xdc>
                {
                    case 0:
                        if (snd_on)    snd_on = 0;
     eb0:	90 91 79 01 	lds	r25, 0x0179
     eb4:	99 23       	and	r25, r25
     eb6:	19 f0       	breq	.+6      	; 0xebe <Key_snd+0x70>
     eb8:	10 92 79 01 	sts	0x0179, r1
     ebc:	36 c0       	rjmp	.+108    	; 0xf2a <Key_snd+0xdc>
                        else           snd_on = 1;
     ebe:	80 93 79 01 	sts	0x0179, r24
     ec2:	33 c0       	rjmp	.+102    	; 0xf2a <Key_snd+0xdc>
                        break;
                    case 1:
                        if (snd_duration<1600)  snd_duration += 160;
     ec4:	80 91 7a 01 	lds	r24, 0x017A
     ec8:	90 91 7b 01 	lds	r25, 0x017B
     ecc:	80 34       	cpi	r24, 0x40	; 64
     ece:	96 40       	sbci	r25, 0x06	; 6
     ed0:	38 f4       	brcc	.+14     	; 0xee0 <Key_snd+0x92>
     ed2:	80 91 7a 01 	lds	r24, 0x017A
     ed6:	90 91 7b 01 	lds	r25, 0x017B
     eda:	80 56       	subi	r24, 0x60	; 96
     edc:	9f 4f       	sbci	r25, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <Key_snd+0x96>
                        else                     snd_duration = 160;
     ee0:	80 ea       	ldi	r24, 0xA0	; 160
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	90 93 7b 01 	sts	0x017B, r25
     ee8:	80 93 7a 01 	sts	0x017A, r24
     eec:	1e c0       	rjmp	.+60     	; 0xf2a <Key_snd+0xdc>
                break;
            }

            case KEY_OK:
            {
                if(menu_x==0)
     eee:	80 91 87 01 	lds	r24, 0x0187
     ef2:	81 11       	cpse	r24, r1
     ef4:	04 c0       	rjmp	.+8      	; 0xefe <Key_snd+0xb0>
                {
                    menu_x = 1;
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	80 93 87 01 	sts	0x0187, r24
                    break;
     efc:	52 c0       	rjmp	.+164    	; 0xfa2 <Key_snd+0x154>
                }

                eeprom_write_byte(&snd_on_eep, snd_on);
     efe:	60 91 79 01 	lds	r22, 0x0179
     f02:	86 e0       	ldi	r24, 0x06	; 6
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	07 d7       	rcall	.+3598   	; 0x1d16 <__eewr_byte_m8>
                eeprom_write_word(&snd_duration_eep, snd_duration);
     f08:	60 91 7a 01 	lds	r22, 0x017A
     f0c:	70 91 7b 01 	lds	r23, 0x017B
     f10:	84 e0       	ldi	r24, 0x04	; 4
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	0d d7       	rcall	.+3610   	; 0x1d30 <__eewr_word_m8>

                lcd_init(LCD_DISP_ON);
     f16:	8c e0       	ldi	r24, 0x0C	; 12
     f18:	65 da       	rcall	.-2870   	; 0x3e4 <lcd_init>
                killHandler(MSG_KEY_PRESS, &Key_snd);
     f1a:	67 e2       	ldi	r22, 0x27	; 39
     f1c:	77 e0       	ldi	r23, 0x07	; 7
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	31 d2       	rcall	.+1122   	; 0x1384 <killHandler>
                startMenu();
     f22:	30 df       	rcall	.-416    	; 0xd84 <startMenu>
                break;
     f24:	3e c0       	rjmp	.+124    	; 0xfa2 <Key_snd+0x154>
            }
        }

        if ( (par == KEY_LEFT) | (par == KEY_RIGHT) | (par == 0) )
     f26:	83 30       	cpi	r24, 0x03	; 3
     f28:	e0 f5       	brcc	.+120    	; 0xfa2 <Key_snd+0x154>
        {
            lcd_gotoxy(0,0);
     f2a:	60 e0       	ldi	r22, 0x00	; 0
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	08 da       	rcall	.-3056   	; 0x340 <lcd_gotoxy>
            if (snd_on) lcd_puts("\263\272\273\306\300e\275 ");
     f30:	80 91 79 01 	lds	r24, 0x0179
     f34:	88 23       	and	r24, r24
     f36:	19 f0       	breq	.+6      	; 0xf3e <Key_snd+0xf0>
     f38:	86 ee       	ldi	r24, 0xE6	; 230
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <Key_snd+0xf4>
            else        lcd_puts("\263\303\272\273\306\300e\275");
     f3e:	8f ee       	ldi	r24, 0xEF	; 239
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	27 da       	rcall	.-2994   	; 0x392 <lcd_puts>
            lcd_gotoxy(4,1);
     f44:	61 e0       	ldi	r22, 0x01	; 1
     f46:	84 e0       	ldi	r24, 0x04	; 4
     f48:	fb d9       	rcall	.-3082   	; 0x340 <lcd_gotoxy>
            if (snd_duration == 1600)   sprintf(lcd_buffer, "1.0");
     f4a:	80 91 7a 01 	lds	r24, 0x017A
     f4e:	90 91 7b 01 	lds	r25, 0x017B
     f52:	80 34       	cpi	r24, 0x40	; 64
     f54:	96 40       	sbci	r25, 0x06	; 6
     f56:	31 f4       	brne	.+12     	; 0xf64 <Key_snd+0x116>
     f58:	68 ef       	ldi	r22, 0xF8	; 248
     f5a:	70 e0       	ldi	r23, 0x00	; 0
     f5c:	8e e7       	ldi	r24, 0x7E	; 126
     f5e:	91 e0       	ldi	r25, 0x01	; 1
     f60:	e4 d4       	rcall	.+2504   	; 0x192a <strcpy>
     f62:	18 c0       	rjmp	.+48     	; 0xf94 <Key_snd+0x146>
            else                        sprintf(lcd_buffer, "0.%d", snd_duration/160);
     f64:	80 91 7a 01 	lds	r24, 0x017A
     f68:	90 91 7b 01 	lds	r25, 0x017B
     f6c:	60 ea       	ldi	r22, 0xA0	; 160
     f6e:	70 e0       	ldi	r23, 0x00	; 0
     f70:	63 d4       	rcall	.+2246   	; 0x1838 <__udivmodhi4>
     f72:	7f 93       	push	r23
     f74:	6f 93       	push	r22
     f76:	8c ef       	ldi	r24, 0xFC	; 252
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	9f 93       	push	r25
     f7c:	8f 93       	push	r24
     f7e:	8e e7       	ldi	r24, 0x7E	; 126
     f80:	91 e0       	ldi	r25, 0x01	; 1
     f82:	9f 93       	push	r25
     f84:	8f 93       	push	r24
     f86:	d8 d4       	rcall	.+2480   	; 0x1938 <sprintf>
     f88:	0f 90       	pop	r0
     f8a:	0f 90       	pop	r0
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
            lcd_puts(lcd_buffer);
     f94:	8e e7       	ldi	r24, 0x7E	; 126
     f96:	91 e0       	ldi	r25, 0x01	; 1
     f98:	fc d9       	rcall	.-3080   	; 0x392 <lcd_puts>

            lcd_gotoxy(4,menu_x);
     f9a:	60 91 87 01 	lds	r22, 0x0187
     f9e:	84 e0       	ldi	r24, 0x04	; 4
     fa0:	cf d9       	rcall	.-3170   	; 0x340 <lcd_gotoxy>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     fa2:	cf bf       	out	0x3f, r28	; 63
        }
    }
	return (1);
}
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	cf 91       	pop	r28
     fa8:	08 95       	ret

00000faa <Key_light>:


uint8_t Key_light(msg_par par)
{
     faa:	cf 93       	push	r28
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     fac:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     fae:	f8 94       	cli
	{
        switch (par)
     fb0:	82 30       	cpi	r24, 0x02	; 2
     fb2:	39 f0       	breq	.+14     	; 0xfc2 <Key_light+0x18>
     fb4:	83 30       	cpi	r24, 0x03	; 3
     fb6:	09 f4       	brne	.+2      	; 0xfba <Key_light+0x10>
     fb8:	48 c0       	rjmp	.+144    	; 0x104a <Key_light+0xa0>
     fba:	81 30       	cpi	r24, 0x01	; 1
     fbc:	09 f0       	breq	.+2      	; 0xfc0 <Key_light+0x16>
     fbe:	61 c0       	rjmp	.+194    	; 0x1082 <Key_light+0xd8>
     fc0:	1e c0       	rjmp	.+60     	; 0xffe <Key_light+0x54>
        {
            case KEY_LEFT : {
                switch (menu_x)
     fc2:	80 91 87 01 	lds	r24, 0x0187
     fc6:	88 23       	and	r24, r24
     fc8:	19 f0       	breq	.+6      	; 0xfd0 <Key_light+0x26>
     fca:	81 30       	cpi	r24, 0x01	; 1
     fcc:	39 f0       	breq	.+14     	; 0xfdc <Key_light+0x32>
     fce:	5c c0       	rjmp	.+184    	; 0x1088 <Key_light+0xde>
                {
                    case 0:
                        if (light_on)    light_on = 0;
     fd0:	80 91 7c 01 	lds	r24, 0x017C
     fd4:	81 11       	cpse	r24, r1
     fd6:	1e c0       	rjmp	.+60     	; 0x1014 <Key_light+0x6a>
                        else             light_on = 1;
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	1f c0       	rjmp	.+62     	; 0x101a <Key_light+0x70>
                        break;
                    case 1:
                        if (light_duration>800)  light_duration -= 800;
     fdc:	80 91 89 01 	lds	r24, 0x0189
     fe0:	90 91 8a 01 	lds	r25, 0x018A
     fe4:	81 32       	cpi	r24, 0x21	; 33
     fe6:	93 40       	sbci	r25, 0x03	; 3
     fe8:	38 f0       	brcs	.+14     	; 0xff8 <Key_light+0x4e>
     fea:	80 91 89 01 	lds	r24, 0x0189
     fee:	90 91 8a 01 	lds	r25, 0x018A
     ff2:	80 52       	subi	r24, 0x20	; 32
     ff4:	93 40       	sbci	r25, 0x03	; 3
     ff6:	24 c0       	rjmp	.+72     	; 0x1040 <Key_light+0x96>
                        else                     light_duration = 14400;
     ff8:	80 e4       	ldi	r24, 0x40	; 64
     ffa:	98 e3       	ldi	r25, 0x38	; 56
     ffc:	21 c0       	rjmp	.+66     	; 0x1040 <Key_light+0x96>
                }
                break;
            }

            case KEY_RIGHT : {
                switch (menu_x)
     ffe:	90 91 87 01 	lds	r25, 0x0187
    1002:	99 23       	and	r25, r25
    1004:	19 f0       	breq	.+6      	; 0x100c <Key_light+0x62>
    1006:	91 30       	cpi	r25, 0x01	; 1
    1008:	59 f0       	breq	.+22     	; 0x1020 <Key_light+0x76>
    100a:	3e c0       	rjmp	.+124    	; 0x1088 <Key_light+0xde>
                {
                    case 0:
                        if (light_on)    light_on = 0;
    100c:	90 91 7c 01 	lds	r25, 0x017C
    1010:	99 23       	and	r25, r25
    1012:	19 f0       	breq	.+6      	; 0x101a <Key_light+0x70>
    1014:	10 92 7c 01 	sts	0x017C, r1
    1018:	37 c0       	rjmp	.+110    	; 0x1088 <Key_light+0xde>
                        else             light_on = 1;
    101a:	80 93 7c 01 	sts	0x017C, r24
    101e:	34 c0       	rjmp	.+104    	; 0x1088 <Key_light+0xde>
                        break;
                    case 1:
                        if (light_duration<14400)  light_duration += 800;
    1020:	80 91 89 01 	lds	r24, 0x0189
    1024:	90 91 8a 01 	lds	r25, 0x018A
    1028:	80 34       	cpi	r24, 0x40	; 64
    102a:	98 43       	sbci	r25, 0x38	; 56
    102c:	38 f4       	brcc	.+14     	; 0x103c <Key_light+0x92>
    102e:	80 91 89 01 	lds	r24, 0x0189
    1032:	90 91 8a 01 	lds	r25, 0x018A
    1036:	80 5e       	subi	r24, 0xE0	; 224
    1038:	9c 4f       	sbci	r25, 0xFC	; 252
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <Key_light+0x96>
                        else                       light_duration = 800;
    103c:	80 e2       	ldi	r24, 0x20	; 32
    103e:	93 e0       	ldi	r25, 0x03	; 3
    1040:	90 93 8a 01 	sts	0x018A, r25
    1044:	80 93 89 01 	sts	0x0189, r24
    1048:	1f c0       	rjmp	.+62     	; 0x1088 <Key_light+0xde>
                break;
            }

            case KEY_OK:
            {
                if(menu_x==0)
    104a:	80 91 87 01 	lds	r24, 0x0187
    104e:	81 11       	cpse	r24, r1
    1050:	04 c0       	rjmp	.+8      	; 0x105a <Key_light+0xb0>
                {
                    menu_x = 1;
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	80 93 87 01 	sts	0x0187, r24
                    break;
    1058:	5a c0       	rjmp	.+180    	; 0x110e <Key_light+0x164>
                }

                eeprom_write_byte(&light_on_eep, light_on);
    105a:	60 91 7c 01 	lds	r22, 0x017C
    105e:	83 e0       	ldi	r24, 0x03	; 3
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	59 d6       	rcall	.+3250   	; 0x1d16 <__eewr_byte_m8>
                eeprom_write_word(&light_duration_eep, light_duration);
    1064:	60 91 89 01 	lds	r22, 0x0189
    1068:	70 91 8a 01 	lds	r23, 0x018A
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	5f d6       	rcall	.+3262   	; 0x1d30 <__eewr_word_m8>

                lcd_init(LCD_DISP_ON);
    1072:	8c e0       	ldi	r24, 0x0C	; 12
    1074:	b7 d9       	rcall	.-3218   	; 0x3e4 <lcd_init>
                killHandler(MSG_KEY_PRESS, &Key_light);
    1076:	65 ed       	ldi	r22, 0xD5	; 213
    1078:	77 e0       	ldi	r23, 0x07	; 7
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	83 d1       	rcall	.+774    	; 0x1384 <killHandler>
                startMenu();
    107e:	82 de       	rcall	.-764    	; 0xd84 <startMenu>
                break;
    1080:	46 c0       	rjmp	.+140    	; 0x110e <Key_light+0x164>
            }
        }

        if ( (par == KEY_LEFT) | (par == KEY_RIGHT) | (par == 0) )
    1082:	83 30       	cpi	r24, 0x03	; 3
    1084:	08 f0       	brcs	.+2      	; 0x1088 <Key_light+0xde>
    1086:	43 c0       	rjmp	.+134    	; 0x110e <Key_light+0x164>
        {
            lcd_gotoxy(0,0);
    1088:	60 e0       	ldi	r22, 0x00	; 0
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	59 d9       	rcall	.-3406   	; 0x340 <lcd_gotoxy>
            if (light_on) lcd_puts("  \263\272\273. ");
    108e:	80 91 7c 01 	lds	r24, 0x017C
    1092:	88 23       	and	r24, r24
    1094:	19 f0       	breq	.+6      	; 0x109c <Key_light+0xf2>
    1096:	86 ed       	ldi	r24, 0xD6	; 214
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <Key_light+0xf6>
            else          lcd_puts("  \263\303\272\273. ");
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	91 e0       	ldi	r25, 0x01	; 1
    10a0:	78 d9       	rcall	.-3344   	; 0x392 <lcd_puts>
            lcd_gotoxy(4,1);
    10a2:	61 e0       	ldi	r22, 0x01	; 1
    10a4:	84 e0       	ldi	r24, 0x04	; 4
    10a6:	4c d9       	rcall	.-3432   	; 0x340 <lcd_gotoxy>
            if( (light_duration%1600) > 0 ) sprintf(lcd_buffer, "%d.5", light_duration/1600);
    10a8:	80 91 89 01 	lds	r24, 0x0189
    10ac:	90 91 8a 01 	lds	r25, 0x018A
    10b0:	20 e4       	ldi	r18, 0x40	; 64
    10b2:	36 e0       	ldi	r19, 0x06	; 6
    10b4:	b9 01       	movw	r22, r18
    10b6:	c0 d3       	rcall	.+1920   	; 0x1838 <__udivmodhi4>
    10b8:	89 2b       	or	r24, r25
    10ba:	59 f0       	breq	.+22     	; 0x10d2 <Key_light+0x128>
    10bc:	80 91 89 01 	lds	r24, 0x0189
    10c0:	90 91 8a 01 	lds	r25, 0x018A
    10c4:	b9 01       	movw	r22, r18
    10c6:	b8 d3       	rcall	.+1904   	; 0x1838 <__udivmodhi4>
    10c8:	7f 93       	push	r23
    10ca:	6f 93       	push	r22
    10cc:	8a e0       	ldi	r24, 0x0A	; 10
    10ce:	91 e0       	ldi	r25, 0x01	; 1
    10d0:	0a c0       	rjmp	.+20     	; 0x10e6 <Key_light+0x13c>
            else                            sprintf(lcd_buffer, "%d.0", light_duration/1600);
    10d2:	80 91 89 01 	lds	r24, 0x0189
    10d6:	90 91 8a 01 	lds	r25, 0x018A
    10da:	b9 01       	movw	r22, r18
    10dc:	ad d3       	rcall	.+1882   	; 0x1838 <__udivmodhi4>
    10de:	7f 93       	push	r23
    10e0:	6f 93       	push	r22
    10e2:	8f e0       	ldi	r24, 0x0F	; 15
    10e4:	91 e0       	ldi	r25, 0x01	; 1
    10e6:	9f 93       	push	r25
    10e8:	8f 93       	push	r24
    10ea:	8e e7       	ldi	r24, 0x7E	; 126
    10ec:	91 e0       	ldi	r25, 0x01	; 1
    10ee:	9f 93       	push	r25
    10f0:	8f 93       	push	r24
    10f2:	22 d4       	rcall	.+2116   	; 0x1938 <sprintf>
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	0f 90       	pop	r0
    10fa:	0f 90       	pop	r0
    10fc:	0f 90       	pop	r0
    10fe:	0f 90       	pop	r0
            lcd_puts(lcd_buffer);
    1100:	8e e7       	ldi	r24, 0x7E	; 126
    1102:	91 e0       	ldi	r25, 0x01	; 1
    1104:	46 d9       	rcall	.-3444   	; 0x392 <lcd_puts>

            lcd_gotoxy(4,menu_x);
    1106:	60 91 87 01 	lds	r22, 0x0187
    110a:	84 e0       	ldi	r24, 0x04	; 4
    110c:	19 d9       	rcall	.-3534   	; 0x340 <lcd_gotoxy>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    110e:	cf bf       	out	0x3f, r28	; 63
        }
    }
	return (1);
}
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	cf 91       	pop	r28
    1114:	08 95       	ret

00001116 <Key_channel>:


uint8_t Key_channel(msg_par par)
{
    1116:	cf 93       	push	r28
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1118:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    111a:	f8 94       	cli
	{
        switch (par)
    111c:	82 30       	cpi	r24, 0x02	; 2
    111e:	29 f0       	breq	.+10     	; 0x112a <Key_channel+0x14>
    1120:	83 30       	cpi	r24, 0x03	; 3
    1122:	b9 f0       	breq	.+46     	; 0x1152 <Key_channel+0x3c>
    1124:	81 30       	cpi	r24, 0x01	; 1
    1126:	29 f5       	brne	.+74     	; 0x1172 <Key_channel+0x5c>
    1128:	0a c0       	rjmp	.+20     	; 0x113e <Key_channel+0x28>
        {
            case KEY_LEFT:
            {
                if(channel > 1)  --channel;
    112a:	80 91 8b 01 	lds	r24, 0x018B
    112e:	82 30       	cpi	r24, 0x02	; 2
    1130:	20 f0       	brcs	.+8      	; 0x113a <Key_channel+0x24>
    1132:	80 91 8b 01 	lds	r24, 0x018B
    1136:	81 50       	subi	r24, 0x01	; 1
    1138:	09 c0       	rjmp	.+18     	; 0x114c <Key_channel+0x36>
                else             channel = 14;
    113a:	8e e0       	ldi	r24, 0x0E	; 14
    113c:	07 c0       	rjmp	.+14     	; 0x114c <Key_channel+0x36>
                break;
            }

            case KEY_RIGHT:
            {
                if(channel < 14) ++channel;
    113e:	90 91 8b 01 	lds	r25, 0x018B
    1142:	9e 30       	cpi	r25, 0x0E	; 14
    1144:	18 f4       	brcc	.+6      	; 0x114c <Key_channel+0x36>
    1146:	80 91 8b 01 	lds	r24, 0x018B
    114a:	8f 5f       	subi	r24, 0xFF	; 255
                else             channel = 1;
    114c:	80 93 8b 01 	sts	0x018B, r24
    1150:	12 c0       	rjmp	.+36     	; 0x1176 <Key_channel+0x60>
                break;
            }

            case KEY_OK:
            {
                eeprom_write_byte(&channel_eep, channel);
    1152:	60 91 8b 01 	lds	r22, 0x018B
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	dd d5       	rcall	.+3002   	; 0x1d16 <__eewr_byte_m8>
                rfm22_write(FREQ_HOP_CHSEL_P, channel-1);
    115c:	60 91 8b 01 	lds	r22, 0x018B
    1160:	61 50       	subi	r22, 0x01	; 1
    1162:	89 e7       	ldi	r24, 0x79	; 121
    1164:	e9 d9       	rcall	.-3118   	; 0x538 <rfm22_write>

                killHandler(MSG_KEY_PRESS, &Key_channel);
    1166:	6b e8       	ldi	r22, 0x8B	; 139
    1168:	78 e0       	ldi	r23, 0x08	; 8
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	0b d1       	rcall	.+534    	; 0x1384 <killHandler>
                startMenu();
    116e:	0a de       	rcall	.-1004   	; 0xd84 <startMenu>
    1170:	1e c0       	rjmp	.+60     	; 0x11ae <Key_channel+0x98>
                break;
            }
        }

        if ( (par == KEY_LEFT) || (par == KEY_RIGHT) || (par == 0) )
    1172:	83 30       	cpi	r24, 0x03	; 3
    1174:	e0 f4       	brcc	.+56     	; 0x11ae <Key_channel+0x98>
        {
            lcd_gotoxy(0,1);
    1176:	61 e0       	ldi	r22, 0x01	; 1
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	e2 d8       	rcall	.-3644   	; 0x340 <lcd_gotoxy>
            sprintf(lcd_buffer, "Ka\275a\273 %2d", channel);
    117c:	80 91 8b 01 	lds	r24, 0x018B
    1180:	1f 92       	push	r1
    1182:	8f 93       	push	r24
    1184:	84 e1       	ldi	r24, 0x14	; 20
    1186:	91 e0       	ldi	r25, 0x01	; 1
    1188:	9f 93       	push	r25
    118a:	8f 93       	push	r24
    118c:	8e e7       	ldi	r24, 0x7E	; 126
    118e:	91 e0       	ldi	r25, 0x01	; 1
    1190:	9f 93       	push	r25
    1192:	8f 93       	push	r24
    1194:	d1 d3       	rcall	.+1954   	; 0x1938 <sprintf>
            lcd_puts(lcd_buffer);
    1196:	8e e7       	ldi	r24, 0x7E	; 126
    1198:	91 e0       	ldi	r25, 0x01	; 1
    119a:	fb d8       	rcall	.-3594   	; 0x392 <lcd_puts>
            lcd_gotoxy(7,1);
    119c:	61 e0       	ldi	r22, 0x01	; 1
    119e:	87 e0       	ldi	r24, 0x07	; 7
    11a0:	cf d8       	rcall	.-3682   	; 0x340 <lcd_gotoxy>
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    11ae:	cf bf       	out	0x3f, r28	; 63
        }
    }
    return 1;
}
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	cf 91       	pop	r28
    11b4:	08 95       	ret

000011b6 <Key_active>:
	return (1);
}


uint8_t Key_active(msg_par par)
{
    11b6:	ef 92       	push	r14
    11b8:	ff 92       	push	r15
    11ba:	0f 93       	push	r16
    11bc:	1f 93       	push	r17
    11be:	cf 93       	push	r28
    11c0:	df 93       	push	r29
    uint8_t i;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    11c2:	ff b6       	in	r15, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    11c4:	f8 94       	cli
	{
        active_on = 1;
    11c6:	91 e0       	ldi	r25, 0x01	; 1
    11c8:	90 93 2f 01 	sts	0x012F, r25

        switch (par)
    11cc:	82 30       	cpi	r24, 0x02	; 2
    11ce:	29 f0       	breq	.+10     	; 0x11da <Key_active+0x24>
    11d0:	83 30       	cpi	r24, 0x03	; 3
    11d2:	d9 f0       	breq	.+54     	; 0x120a <Key_active+0x54>
    11d4:	81 30       	cpi	r24, 0x01	; 1
    11d6:	09 f5       	brne	.+66     	; 0x121a <Key_active+0x64>
    11d8:	08 c0       	rjmp	.+16     	; 0x11ea <Key_active+0x34>
        {
            case KEY_LEFT:
            {
                if ( nevent > 3 )
    11da:	80 91 8c 01 	lds	r24, 0x018C
    11de:	84 30       	cpi	r24, 0x04	; 4
    11e0:	f8 f0       	brcs	.+62     	; 0x1220 <Key_active+0x6a>
                    nevent -= 4;
    11e2:	80 91 8c 01 	lds	r24, 0x018C
    11e6:	84 50       	subi	r24, 0x04	; 4
    11e8:	0d c0       	rjmp	.+26     	; 0x1204 <Key_active+0x4e>
                break;
            }

            case KEY_RIGHT:
            {
                if( (nevent+4) < (n_active_calls) )
    11ea:	80 91 8c 01 	lds	r24, 0x018C
    11ee:	20 91 33 01 	lds	r18, 0x0133
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	04 96       	adiw	r24, 0x04	; 4
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	82 17       	cp	r24, r18
    11fa:	93 07       	cpc	r25, r19
    11fc:	8c f4       	brge	.+34     	; 0x1220 <Key_active+0x6a>
                    nevent += 4;
    11fe:	80 91 8c 01 	lds	r24, 0x018C
    1202:	8c 5f       	subi	r24, 0xFC	; 252
    1204:	80 93 8c 01 	sts	0x018C, r24
    1208:	0b c0       	rjmp	.+22     	; 0x1220 <Key_active+0x6a>
                break;
            }

            case KEY_OK:
            {
                killHandler(MSG_KEY_PRESS, &Key_active);
    120a:	6b ed       	ldi	r22, 0xDB	; 219
    120c:	78 e0       	ldi	r23, 0x08	; 8
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	b9 d0       	rcall	.+370    	; 0x1384 <killHandler>
                active_on = 0;
    1212:	10 92 2f 01 	sts	0x012F, r1
                startMenu();
    1216:	b6 dd       	rcall	.-1172   	; 0xd84 <startMenu>
    1218:	7f c0       	rjmp	.+254    	; 0x1318 <Key_active+0x162>
                break;
            }
        }

        if ( (par == KEY_LEFT) || (par == KEY_RIGHT) || (par == 0) )
    121a:	83 30       	cpi	r24, 0x03	; 3
    121c:	08 f0       	brcs	.+2      	; 0x1220 <Key_active+0x6a>
    121e:	7c c0       	rjmp	.+248    	; 0x1318 <Key_active+0x162>
        {
            lcd_clrscr();
    1220:	98 d8       	rcall	.-3792   	; 0x352 <lcd_clrscr>

            if(n_active_calls)
    1222:	80 91 33 01 	lds	r24, 0x0133
    1226:	88 23       	and	r24, r24
    1228:	09 f4       	brne	.+2      	; 0x122c <Key_active+0x76>
    122a:	70 c0       	rjmp	.+224    	; 0x130c <Key_active+0x156>
            {
                for ( i=nevent ; (i < (nevent + 2)) && (i < n_active_calls) ; ++i )
    122c:	e0 90 8c 01 	lds	r14, 0x018C
                {
                    sprintf(lcd_buffer, "%03d ", active_call_id[i]);
    1230:	ce e1       	ldi	r28, 0x1E	; 30
    1232:	d1 e0       	ldi	r29, 0x01	; 1
    1234:	0e e7       	ldi	r16, 0x7E	; 126
    1236:	11 e0       	ldi	r17, 0x01	; 1
        {
            lcd_clrscr();

            if(n_active_calls)
            {
                for ( i=nevent ; (i < (nevent + 2)) && (i < n_active_calls) ; ++i )
    1238:	80 91 8c 01 	lds	r24, 0x018C
    123c:	2e 2d       	mov	r18, r14
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	01 96       	adiw	r24, 0x01	; 1
    1244:	82 17       	cp	r24, r18
    1246:	93 07       	cpc	r25, r19
    1248:	d4 f0       	brlt	.+52     	; 0x127e <Key_active+0xc8>
    124a:	80 91 33 01 	lds	r24, 0x0133
    124e:	e8 16       	cp	r14, r24
    1250:	b0 f4       	brcc	.+44     	; 0x127e <Key_active+0xc8>
                {
                    sprintf(lcd_buffer, "%03d ", active_call_id[i]);
    1252:	f9 01       	movw	r30, r18
    1254:	ec 5c       	subi	r30, 0xCC	; 204
    1256:	fe 4f       	sbci	r31, 0xFE	; 254
    1258:	80 81       	ld	r24, Z
    125a:	1f 92       	push	r1
    125c:	8f 93       	push	r24
    125e:	df 93       	push	r29
    1260:	cf 93       	push	r28
    1262:	1f 93       	push	r17
    1264:	0f 93       	push	r16
    1266:	68 d3       	rcall	.+1744   	; 0x1938 <sprintf>
                    lcd_puts(lcd_buffer);
    1268:	8e e7       	ldi	r24, 0x7E	; 126
    126a:	91 e0       	ldi	r25, 0x01	; 1
    126c:	92 d8       	rcall	.-3804   	; 0x392 <lcd_puts>
        {
            lcd_clrscr();

            if(n_active_calls)
            {
                for ( i=nevent ; (i < (nevent + 2)) && (i < n_active_calls) ; ++i )
    126e:	e3 94       	inc	r14
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
    1278:	0f 90       	pop	r0
    127a:	0f 90       	pop	r0
    127c:	dd cf       	rjmp	.-70     	; 0x1238 <Key_active+0x82>
                {
                    sprintf(lcd_buffer, "%03d ", active_call_id[i]);
                    lcd_puts(lcd_buffer);
                }
                lcd_gotoxy(0,1);
    127e:	61 e0       	ldi	r22, 0x01	; 1
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	5e d8       	rcall	.-3908   	; 0x340 <lcd_gotoxy>
                for ( i=(nevent+2) ; (i < (nevent + 4)) && (i < n_active_calls) ; ++i )
    1284:	e0 90 8c 01 	lds	r14, 0x018C
    1288:	e3 94       	inc	r14
    128a:	e3 94       	inc	r14
                {
                    sprintf(lcd_buffer, "%03d ", active_call_id[i]);
    128c:	ce e1       	ldi	r28, 0x1E	; 30
    128e:	d1 e0       	ldi	r29, 0x01	; 1
    1290:	0e e7       	ldi	r16, 0x7E	; 126
    1292:	11 e0       	ldi	r17, 0x01	; 1
                {
                    sprintf(lcd_buffer, "%03d ", active_call_id[i]);
                    lcd_puts(lcd_buffer);
                }
                lcd_gotoxy(0,1);
                for ( i=(nevent+2) ; (i < (nevent + 4)) && (i < n_active_calls) ; ++i )
    1294:	80 91 8c 01 	lds	r24, 0x018C
    1298:	2e 2d       	mov	r18, r14
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	03 96       	adiw	r24, 0x03	; 3
    12a0:	82 17       	cp	r24, r18
    12a2:	93 07       	cpc	r25, r19
    12a4:	d4 f0       	brlt	.+52     	; 0x12da <Key_active+0x124>
    12a6:	80 91 33 01 	lds	r24, 0x0133
    12aa:	e8 16       	cp	r14, r24
    12ac:	b0 f4       	brcc	.+44     	; 0x12da <Key_active+0x124>
                {
                    sprintf(lcd_buffer, "%03d ", active_call_id[i]);
    12ae:	f9 01       	movw	r30, r18
    12b0:	ec 5c       	subi	r30, 0xCC	; 204
    12b2:	fe 4f       	sbci	r31, 0xFE	; 254
    12b4:	80 81       	ld	r24, Z
    12b6:	1f 92       	push	r1
    12b8:	8f 93       	push	r24
    12ba:	df 93       	push	r29
    12bc:	cf 93       	push	r28
    12be:	1f 93       	push	r17
    12c0:	0f 93       	push	r16
    12c2:	3a d3       	rcall	.+1652   	; 0x1938 <sprintf>
                    lcd_puts(lcd_buffer);
    12c4:	8e e7       	ldi	r24, 0x7E	; 126
    12c6:	91 e0       	ldi	r25, 0x01	; 1
    12c8:	64 d8       	rcall	.-3896   	; 0x392 <lcd_puts>
                {
                    sprintf(lcd_buffer, "%03d ", active_call_id[i]);
                    lcd_puts(lcd_buffer);
                }
                lcd_gotoxy(0,1);
                for ( i=(nevent+2) ; (i < (nevent + 4)) && (i < n_active_calls) ; ++i )
    12ca:	e3 94       	inc	r14
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	0f 90       	pop	r0
    12d8:	dd cf       	rjmp	.-70     	; 0x1294 <Key_active+0xde>
                {
                    sprintf(lcd_buffer, "%03d ", active_call_id[i]);
                    lcd_puts(lcd_buffer);
                }

                if(nevent > 1) {
    12da:	80 91 8c 01 	lds	r24, 0x018C
    12de:	82 30       	cpi	r24, 0x02	; 2
    12e0:	28 f0       	brcs	.+10     	; 0x12ec <Key_active+0x136>
                    lcd_gotoxy(7,0);
    12e2:	60 e0       	ldi	r22, 0x00	; 0
    12e4:	87 e0       	ldi	r24, 0x07	; 7
    12e6:	2c d8       	rcall	.-4008   	; 0x340 <lcd_gotoxy>
                    lcd_putc(0xd9);
    12e8:	89 ed       	ldi	r24, 0xD9	; 217
    12ea:	37 d8       	rcall	.-3986   	; 0x35a <lcd_putc>
                }
                if(n_active_calls > (nevent+4)) {
    12ec:	20 91 33 01 	lds	r18, 0x0133
    12f0:	80 91 8c 01 	lds	r24, 0x018C
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	04 96       	adiw	r24, 0x04	; 4
    12fa:	82 17       	cp	r24, r18
    12fc:	93 07       	cpc	r25, r19
    12fe:	64 f4       	brge	.+24     	; 0x1318 <Key_active+0x162>
                    lcd_gotoxy(7,1);
    1300:	61 e0       	ldi	r22, 0x01	; 1
    1302:	87 e0       	ldi	r24, 0x07	; 7
    1304:	1d d8       	rcall	.-4038   	; 0x340 <lcd_gotoxy>
                    lcd_putc(0xda);
    1306:	8a ed       	ldi	r24, 0xDA	; 218
    1308:	28 d8       	rcall	.-4016   	; 0x35a <lcd_putc>
    130a:	06 c0       	rjmp	.+12     	; 0x1318 <Key_active+0x162>
                }
            }
            else
            {
                lcd_gotoxy(0,1);
    130c:	61 e0       	ldi	r22, 0x01	; 1
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	17 d8       	rcall	.-4050   	; 0x340 <lcd_gotoxy>
                lcd_puts("He\277 \263\303\267.");
    1312:	84 e2       	ldi	r24, 0x24	; 36
    1314:	91 e0       	ldi	r25, 0x01	; 1
    1316:	3d d8       	rcall	.-3974   	; 0x392 <lcd_puts>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1318:	ff be       	out	0x3f, r15	; 63
            }
        }
    }
	return 1;
}
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	df 91       	pop	r29
    131e:	cf 91       	pop	r28
    1320:	1f 91       	pop	r17
    1322:	0f 91       	pop	r16
    1324:	ff 90       	pop	r15
    1326:	ef 90       	pop	r14
    1328:	08 95       	ret

0000132a <Key_ok>:



uint8_t Key_ok(msg_par par)
{
	if( par == KEY_OK )
    132a:	83 30       	cpi	r24, 0x03	; 3
    132c:	29 f4       	brne	.+10     	; 0x1338 <Key_ok+0xe>
	{
        killHandler(MSG_KEY_PRESS, &Key_ok);
    132e:	65 e9       	ldi	r22, 0x95	; 149
    1330:	79 e0       	ldi	r23, 0x09	; 9
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	27 d0       	rcall	.+78     	; 0x1384 <killHandler>
        startMenu();
    1336:	26 dd       	rcall	.-1460   	; 0xd84 <startMenu>
	}
	return 1;
}
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	08 95       	ret

0000133c <setHandler>:
volatile uint16_t lMesPointer, hMesPointer; // указатели на начало и конец буфера

// установка обработчика события
// вызывается: setHandler(MSG_KEY_PRESS, &checkKey);
void setHandler(msg_num msg, handler hnd) {
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    133c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    133e:	f8 94       	cli
		if (numHandlers < maxHandlers) {
    1340:	20 91 a8 01 	lds	r18, 0x01A8
    1344:	20 31       	cpi	r18, 0x10	; 16
    1346:	e0 f4       	brcc	.+56     	; 0x1380 <setHandler+0x44>
			lHandler[numHandlers].hnd = hnd; // и регистрирем обработчик
    1348:	20 91 a8 01 	lds	r18, 0x01A8
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	f9 01       	movw	r30, r18
    1350:	ee 0f       	add	r30, r30
    1352:	ff 1f       	adc	r31, r31
    1354:	e2 0f       	add	r30, r18
    1356:	f3 1f       	adc	r31, r19
    1358:	e7 55       	subi	r30, 0x57	; 87
    135a:	fe 4f       	sbci	r31, 0xFE	; 254
    135c:	72 83       	std	Z+2, r23	; 0x02
    135e:	61 83       	std	Z+1, r22	; 0x01
			lHandler[numHandlers].msg = msg;
    1360:	20 91 a8 01 	lds	r18, 0x01A8
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	f9 01       	movw	r30, r18
    1368:	ee 0f       	add	r30, r30
    136a:	ff 1f       	adc	r31, r31
    136c:	e2 0f       	add	r30, r18
    136e:	f3 1f       	adc	r31, r19
    1370:	e7 55       	subi	r30, 0x57	; 87
    1372:	fe 4f       	sbci	r31, 0xFE	; 254
    1374:	80 83       	st	Z, r24
			numHandlers++;
    1376:	80 91 a8 01 	lds	r24, 0x01A8
    137a:	8f 5f       	subi	r24, 0xFF	; 255
    137c:	80 93 a8 01 	sts	0x01A8, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1380:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1382:	08 95       	ret

00001384 <killHandler>:

// снятие обработчика события
// вызывается: killHandler(MSG_KEY_PRESS, &checkKey);
// удаляет один последний обработчик.
void killHandler(msg_num msg, handler hnd) {
	if (numHandlers==0)
    1384:	90 91 a8 01 	lds	r25, 0x01A8
    1388:	99 23       	and	r25, r25
    138a:	09 f4       	brne	.+2      	; 0x138e <killHandler+0xa>
    138c:	47 c0       	rjmp	.+142    	; 0x141c <killHandler+0x98>
		return;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    138e:	5f b7       	in	r21, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1390:	f8 94       	cli
		int8_t i, j;
		j = 0;
		for (i = numHandlers-1; i >= 0; i--) {
    1392:	40 91 a8 01 	lds	r20, 0x01A8
    1396:	41 50       	subi	r20, 0x01	; 1
    1398:	47 fd       	sbrc	r20, 7
    139a:	3f c0       	rjmp	.+126    	; 0x141a <killHandler+0x96>

			if ((lHandler[i].msg == msg) && (lHandler[i].hnd == hnd)) {
    139c:	24 2f       	mov	r18, r20
    139e:	33 27       	eor	r19, r19
    13a0:	27 fd       	sbrc	r18, 7
    13a2:	30 95       	com	r19
    13a4:	f9 01       	movw	r30, r18
    13a6:	ee 0f       	add	r30, r30
    13a8:	ff 1f       	adc	r31, r31
    13aa:	e2 0f       	add	r30, r18
    13ac:	f3 1f       	adc	r31, r19
    13ae:	e7 55       	subi	r30, 0x57	; 87
    13b0:	fe 4f       	sbci	r31, 0xFE	; 254
    13b2:	90 81       	ld	r25, Z
    13b4:	98 13       	cpse	r25, r24
    13b6:	ef cf       	rjmp	.-34     	; 0x1396 <killHandler+0x12>
    13b8:	21 81       	ldd	r18, Z+1	; 0x01
    13ba:	32 81       	ldd	r19, Z+2	; 0x02
    13bc:	26 17       	cp	r18, r22
    13be:	37 07       	cpc	r19, r23
    13c0:	51 f7       	brne	.-44     	; 0x1396 <killHandler+0x12>

				// сдвигаем все записи к началу списка, чтобы дырок не было
				for (j = i; j < numHandlers-1 ; j++) {
    13c2:	84 2f       	mov	r24, r20
    13c4:	99 27       	eor	r25, r25
    13c6:	87 fd       	sbrc	r24, 7
    13c8:	90 95       	com	r25
    13ca:	20 91 a8 01 	lds	r18, 0x01A8
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	21 50       	subi	r18, 0x01	; 1
    13d2:	31 09       	sbc	r19, r1
    13d4:	82 17       	cp	r24, r18
    13d6:	93 07       	cpc	r25, r19
    13d8:	dc f4       	brge	.+54     	; 0x1410 <killHandler+0x8c>
					lHandler[j].msg = lHandler[j + 1].msg;
    13da:	9c 01       	movw	r18, r24
    13dc:	2f 5f       	subi	r18, 0xFF	; 255
    13de:	3f 4f       	sbci	r19, 0xFF	; 255
    13e0:	d9 01       	movw	r26, r18
    13e2:	aa 0f       	add	r26, r26
    13e4:	bb 1f       	adc	r27, r27
    13e6:	a2 0f       	add	r26, r18
    13e8:	b3 1f       	adc	r27, r19
    13ea:	a7 55       	subi	r26, 0x57	; 87
    13ec:	be 4f       	sbci	r27, 0xFE	; 254
    13ee:	2c 91       	ld	r18, X
    13f0:	fc 01       	movw	r30, r24
    13f2:	ee 0f       	add	r30, r30
    13f4:	ff 1f       	adc	r31, r31
    13f6:	e8 0f       	add	r30, r24
    13f8:	f9 1f       	adc	r31, r25
    13fa:	e7 55       	subi	r30, 0x57	; 87
    13fc:	fe 4f       	sbci	r31, 0xFE	; 254
    13fe:	20 83       	st	Z, r18
					lHandler[j].hnd = lHandler[j + 1].hnd;
    1400:	11 96       	adiw	r26, 0x01	; 1
    1402:	8d 91       	ld	r24, X+
    1404:	9c 91       	ld	r25, X
    1406:	12 97       	sbiw	r26, 0x02	; 2
    1408:	92 83       	std	Z+2, r25	; 0x02
    140a:	81 83       	std	Z+1, r24	; 0x01
    140c:	4f 5f       	subi	r20, 0xFF	; 255
    140e:	d9 cf       	rjmp	.-78     	; 0x13c2 <killHandler+0x3e>
				}
				numHandlers--;
    1410:	80 91 a8 01 	lds	r24, 0x01A8
    1414:	81 50       	subi	r24, 0x01	; 1
    1416:	80 93 a8 01 	sts	0x01A8, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    141a:	5f bf       	out	0x3f, r21	; 63
    __asm__ volatile ("" ::: "memory");
    141c:	08 95       	ret

0000141e <killHandlersNum>:
	}
}


void killHandlersNum(msg_num msg) {
	if (numHandlers==0)
    141e:	90 91 a8 01 	lds	r25, 0x01A8
    1422:	99 23       	and	r25, r25
    1424:	09 f4       	brne	.+2      	; 0x1428 <killHandlersNum+0xa>
    1426:	44 c0       	rjmp	.+136    	; 0x14b0 <killHandlersNum+0x92>
		return;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1428:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    142a:	f8 94       	cli
		int8_t i, j;
		j = 0;
		for (i = numHandlers-1; i >= 0; i--) {
    142c:	90 91 a8 01 	lds	r25, 0x01A8
    1430:	91 50       	subi	r25, 0x01	; 1
    1432:	97 fd       	sbrc	r25, 7
    1434:	3c c0       	rjmp	.+120    	; 0x14ae <killHandlersNum+0x90>

			if (lHandler[i].msg == msg) {
    1436:	29 2f       	mov	r18, r25
    1438:	33 27       	eor	r19, r19
    143a:	27 fd       	sbrc	r18, 7
    143c:	30 95       	com	r19
    143e:	f9 01       	movw	r30, r18
    1440:	ee 0f       	add	r30, r30
    1442:	ff 1f       	adc	r31, r31
    1444:	e2 0f       	add	r30, r18
    1446:	f3 1f       	adc	r31, r19
    1448:	e7 55       	subi	r30, 0x57	; 87
    144a:	fe 4f       	sbci	r31, 0xFE	; 254
    144c:	20 81       	ld	r18, Z
    144e:	28 13       	cpse	r18, r24
    1450:	ef cf       	rjmp	.-34     	; 0x1430 <killHandlersNum+0x12>
    1452:	69 2f       	mov	r22, r25

				// сдвигаем все записи к началу списка, чтобы дырок не было
				for (j = i; j < numHandlers-1 ; j++) {
    1454:	26 2f       	mov	r18, r22
    1456:	33 27       	eor	r19, r19
    1458:	27 fd       	sbrc	r18, 7
    145a:	30 95       	com	r19
    145c:	40 91 a8 01 	lds	r20, 0x01A8
    1460:	50 e0       	ldi	r21, 0x00	; 0
    1462:	41 50       	subi	r20, 0x01	; 1
    1464:	51 09       	sbc	r21, r1
    1466:	24 17       	cp	r18, r20
    1468:	35 07       	cpc	r19, r21
    146a:	dc f4       	brge	.+54     	; 0x14a2 <killHandlersNum+0x84>
					lHandler[j].msg = lHandler[j + 1].msg;
    146c:	a9 01       	movw	r20, r18
    146e:	4f 5f       	subi	r20, 0xFF	; 255
    1470:	5f 4f       	sbci	r21, 0xFF	; 255
    1472:	da 01       	movw	r26, r20
    1474:	aa 0f       	add	r26, r26
    1476:	bb 1f       	adc	r27, r27
    1478:	a4 0f       	add	r26, r20
    147a:	b5 1f       	adc	r27, r21
    147c:	a7 55       	subi	r26, 0x57	; 87
    147e:	be 4f       	sbci	r27, 0xFE	; 254
    1480:	4c 91       	ld	r20, X
    1482:	f9 01       	movw	r30, r18
    1484:	ee 0f       	add	r30, r30
    1486:	ff 1f       	adc	r31, r31
    1488:	e2 0f       	add	r30, r18
    148a:	f3 1f       	adc	r31, r19
    148c:	e7 55       	subi	r30, 0x57	; 87
    148e:	fe 4f       	sbci	r31, 0xFE	; 254
    1490:	40 83       	st	Z, r20
					lHandler[j].hnd = lHandler[j + 1].hnd;
    1492:	11 96       	adiw	r26, 0x01	; 1
    1494:	2d 91       	ld	r18, X+
    1496:	3c 91       	ld	r19, X
    1498:	12 97       	sbiw	r26, 0x02	; 2
    149a:	32 83       	std	Z+2, r19	; 0x02
    149c:	21 83       	std	Z+1, r18	; 0x01
    149e:	6f 5f       	subi	r22, 0xFF	; 255
    14a0:	d9 cf       	rjmp	.-78     	; 0x1454 <killHandlersNum+0x36>
				}
				numHandlers--;
    14a2:	20 91 a8 01 	lds	r18, 0x01A8
    14a6:	21 50       	subi	r18, 0x01	; 1
    14a8:	20 93 a8 01 	sts	0x01A8, r18
    14ac:	c1 cf       	rjmp	.-126    	; 0x1430 <killHandlersNum+0x12>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    14ae:	7f bf       	out	0x3f, r23	; 63
    __asm__ volatile ("" ::: "memory");
    14b0:	08 95       	ret

000014b2 <sendMessage>:

// занести событие в очередь
// пример вызова: sendMessage(MSG_KEY_PRESS, KEY_MENU)
void sendMessage(msg_num msg, msg_par par) {

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    14b2:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    14b4:	f8 94       	cli
		hMesPointer = (hMesPointer + 1) & (maxMessages - 1); // сдвигаем указатель головы
    14b6:	20 91 a4 01 	lds	r18, 0x01A4
    14ba:	30 91 a5 01 	lds	r19, 0x01A5
    14be:	2f 5f       	subi	r18, 0xFF	; 255
    14c0:	3f 4f       	sbci	r19, 0xFF	; 255
    14c2:	2f 71       	andi	r18, 0x1F	; 31
    14c4:	33 27       	eor	r19, r19
    14c6:	30 93 a5 01 	sts	0x01A5, r19
    14ca:	20 93 a4 01 	sts	0x01A4, r18

		lMessage[hMesPointer].msg = msg; // заносим событие и параметр
    14ce:	e0 91 a4 01 	lds	r30, 0x01A4
    14d2:	f0 91 a5 01 	lds	r31, 0x01A5
    14d6:	ee 0f       	add	r30, r30
    14d8:	ff 1f       	adc	r31, r31
    14da:	e6 5c       	subi	r30, 0xC6	; 198
    14dc:	fd 4f       	sbci	r31, 0xFD	; 253
    14de:	80 83       	st	Z, r24
		lMessage[hMesPointer].par = par;
    14e0:	e0 91 a4 01 	lds	r30, 0x01A4
    14e4:	f0 91 a5 01 	lds	r31, 0x01A5
    14e8:	ee 0f       	add	r30, r30
    14ea:	ff 1f       	adc	r31, r31
    14ec:	e6 5c       	subi	r30, 0xC6	; 198
    14ee:	fd 4f       	sbci	r31, 0xFD	; 253
    14f0:	61 83       	std	Z+1, r22	; 0x01
		if (hMesPointer == lMesPointer) { // догнали начало очереди, убиваем необработанное сообытие
    14f2:	20 91 a4 01 	lds	r18, 0x01A4
    14f6:	30 91 a5 01 	lds	r19, 0x01A5
    14fa:	80 91 a6 01 	lds	r24, 0x01A6
    14fe:	90 91 a7 01 	lds	r25, 0x01A7
    1502:	28 17       	cp	r18, r24
    1504:	39 07       	cpc	r19, r25
    1506:	11 f0       	breq	.+4      	; 0x150c <sendMessage+0x5a>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1508:	4f bf       	out	0x3f, r20	; 63
    __asm__ volatile ("" ::: "memory");
    150a:	08 95       	ret
			lMesPointer = (lMesPointer + 1) & (maxMessages - 1);
    150c:	80 91 a6 01 	lds	r24, 0x01A6
    1510:	90 91 a7 01 	lds	r25, 0x01A7
    1514:	01 96       	adiw	r24, 0x01	; 1
    1516:	8f 71       	andi	r24, 0x1F	; 31
    1518:	99 27       	eor	r25, r25
    151a:	90 93 a7 01 	sts	0x01A7, r25
    151e:	80 93 a6 01 	sts	0x01A6, r24
    1522:	f2 cf       	rjmp	.-28     	; 0x1508 <sendMessage+0x56>

00001524 <dispatchMessage>:
	}
}
;

// обработка событий
void dispatchMessage(void) {
    1524:	1f 93       	push	r17
    1526:	cf 93       	push	r28
    1528:	df 93       	push	r29
	int8_t i;
	uint8_t res;
	msg_num msg;
	msg_par par;

	if (hMesPointer == lMesPointer) { // если пустая очередь - возврат
    152a:	20 91 a4 01 	lds	r18, 0x01A4
    152e:	30 91 a5 01 	lds	r19, 0x01A5
    1532:	80 91 a6 01 	lds	r24, 0x01A6
    1536:	90 91 a7 01 	lds	r25, 0x01A7
    153a:	28 17       	cp	r18, r24
    153c:	39 07       	cpc	r19, r25
    153e:	09 f4       	brne	.+2      	; 0x1542 <dispatchMessage+0x1e>
    1540:	40 c0       	rjmp	.+128    	; 0x15c2 <dispatchMessage+0x9e>
		return;
	}

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1542:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1544:	f8 94       	cli
		lMesPointer = (lMesPointer + 1) & (maxMessages - 1); // сдвинем указатель
    1546:	80 91 a6 01 	lds	r24, 0x01A6
    154a:	90 91 a7 01 	lds	r25, 0x01A7
    154e:	01 96       	adiw	r24, 0x01	; 1
    1550:	8f 71       	andi	r24, 0x1F	; 31
    1552:	99 27       	eor	r25, r25
    1554:	90 93 a7 01 	sts	0x01A7, r25
    1558:	80 93 a6 01 	sts	0x01A6, r24

		msg = lMessage[lMesPointer].msg;
    155c:	e0 91 a6 01 	lds	r30, 0x01A6
    1560:	f0 91 a7 01 	lds	r31, 0x01A7
    1564:	ee 0f       	add	r30, r30
    1566:	ff 1f       	adc	r31, r31
    1568:	e6 5c       	subi	r30, 0xC6	; 198
    156a:	fd 4f       	sbci	r31, 0xFD	; 253
    156c:	d0 81       	ld	r29, Z
		par = lMessage[lMesPointer].par;
    156e:	e0 91 a6 01 	lds	r30, 0x01A6
    1572:	f0 91 a7 01 	lds	r31, 0x01A7
    1576:	ee 0f       	add	r30, r30
    1578:	ff 1f       	adc	r31, r31
    157a:	e6 5c       	subi	r30, 0xC6	; 198
    157c:	fd 4f       	sbci	r31, 0xFD	; 253
    157e:	11 81       	ldd	r17, Z+1	; 0x01
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1580:	2f bf       	out	0x3f, r18	; 63
	}

	if (msg != 0 && numHandlers > 0) {
    1582:	dd 23       	and	r29, r29
    1584:	f1 f0       	breq	.+60     	; 0x15c2 <dispatchMessage+0x9e>
    1586:	80 91 a8 01 	lds	r24, 0x01A8
    158a:	88 23       	and	r24, r24
    158c:	d1 f0       	breq	.+52     	; 0x15c2 <dispatchMessage+0x9e>
		for (i = numHandlers - 1; i >= 0; i--) { // просматриваем обработчики с конца
    158e:	c0 91 a8 01 	lds	r28, 0x01A8
    1592:	c1 50       	subi	r28, 0x01	; 1
    1594:	c7 fd       	sbrc	r28, 7
    1596:	15 c0       	rjmp	.+42     	; 0x15c2 <dispatchMessage+0x9e>
			if (lHandler[i].msg == msg) { // последний занесенный имеет приоритет
    1598:	2c 2f       	mov	r18, r28
    159a:	33 27       	eor	r19, r19
    159c:	27 fd       	sbrc	r18, 7
    159e:	30 95       	com	r19
    15a0:	f9 01       	movw	r30, r18
    15a2:	ee 0f       	add	r30, r30
    15a4:	ff 1f       	adc	r31, r31
    15a6:	e2 0f       	add	r30, r18
    15a8:	f3 1f       	adc	r31, r19
    15aa:	e7 55       	subi	r30, 0x57	; 87
    15ac:	fe 4f       	sbci	r31, 0xFE	; 254
    15ae:	80 81       	ld	r24, Z
    15b0:	8d 13       	cpse	r24, r29
    15b2:	ef cf       	rjmp	.-34     	; 0x1592 <dispatchMessage+0x6e>
				res = lHandler[i].hnd(par); // вызываем обработчик
    15b4:	01 80       	ldd	r0, Z+1	; 0x01
    15b6:	f2 81       	ldd	r31, Z+2	; 0x02
    15b8:	e0 2d       	mov	r30, r0
    15ba:	81 2f       	mov	r24, r17
    15bc:	09 95       	icall
				if (res) { // если обработчик вернул 1, перываем обработку события
    15be:	88 23       	and	r24, r24
    15c0:	41 f3       	breq	.-48     	; 0x1592 <dispatchMessage+0x6e>
					break;
				}
			}
		}
	}
}
    15c2:	df 91       	pop	r29
    15c4:	cf 91       	pop	r28
    15c6:	1f 91       	pop	r17
    15c8:	08 95       	ret

000015ca <setTimer>:

// установить таймер
// пример вызова: setTimer(MSG_LCD_REFRESH, 0, 50);
void setTimer(msg_num msg, msg_par par, uint16_t time) {
	uint8_t i, firstFree;
	if (time == 0) {
    15ca:	41 15       	cp	r20, r1
    15cc:	51 05       	cpc	r21, r1
    15ce:	09 f4       	brne	.+2      	; 0x15d2 <setTimer+0x8>
		sendMessage(msg, par);
    15d0:	70 cf       	rjmp	.-288    	; 0x14b2 <sendMessage>
	} else {

		ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    15d2:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    15d4:	f8 94       	cli
			firstFree = numTimers + 1;

			for (i = 0; i <= numTimers; i++) { // ищем установленный таймер
				if (lTimer[i].msg == 0) {
    15d6:	26 e0       	ldi	r18, 0x06	; 6
	if (time == 0) {
		sendMessage(msg, par);
	} else {

		ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
			firstFree = numTimers + 1;
    15d8:	90 91 39 02 	lds	r25, 0x0239
    15dc:	9f 5f       	subi	r25, 0xFF	; 255

			for (i = 0; i <= numTimers; i++) { // ищем установленный таймер
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	e0 91 39 02 	lds	r30, 0x0239
    15e4:	e3 17       	cp	r30, r19
    15e6:	a0 f0       	brcs	.+40     	; 0x1610 <setTimer+0x46>
				if (lTimer[i].msg == 0) {
    15e8:	23 9f       	mul	r18, r19
    15ea:	f0 01       	movw	r30, r0
    15ec:	11 24       	eor	r1, r1
    15ee:	e7 52       	subi	r30, 0x27	; 39
    15f0:	fe 4f       	sbci	r31, 0xFE	; 254
    15f2:	a0 81       	ld	r26, Z
    15f4:	aa 23       	and	r26, r26
    15f6:	49 f0       	breq	.+18     	; 0x160a <setTimer+0x40>
					firstFree = i;
				} else { // если нашли - обновляем время
					if (lTimer[i].msg == msg) {
    15f8:	a0 81       	ld	r26, Z
    15fa:	a8 13       	cpse	r26, r24
    15fc:	07 c0       	rjmp	.+14     	; 0x160c <setTimer+0x42>
						lTimer[i].time = time;
    15fe:	53 83       	std	Z+3, r21	; 0x03
    1600:	42 83       	std	Z+2, r20	; 0x02
						lTimer[i].timeOrigin = time;
    1602:	55 83       	std	Z+5, r21	; 0x05
    1604:	44 83       	std	Z+4, r20	; 0x04
						lTimer[i].par = par;
    1606:	61 83       	std	Z+1, r22	; 0x01
    1608:	1b c0       	rjmp	.+54     	; 0x1640 <setTimer+0x76>
    160a:	93 2f       	mov	r25, r19
	} else {

		ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
			firstFree = numTimers + 1;

			for (i = 0; i <= numTimers; i++) { // ищем установленный таймер
    160c:	3f 5f       	subi	r19, 0xFF	; 255
    160e:	e8 cf       	rjmp	.-48     	; 0x15e0 <setTimer+0x16>
						firstFree = maxTimers + 1;
						break;
					}
				}
			}
			if (firstFree <= maxTimers) { // иначе - просто добавляем новый
    1610:	91 31       	cpi	r25, 0x11	; 17
    1612:	b0 f4       	brcc	.+44     	; 0x1640 <setTimer+0x76>
				lTimer[firstFree].msg = msg;
    1614:	29 9f       	mul	r18, r25
    1616:	90 01       	movw	r18, r0
    1618:	11 24       	eor	r1, r1
    161a:	27 52       	subi	r18, 0x27	; 39
    161c:	3e 4f       	sbci	r19, 0xFE	; 254
    161e:	f9 01       	movw	r30, r18
    1620:	81 93       	st	Z+, r24
				lTimer[firstFree].par = par;
    1622:	60 83       	st	Z, r22
				lTimer[firstFree].time = time;
    1624:	f9 01       	movw	r30, r18
    1626:	32 96       	adiw	r30, 0x02	; 2
    1628:	51 83       	std	Z+1, r21	; 0x01
    162a:	40 83       	st	Z, r20
				lTimer[firstFree].timeOrigin = time;
    162c:	f9 01       	movw	r30, r18
    162e:	34 96       	adiw	r30, 0x04	; 4
    1630:	51 83       	std	Z+1, r21	; 0x01
    1632:	40 83       	st	Z, r20

				if (firstFree > numTimers)
    1634:	80 91 39 02 	lds	r24, 0x0239
    1638:	89 17       	cp	r24, r25
    163a:	10 f4       	brcc	.+4      	; 0x1640 <setTimer+0x76>
					numTimers = firstFree;
    163c:	90 93 39 02 	sts	0x0239, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1640:	7f bf       	out	0x3f, r23	; 63
    __asm__ volatile ("" ::: "memory");
    1642:	08 95       	ret

00001644 <killTimer>:
// убить таймер
// особенность - убивает все установленные таймеры на данное событие,
// не зависимо от параметра события
void killTimer(msg_num msg) {
	uint8_t i;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1644:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1646:	f8 94       	cli
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
		for (i = 0; i < maxTimers; i++) {
			if (lTimer[i].msg == msg) {
    164c:	46 e0       	ldi	r20, 0x06	; 6
    164e:	42 9f       	mul	r20, r18
    1650:	f0 01       	movw	r30, r0
    1652:	43 9f       	mul	r20, r19
    1654:	f0 0d       	add	r31, r0
    1656:	11 24       	eor	r1, r1
    1658:	e7 52       	subi	r30, 0x27	; 39
    165a:	fe 4f       	sbci	r31, 0xFE	; 254
    165c:	50 81       	ld	r21, Z
    165e:	58 13       	cpse	r21, r24
    1660:	01 c0       	rjmp	.+2      	; 0x1664 <killTimer+0x20>
				lTimer[i].msg = 0;
    1662:	10 82       	st	Z, r1
    1664:	2f 5f       	subi	r18, 0xFF	; 255
    1666:	3f 4f       	sbci	r19, 0xFF	; 255
// особенность - убивает все установленные таймеры на данное событие,
// не зависимо от параметра события
void killTimer(msg_num msg) {
	uint8_t i;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		for (i = 0; i < maxTimers; i++) {
    1668:	20 31       	cpi	r18, 0x10	; 16
    166a:	31 05       	cpc	r19, r1
    166c:	81 f7       	brne	.-32     	; 0x164e <killTimer+0xa>
			if (lTimer[i].msg == msg) {
				lTimer[i].msg = 0;
			}
		}
		while ((lTimer[numTimers].msg == 0) && (numTimers > 0))
    166e:	26 e0       	ldi	r18, 0x06	; 6
    1670:	e0 91 39 02 	lds	r30, 0x0239
    1674:	2e 9f       	mul	r18, r30
    1676:	f0 01       	movw	r30, r0
    1678:	11 24       	eor	r1, r1
    167a:	e7 52       	subi	r30, 0x27	; 39
    167c:	fe 4f       	sbci	r31, 0xFE	; 254
    167e:	80 81       	ld	r24, Z
    1680:	81 11       	cpse	r24, r1
    1682:	0a c0       	rjmp	.+20     	; 0x1698 <killTimer+0x54>
    1684:	80 91 39 02 	lds	r24, 0x0239
    1688:	88 23       	and	r24, r24
    168a:	31 f0       	breq	.+12     	; 0x1698 <killTimer+0x54>
			numTimers--;
    168c:	80 91 39 02 	lds	r24, 0x0239
    1690:	81 50       	subi	r24, 0x01	; 1
    1692:	80 93 39 02 	sts	0x0239, r24
    1696:	ec cf       	rjmp	.-40     	; 0x1670 <killTimer+0x2c>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1698:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    169a:	08 95       	ret

0000169c <dispatchTimer>:
	}
}

// диспетчер таймеров

void dispatchTimer(void) {
    169c:	0f 93       	push	r16
    169e:	1f 93       	push	r17
    16a0:	cf 93       	push	r28
    16a2:	df 93       	push	r29
	uint8_t i;

	for (i = 0; i <= numTimers; i++) {
    16a4:	10 e0       	ldi	r17, 0x00	; 0
		if (lTimer[i].msg == 0)
    16a6:	06 e0       	ldi	r16, 0x06	; 6
// диспетчер таймеров

void dispatchTimer(void) {
	uint8_t i;

	for (i = 0; i <= numTimers; i++) {
    16a8:	80 91 39 02 	lds	r24, 0x0239
    16ac:	81 17       	cp	r24, r17
    16ae:	c8 f0       	brcs	.+50     	; 0x16e2 <dispatchTimer+0x46>
		if (lTimer[i].msg == 0)
    16b0:	01 9f       	mul	r16, r17
    16b2:	e0 01       	movw	r28, r0
    16b4:	11 24       	eor	r1, r1
    16b6:	c7 52       	subi	r28, 0x27	; 39
    16b8:	de 4f       	sbci	r29, 0xFE	; 254
    16ba:	88 81       	ld	r24, Y
    16bc:	88 23       	and	r24, r24
    16be:	79 f0       	breq	.+30     	; 0x16de <dispatchTimer+0x42>
			continue;

		if (lTimer[i].time > 0) { // если не пришло время
    16c0:	8a 81       	ldd	r24, Y+2	; 0x02
    16c2:	9b 81       	ldd	r25, Y+3	; 0x03
    16c4:	89 2b       	or	r24, r25
    16c6:	21 f0       	breq	.+8      	; 0x16d0 <dispatchTimer+0x34>
			lTimer[i].time--; // просто уменьшаем время
    16c8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ca:	9b 81       	ldd	r25, Y+3	; 0x03
    16cc:	01 97       	sbiw	r24, 0x01	; 1
    16ce:	05 c0       	rjmp	.+10     	; 0x16da <dispatchTimer+0x3e>
		} else {
			sendMessage(lTimer[i].msg, lTimer[i].par); // создаем событие
    16d0:	69 81       	ldd	r22, Y+1	; 0x01
    16d2:	88 81       	ld	r24, Y
    16d4:	ee de       	rcall	.-548    	; 0x14b2 <sendMessage>
			lTimer[i].time = lTimer[i].timeOrigin;
    16d6:	8c 81       	ldd	r24, Y+4	; 0x04
    16d8:	9d 81       	ldd	r25, Y+5	; 0x05
    16da:	9b 83       	std	Y+3, r25	; 0x03
    16dc:	8a 83       	std	Y+2, r24	; 0x02
// диспетчер таймеров

void dispatchTimer(void) {
	uint8_t i;

	for (i = 0; i <= numTimers; i++) {
    16de:	1f 5f       	subi	r17, 0xFF	; 255
    16e0:	e3 cf       	rjmp	.-58     	; 0x16a8 <dispatchTimer+0xc>
		} else {
			sendMessage(lTimer[i].msg, lTimer[i].par); // создаем событие
			lTimer[i].time = lTimer[i].timeOrigin;
		}
	}
}
    16e2:	df 91       	pop	r29
    16e4:	cf 91       	pop	r28
    16e6:	1f 91       	pop	r17
    16e8:	0f 91       	pop	r16
    16ea:	08 95       	ret

000016ec <initMessages>:

void initMessages() {
	numHandlers = 0;
    16ec:	10 92 a8 01 	sts	0x01A8, r1
	numTimers = 0;
    16f0:	10 92 39 02 	sts	0x0239, r1
	lMesPointer = 0;
    16f4:	10 92 a7 01 	sts	0x01A7, r1
    16f8:	10 92 a6 01 	sts	0x01A6, r1
	hMesPointer = 0;
    16fc:	10 92 a5 01 	sts	0x01A5, r1
    1700:	10 92 a4 01 	sts	0x01A4, r1

	// главный таймер
	TCCR2 = _BV(WGM21) | _BV(CS22) | _BV(CS20);     // делитель 128
    1704:	8d e0       	ldi	r24, 0x0D	; 13
    1706:	85 bd       	out	0x25, r24	; 37
	OCR2 = F_CPU / 204800; // период 600 мксек, вычисляется как 128/x
    1708:	87 e2       	ldi	r24, 0x27	; 39
    170a:	83 bd       	out	0x23, r24	; 35
	TIMSK |= _BV(OCIE2);
    170c:	89 b7       	in	r24, 0x39	; 57
    170e:	80 68       	ori	r24, 0x80	; 128
    1710:	89 bf       	out	0x39, r24	; 57
    1712:	08 95       	ret

00001714 <__vector_3>:
    1714:	1f 92       	push	r1
    1716:	0f 92       	push	r0
    1718:	0f b6       	in	r0, 0x3f	; 63
    171a:	0f 92       	push	r0
    171c:	11 24       	eor	r1, r1
    171e:	2f 93       	push	r18
    1720:	3f 93       	push	r19
    1722:	4f 93       	push	r20
    1724:	5f 93       	push	r21
    1726:	6f 93       	push	r22
    1728:	7f 93       	push	r23
    172a:	8f 93       	push	r24
    172c:	9f 93       	push	r25
    172e:	af 93       	push	r26
    1730:	bf 93       	push	r27
    1732:	ef 93       	push	r30
    1734:	ff 93       	push	r31
    1736:	b2 df       	rcall	.-156    	; 0x169c <dispatchTimer>
    1738:	ff 91       	pop	r31
    173a:	ef 91       	pop	r30
    173c:	bf 91       	pop	r27
    173e:	af 91       	pop	r26
    1740:	9f 91       	pop	r25
    1742:	8f 91       	pop	r24
    1744:	7f 91       	pop	r23
    1746:	6f 91       	pop	r22
    1748:	5f 91       	pop	r21
    174a:	4f 91       	pop	r20
    174c:	3f 91       	pop	r19
    174e:	2f 91       	pop	r18
    1750:	0f 90       	pop	r0
    1752:	0f be       	out	0x3f, r0	; 63
    1754:	0f 90       	pop	r0
    1756:	1f 90       	pop	r1
    1758:	18 95       	reti

0000175a <main>:
    175a:	8c e0       	ldi	r24, 0x0C	; 12
    175c:	43 d6       	rcall	.+3206   	; 0x23e4 <__data_load_end+0x402>
    175e:	2f d7       	rcall	.+3678   	; 0x25be <__data_load_end+0x5dc>
    1760:	8f d6       	rcall	.+3358   	; 0x2480 <__data_load_end+0x49e>
    1762:	84 b3       	in	r24, 0x14	; 20
    1764:	88 61       	ori	r24, 0x18	; 24
    1766:	84 bb       	out	0x14, r24	; 20
    1768:	86 e0       	ldi	r24, 0x06	; 6
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	c7 d2       	rcall	.+1422   	; 0x1cfc <__eerd_byte_m8>
    176e:	80 93 79 01 	sts	0x0179, r24
    1772:	84 e0       	ldi	r24, 0x04	; 4
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	ca d2       	rcall	.+1428   	; 0x1d0c <__eerd_word_m8>
    1778:	90 93 7b 01 	sts	0x017B, r25
    177c:	80 93 7a 01 	sts	0x017A, r24
    1780:	83 e0       	ldi	r24, 0x03	; 3
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	bb d2       	rcall	.+1398   	; 0x1cfc <__eerd_byte_m8>
    1786:	80 93 7c 01 	sts	0x017C, r24
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	be d2       	rcall	.+1404   	; 0x1d0c <__eerd_word_m8>
    1790:	90 93 8a 01 	sts	0x018A, r25
    1794:	80 93 89 01 	sts	0x0189, r24
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	af d2       	rcall	.+1374   	; 0x1cfc <__eerd_byte_m8>
    179e:	80 93 8b 01 	sts	0x018B, r24
    17a2:	60 91 8b 01 	lds	r22, 0x018B
    17a6:	61 50       	subi	r22, 0x01	; 1
    17a8:	89 e7       	ldi	r24, 0x79	; 121
    17aa:	c6 d6       	rcall	.+3468   	; 0x2538 <__data_load_end+0x556>
    17ac:	88 e7       	ldi	r24, 0x78	; 120
    17ae:	80 93 88 01 	sts	0x0188, r24
    17b2:	8d e9       	ldi	r24, 0x9D	; 157
    17b4:	80 93 7d 01 	sts	0x017D, r24
    17b8:	99 df       	rcall	.-206    	; 0x16ec <initMessages>
    17ba:	3d d5       	rcall	.+2682   	; 0x2236 <__data_load_end+0x254>
    17bc:	61 ec       	ldi	r22, 0xC1	; 193
    17be:	75 e0       	ldi	r23, 0x05	; 5
    17c0:	85 e0       	ldi	r24, 0x05	; 5
    17c2:	bc dd       	rcall	.-1160   	; 0x133c <setHandler>
    17c4:	f5 da       	rcall	.-2582   	; 0xdb0 <startMenuNull>
    17c6:	69 e1       	ldi	r22, 0x19	; 25
    17c8:	75 e0       	ldi	r23, 0x05	; 5
    17ca:	88 e0       	ldi	r24, 0x08	; 8
    17cc:	b7 dd       	rcall	.-1170   	; 0x133c <setHandler>
    17ce:	40 91 7a 01 	lds	r20, 0x017A
    17d2:	50 91 7b 01 	lds	r21, 0x017B
    17d6:	60 91 79 01 	lds	r22, 0x0179
    17da:	66 0f       	add	r22, r22
    17dc:	88 e0       	ldi	r24, 0x08	; 8
    17de:	f5 de       	rcall	.-534    	; 0x15ca <setTimer>
    17e0:	63 e0       	ldi	r22, 0x03	; 3
    17e2:	74 e0       	ldi	r23, 0x04	; 4
    17e4:	89 e0       	ldi	r24, 0x09	; 9
    17e6:	aa dd       	rcall	.-1196   	; 0x133c <setHandler>
    17e8:	6d e0       	ldi	r22, 0x0D	; 13
    17ea:	74 e0       	ldi	r23, 0x04	; 4
    17ec:	8a e0       	ldi	r24, 0x0A	; 10
    17ee:	a6 dd       	rcall	.-1204   	; 0x133c <setHandler>
    17f0:	60 e0       	ldi	r22, 0x00	; 0
    17f2:	89 e0       	ldi	r24, 0x09	; 9
    17f4:	5e de       	rcall	.-836    	; 0x14b2 <sendMessage>
    17f6:	6e e6       	ldi	r22, 0x6E	; 110
    17f8:	75 e0       	ldi	r23, 0x05	; 5
    17fa:	87 e0       	ldi	r24, 0x07	; 7
    17fc:	9f dd       	rcall	.-1218   	; 0x133c <setHandler>
    17fe:	40 e4       	ldi	r20, 0x40	; 64
    1800:	56 e0       	ldi	r21, 0x06	; 6
    1802:	60 e0       	ldi	r22, 0x00	; 0
    1804:	87 e0       	ldi	r24, 0x07	; 7
    1806:	e1 de       	rcall	.-574    	; 0x15ca <setTimer>
    1808:	6a eb       	ldi	r22, 0xBA	; 186
    180a:	74 e0       	ldi	r23, 0x04	; 4
    180c:	86 e0       	ldi	r24, 0x06	; 6
    180e:	96 dd       	rcall	.-1236   	; 0x133c <setHandler>
    1810:	40 e4       	ldi	r20, 0x40	; 64
    1812:	5f e1       	ldi	r21, 0x1F	; 31
    1814:	6d e4       	ldi	r22, 0x4D	; 77
    1816:	86 e0       	ldi	r24, 0x06	; 6
    1818:	d8 de       	rcall	.-592    	; 0x15ca <setTimer>
    181a:	63 e6       	ldi	r22, 0x63	; 99
    181c:	86 e0       	ldi	r24, 0x06	; 6
    181e:	49 de       	rcall	.-878    	; 0x14b2 <sendMessage>
    1820:	67 e2       	ldi	r22, 0x27	; 39
    1822:	74 e0       	ldi	r23, 0x04	; 4
    1824:	8c e0       	ldi	r24, 0x0C	; 12
    1826:	8a dd       	rcall	.-1260   	; 0x133c <setHandler>
    1828:	62 e1       	ldi	r22, 0x12	; 18
    182a:	74 e0       	ldi	r23, 0x04	; 4
    182c:	8b e0       	ldi	r24, 0x0B	; 11
    182e:	86 dd       	rcall	.-1268   	; 0x133c <setHandler>
    1830:	77 d4       	rcall	.+2286   	; 0x2120 <__data_load_end+0x13e>
    1832:	78 94       	sei
    1834:	77 de       	rcall	.-786    	; 0x1524 <dispatchMessage>
    1836:	fe cf       	rjmp	.-4      	; 0x1834 <main+0xda>

00001838 <__udivmodhi4>:
    1838:	aa 1b       	sub	r26, r26
    183a:	bb 1b       	sub	r27, r27
    183c:	51 e1       	ldi	r21, 0x11	; 17
    183e:	07 c0       	rjmp	.+14     	; 0x184e <__udivmodhi4_ep>

00001840 <__udivmodhi4_loop>:
    1840:	aa 1f       	adc	r26, r26
    1842:	bb 1f       	adc	r27, r27
    1844:	a6 17       	cp	r26, r22
    1846:	b7 07       	cpc	r27, r23
    1848:	10 f0       	brcs	.+4      	; 0x184e <__udivmodhi4_ep>
    184a:	a6 1b       	sub	r26, r22
    184c:	b7 0b       	sbc	r27, r23

0000184e <__udivmodhi4_ep>:
    184e:	88 1f       	adc	r24, r24
    1850:	99 1f       	adc	r25, r25
    1852:	5a 95       	dec	r21
    1854:	a9 f7       	brne	.-22     	; 0x1840 <__udivmodhi4_loop>
    1856:	80 95       	com	r24
    1858:	90 95       	com	r25
    185a:	bc 01       	movw	r22, r24
    185c:	cd 01       	movw	r24, r26
    185e:	08 95       	ret

00001860 <__floatunsisf>:
    1860:	e8 94       	clt
    1862:	09 c0       	rjmp	.+18     	; 0x1876 <__floatsisf+0x12>

00001864 <__floatsisf>:
    1864:	97 fb       	bst	r25, 7
    1866:	3e f4       	brtc	.+14     	; 0x1876 <__floatsisf+0x12>
    1868:	90 95       	com	r25
    186a:	80 95       	com	r24
    186c:	70 95       	com	r23
    186e:	61 95       	neg	r22
    1870:	7f 4f       	sbci	r23, 0xFF	; 255
    1872:	8f 4f       	sbci	r24, 0xFF	; 255
    1874:	9f 4f       	sbci	r25, 0xFF	; 255
    1876:	99 23       	and	r25, r25
    1878:	a9 f0       	breq	.+42     	; 0x18a4 <__floatsisf+0x40>
    187a:	f9 2f       	mov	r31, r25
    187c:	96 e9       	ldi	r25, 0x96	; 150
    187e:	bb 27       	eor	r27, r27
    1880:	93 95       	inc	r25
    1882:	f6 95       	lsr	r31
    1884:	87 95       	ror	r24
    1886:	77 95       	ror	r23
    1888:	67 95       	ror	r22
    188a:	b7 95       	ror	r27
    188c:	f1 11       	cpse	r31, r1
    188e:	f8 cf       	rjmp	.-16     	; 0x1880 <__floatsisf+0x1c>
    1890:	fa f4       	brpl	.+62     	; 0x18d0 <__floatsisf+0x6c>
    1892:	bb 0f       	add	r27, r27
    1894:	11 f4       	brne	.+4      	; 0x189a <__floatsisf+0x36>
    1896:	60 ff       	sbrs	r22, 0
    1898:	1b c0       	rjmp	.+54     	; 0x18d0 <__floatsisf+0x6c>
    189a:	6f 5f       	subi	r22, 0xFF	; 255
    189c:	7f 4f       	sbci	r23, 0xFF	; 255
    189e:	8f 4f       	sbci	r24, 0xFF	; 255
    18a0:	9f 4f       	sbci	r25, 0xFF	; 255
    18a2:	16 c0       	rjmp	.+44     	; 0x18d0 <__floatsisf+0x6c>
    18a4:	88 23       	and	r24, r24
    18a6:	11 f0       	breq	.+4      	; 0x18ac <__floatsisf+0x48>
    18a8:	96 e9       	ldi	r25, 0x96	; 150
    18aa:	11 c0       	rjmp	.+34     	; 0x18ce <__floatsisf+0x6a>
    18ac:	77 23       	and	r23, r23
    18ae:	21 f0       	breq	.+8      	; 0x18b8 <__floatsisf+0x54>
    18b0:	9e e8       	ldi	r25, 0x8E	; 142
    18b2:	87 2f       	mov	r24, r23
    18b4:	76 2f       	mov	r23, r22
    18b6:	05 c0       	rjmp	.+10     	; 0x18c2 <__floatsisf+0x5e>
    18b8:	66 23       	and	r22, r22
    18ba:	71 f0       	breq	.+28     	; 0x18d8 <__floatsisf+0x74>
    18bc:	96 e8       	ldi	r25, 0x86	; 134
    18be:	86 2f       	mov	r24, r22
    18c0:	70 e0       	ldi	r23, 0x00	; 0
    18c2:	60 e0       	ldi	r22, 0x00	; 0
    18c4:	2a f0       	brmi	.+10     	; 0x18d0 <__floatsisf+0x6c>
    18c6:	9a 95       	dec	r25
    18c8:	66 0f       	add	r22, r22
    18ca:	77 1f       	adc	r23, r23
    18cc:	88 1f       	adc	r24, r24
    18ce:	da f7       	brpl	.-10     	; 0x18c6 <__floatsisf+0x62>
    18d0:	88 0f       	add	r24, r24
    18d2:	96 95       	lsr	r25
    18d4:	87 95       	ror	r24
    18d6:	97 f9       	bld	r25, 7
    18d8:	08 95       	ret

000018da <__gesf2>:
    18da:	03 d0       	rcall	.+6      	; 0x18e2 <__fp_cmp>
    18dc:	08 f4       	brcc	.+2      	; 0x18e0 <__gesf2+0x6>
    18de:	8f ef       	ldi	r24, 0xFF	; 255
    18e0:	08 95       	ret

000018e2 <__fp_cmp>:
    18e2:	99 0f       	add	r25, r25
    18e4:	00 08       	sbc	r0, r0
    18e6:	55 0f       	add	r21, r21
    18e8:	aa 0b       	sbc	r26, r26
    18ea:	e0 e8       	ldi	r30, 0x80	; 128
    18ec:	fe ef       	ldi	r31, 0xFE	; 254
    18ee:	16 16       	cp	r1, r22
    18f0:	17 06       	cpc	r1, r23
    18f2:	e8 07       	cpc	r30, r24
    18f4:	f9 07       	cpc	r31, r25
    18f6:	c0 f0       	brcs	.+48     	; 0x1928 <__fp_cmp+0x46>
    18f8:	12 16       	cp	r1, r18
    18fa:	13 06       	cpc	r1, r19
    18fc:	e4 07       	cpc	r30, r20
    18fe:	f5 07       	cpc	r31, r21
    1900:	98 f0       	brcs	.+38     	; 0x1928 <__fp_cmp+0x46>
    1902:	62 1b       	sub	r22, r18
    1904:	73 0b       	sbc	r23, r19
    1906:	84 0b       	sbc	r24, r20
    1908:	95 0b       	sbc	r25, r21
    190a:	39 f4       	brne	.+14     	; 0x191a <__fp_cmp+0x38>
    190c:	0a 26       	eor	r0, r26
    190e:	61 f0       	breq	.+24     	; 0x1928 <__fp_cmp+0x46>
    1910:	23 2b       	or	r18, r19
    1912:	24 2b       	or	r18, r20
    1914:	25 2b       	or	r18, r21
    1916:	21 f4       	brne	.+8      	; 0x1920 <__fp_cmp+0x3e>
    1918:	08 95       	ret
    191a:	0a 26       	eor	r0, r26
    191c:	09 f4       	brne	.+2      	; 0x1920 <__fp_cmp+0x3e>
    191e:	a1 40       	sbci	r26, 0x01	; 1
    1920:	a6 95       	lsr	r26
    1922:	8f ef       	ldi	r24, 0xFF	; 255
    1924:	81 1d       	adc	r24, r1
    1926:	81 1d       	adc	r24, r1
    1928:	08 95       	ret

0000192a <strcpy>:
    192a:	fb 01       	movw	r30, r22
    192c:	dc 01       	movw	r26, r24
    192e:	01 90       	ld	r0, Z+
    1930:	0d 92       	st	X+, r0
    1932:	00 20       	and	r0, r0
    1934:	e1 f7       	brne	.-8      	; 0x192e <strcpy+0x4>
    1936:	08 95       	ret

00001938 <sprintf>:
    1938:	ae e0       	ldi	r26, 0x0E	; 14
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	e1 ea       	ldi	r30, 0xA1	; 161
    193e:	fc e0       	ldi	r31, 0x0C	; 12
    1940:	be c2       	rjmp	.+1404   	; 0x1ebe <__prologue_saves__+0x1c>
    1942:	0d 89       	ldd	r16, Y+21	; 0x15
    1944:	1e 89       	ldd	r17, Y+22	; 0x16
    1946:	86 e0       	ldi	r24, 0x06	; 6
    1948:	8c 83       	std	Y+4, r24	; 0x04
    194a:	1a 83       	std	Y+2, r17	; 0x02
    194c:	09 83       	std	Y+1, r16	; 0x01
    194e:	8f ef       	ldi	r24, 0xFF	; 255
    1950:	9f e7       	ldi	r25, 0x7F	; 127
    1952:	9e 83       	std	Y+6, r25	; 0x06
    1954:	8d 83       	std	Y+5, r24	; 0x05
    1956:	ae 01       	movw	r20, r28
    1958:	47 5e       	subi	r20, 0xE7	; 231
    195a:	5f 4f       	sbci	r21, 0xFF	; 255
    195c:	6f 89       	ldd	r22, Y+23	; 0x17
    195e:	78 8d       	ldd	r23, Y+24	; 0x18
    1960:	ce 01       	movw	r24, r28
    1962:	01 96       	adiw	r24, 0x01	; 1
    1964:	08 d0       	rcall	.+16     	; 0x1976 <vfprintf>
    1966:	ef 81       	ldd	r30, Y+7	; 0x07
    1968:	f8 85       	ldd	r31, Y+8	; 0x08
    196a:	e0 0f       	add	r30, r16
    196c:	f1 1f       	adc	r31, r17
    196e:	10 82       	st	Z, r1
    1970:	2e 96       	adiw	r28, 0x0e	; 14
    1972:	e4 e0       	ldi	r30, 0x04	; 4
    1974:	c0 c2       	rjmp	.+1408   	; 0x1ef6 <__epilogue_restores__+0x1c>

00001976 <vfprintf>:
    1976:	ac e0       	ldi	r26, 0x0C	; 12
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	e0 ec       	ldi	r30, 0xC0	; 192
    197c:	fc e0       	ldi	r31, 0x0C	; 12
    197e:	91 c2       	rjmp	.+1314   	; 0x1ea2 <__prologue_saves__>
    1980:	7c 01       	movw	r14, r24
    1982:	6b 01       	movw	r12, r22
    1984:	8a 01       	movw	r16, r20
    1986:	fc 01       	movw	r30, r24
    1988:	17 82       	std	Z+7, r1	; 0x07
    198a:	16 82       	std	Z+6, r1	; 0x06
    198c:	83 81       	ldd	r24, Z+3	; 0x03
    198e:	81 ff       	sbrs	r24, 1
    1990:	b0 c1       	rjmp	.+864    	; 0x1cf2 <vfprintf+0x37c>
    1992:	ce 01       	movw	r24, r28
    1994:	01 96       	adiw	r24, 0x01	; 1
    1996:	4c 01       	movw	r8, r24
    1998:	f7 01       	movw	r30, r14
    199a:	93 81       	ldd	r25, Z+3	; 0x03
    199c:	f6 01       	movw	r30, r12
    199e:	93 fd       	sbrc	r25, 3
    19a0:	85 91       	lpm	r24, Z+
    19a2:	93 ff       	sbrs	r25, 3
    19a4:	81 91       	ld	r24, Z+
    19a6:	6f 01       	movw	r12, r30
    19a8:	88 23       	and	r24, r24
    19aa:	09 f4       	brne	.+2      	; 0x19ae <vfprintf+0x38>
    19ac:	9e c1       	rjmp	.+828    	; 0x1cea <vfprintf+0x374>
    19ae:	85 32       	cpi	r24, 0x25	; 37
    19b0:	39 f4       	brne	.+14     	; 0x19c0 <vfprintf+0x4a>
    19b2:	93 fd       	sbrc	r25, 3
    19b4:	85 91       	lpm	r24, Z+
    19b6:	93 ff       	sbrs	r25, 3
    19b8:	81 91       	ld	r24, Z+
    19ba:	6f 01       	movw	r12, r30
    19bc:	85 32       	cpi	r24, 0x25	; 37
    19be:	21 f4       	brne	.+8      	; 0x19c8 <vfprintf+0x52>
    19c0:	b7 01       	movw	r22, r14
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	ce d1       	rcall	.+924    	; 0x1d62 <fputc>
    19c6:	e8 cf       	rjmp	.-48     	; 0x1998 <vfprintf+0x22>
    19c8:	51 2c       	mov	r5, r1
    19ca:	31 2c       	mov	r3, r1
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	20 32       	cpi	r18, 0x20	; 32
    19d0:	a0 f4       	brcc	.+40     	; 0x19fa <vfprintf+0x84>
    19d2:	8b 32       	cpi	r24, 0x2B	; 43
    19d4:	69 f0       	breq	.+26     	; 0x19f0 <vfprintf+0x7a>
    19d6:	30 f4       	brcc	.+12     	; 0x19e4 <vfprintf+0x6e>
    19d8:	80 32       	cpi	r24, 0x20	; 32
    19da:	59 f0       	breq	.+22     	; 0x19f2 <vfprintf+0x7c>
    19dc:	83 32       	cpi	r24, 0x23	; 35
    19de:	69 f4       	brne	.+26     	; 0x19fa <vfprintf+0x84>
    19e0:	20 61       	ori	r18, 0x10	; 16
    19e2:	2c c0       	rjmp	.+88     	; 0x1a3c <vfprintf+0xc6>
    19e4:	8d 32       	cpi	r24, 0x2D	; 45
    19e6:	39 f0       	breq	.+14     	; 0x19f6 <vfprintf+0x80>
    19e8:	80 33       	cpi	r24, 0x30	; 48
    19ea:	39 f4       	brne	.+14     	; 0x19fa <vfprintf+0x84>
    19ec:	21 60       	ori	r18, 0x01	; 1
    19ee:	26 c0       	rjmp	.+76     	; 0x1a3c <vfprintf+0xc6>
    19f0:	22 60       	ori	r18, 0x02	; 2
    19f2:	24 60       	ori	r18, 0x04	; 4
    19f4:	23 c0       	rjmp	.+70     	; 0x1a3c <vfprintf+0xc6>
    19f6:	28 60       	ori	r18, 0x08	; 8
    19f8:	21 c0       	rjmp	.+66     	; 0x1a3c <vfprintf+0xc6>
    19fa:	27 fd       	sbrc	r18, 7
    19fc:	27 c0       	rjmp	.+78     	; 0x1a4c <vfprintf+0xd6>
    19fe:	30 ed       	ldi	r19, 0xD0	; 208
    1a00:	38 0f       	add	r19, r24
    1a02:	3a 30       	cpi	r19, 0x0A	; 10
    1a04:	78 f4       	brcc	.+30     	; 0x1a24 <vfprintf+0xae>
    1a06:	26 ff       	sbrs	r18, 6
    1a08:	06 c0       	rjmp	.+12     	; 0x1a16 <vfprintf+0xa0>
    1a0a:	fa e0       	ldi	r31, 0x0A	; 10
    1a0c:	5f 9e       	mul	r5, r31
    1a0e:	30 0d       	add	r19, r0
    1a10:	11 24       	eor	r1, r1
    1a12:	53 2e       	mov	r5, r19
    1a14:	13 c0       	rjmp	.+38     	; 0x1a3c <vfprintf+0xc6>
    1a16:	8a e0       	ldi	r24, 0x0A	; 10
    1a18:	38 9e       	mul	r3, r24
    1a1a:	30 0d       	add	r19, r0
    1a1c:	11 24       	eor	r1, r1
    1a1e:	33 2e       	mov	r3, r19
    1a20:	20 62       	ori	r18, 0x20	; 32
    1a22:	0c c0       	rjmp	.+24     	; 0x1a3c <vfprintf+0xc6>
    1a24:	8e 32       	cpi	r24, 0x2E	; 46
    1a26:	21 f4       	brne	.+8      	; 0x1a30 <vfprintf+0xba>
    1a28:	26 fd       	sbrc	r18, 6
    1a2a:	5f c1       	rjmp	.+702    	; 0x1cea <vfprintf+0x374>
    1a2c:	20 64       	ori	r18, 0x40	; 64
    1a2e:	06 c0       	rjmp	.+12     	; 0x1a3c <vfprintf+0xc6>
    1a30:	8c 36       	cpi	r24, 0x6C	; 108
    1a32:	11 f4       	brne	.+4      	; 0x1a38 <vfprintf+0xc2>
    1a34:	20 68       	ori	r18, 0x80	; 128
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <vfprintf+0xc6>
    1a38:	88 36       	cpi	r24, 0x68	; 104
    1a3a:	41 f4       	brne	.+16     	; 0x1a4c <vfprintf+0xd6>
    1a3c:	f6 01       	movw	r30, r12
    1a3e:	93 fd       	sbrc	r25, 3
    1a40:	85 91       	lpm	r24, Z+
    1a42:	93 ff       	sbrs	r25, 3
    1a44:	81 91       	ld	r24, Z+
    1a46:	6f 01       	movw	r12, r30
    1a48:	81 11       	cpse	r24, r1
    1a4a:	c1 cf       	rjmp	.-126    	; 0x19ce <vfprintf+0x58>
    1a4c:	98 2f       	mov	r25, r24
    1a4e:	9f 7d       	andi	r25, 0xDF	; 223
    1a50:	95 54       	subi	r25, 0x45	; 69
    1a52:	93 30       	cpi	r25, 0x03	; 3
    1a54:	28 f4       	brcc	.+10     	; 0x1a60 <vfprintf+0xea>
    1a56:	0c 5f       	subi	r16, 0xFC	; 252
    1a58:	1f 4f       	sbci	r17, 0xFF	; 255
    1a5a:	ff e3       	ldi	r31, 0x3F	; 63
    1a5c:	f9 83       	std	Y+1, r31	; 0x01
    1a5e:	0d c0       	rjmp	.+26     	; 0x1a7a <vfprintf+0x104>
    1a60:	83 36       	cpi	r24, 0x63	; 99
    1a62:	31 f0       	breq	.+12     	; 0x1a70 <vfprintf+0xfa>
    1a64:	83 37       	cpi	r24, 0x73	; 115
    1a66:	71 f0       	breq	.+28     	; 0x1a84 <vfprintf+0x10e>
    1a68:	83 35       	cpi	r24, 0x53	; 83
    1a6a:	09 f0       	breq	.+2      	; 0x1a6e <vfprintf+0xf8>
    1a6c:	57 c0       	rjmp	.+174    	; 0x1b1c <vfprintf+0x1a6>
    1a6e:	21 c0       	rjmp	.+66     	; 0x1ab2 <vfprintf+0x13c>
    1a70:	f8 01       	movw	r30, r16
    1a72:	80 81       	ld	r24, Z
    1a74:	89 83       	std	Y+1, r24	; 0x01
    1a76:	0e 5f       	subi	r16, 0xFE	; 254
    1a78:	1f 4f       	sbci	r17, 0xFF	; 255
    1a7a:	44 24       	eor	r4, r4
    1a7c:	43 94       	inc	r4
    1a7e:	51 2c       	mov	r5, r1
    1a80:	54 01       	movw	r10, r8
    1a82:	14 c0       	rjmp	.+40     	; 0x1aac <vfprintf+0x136>
    1a84:	38 01       	movw	r6, r16
    1a86:	f2 e0       	ldi	r31, 0x02	; 2
    1a88:	6f 0e       	add	r6, r31
    1a8a:	71 1c       	adc	r7, r1
    1a8c:	f8 01       	movw	r30, r16
    1a8e:	a0 80       	ld	r10, Z
    1a90:	b1 80       	ldd	r11, Z+1	; 0x01
    1a92:	26 ff       	sbrs	r18, 6
    1a94:	03 c0       	rjmp	.+6      	; 0x1a9c <vfprintf+0x126>
    1a96:	65 2d       	mov	r22, r5
    1a98:	70 e0       	ldi	r23, 0x00	; 0
    1a9a:	02 c0       	rjmp	.+4      	; 0x1aa0 <vfprintf+0x12a>
    1a9c:	6f ef       	ldi	r22, 0xFF	; 255
    1a9e:	7f ef       	ldi	r23, 0xFF	; 255
    1aa0:	c5 01       	movw	r24, r10
    1aa2:	2c 87       	std	Y+12, r18	; 0x0c
    1aa4:	53 d1       	rcall	.+678    	; 0x1d4c <strnlen>
    1aa6:	2c 01       	movw	r4, r24
    1aa8:	83 01       	movw	r16, r6
    1aaa:	2c 85       	ldd	r18, Y+12	; 0x0c
    1aac:	2f 77       	andi	r18, 0x7F	; 127
    1aae:	22 2e       	mov	r2, r18
    1ab0:	16 c0       	rjmp	.+44     	; 0x1ade <vfprintf+0x168>
    1ab2:	38 01       	movw	r6, r16
    1ab4:	f2 e0       	ldi	r31, 0x02	; 2
    1ab6:	6f 0e       	add	r6, r31
    1ab8:	71 1c       	adc	r7, r1
    1aba:	f8 01       	movw	r30, r16
    1abc:	a0 80       	ld	r10, Z
    1abe:	b1 80       	ldd	r11, Z+1	; 0x01
    1ac0:	26 ff       	sbrs	r18, 6
    1ac2:	03 c0       	rjmp	.+6      	; 0x1aca <vfprintf+0x154>
    1ac4:	65 2d       	mov	r22, r5
    1ac6:	70 e0       	ldi	r23, 0x00	; 0
    1ac8:	02 c0       	rjmp	.+4      	; 0x1ace <vfprintf+0x158>
    1aca:	6f ef       	ldi	r22, 0xFF	; 255
    1acc:	7f ef       	ldi	r23, 0xFF	; 255
    1ace:	c5 01       	movw	r24, r10
    1ad0:	2c 87       	std	Y+12, r18	; 0x0c
    1ad2:	31 d1       	rcall	.+610    	; 0x1d36 <strnlen_P>
    1ad4:	2c 01       	movw	r4, r24
    1ad6:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ad8:	20 68       	ori	r18, 0x80	; 128
    1ada:	22 2e       	mov	r2, r18
    1adc:	83 01       	movw	r16, r6
    1ade:	23 fc       	sbrc	r2, 3
    1ae0:	19 c0       	rjmp	.+50     	; 0x1b14 <vfprintf+0x19e>
    1ae2:	83 2d       	mov	r24, r3
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	48 16       	cp	r4, r24
    1ae8:	59 06       	cpc	r5, r25
    1aea:	a0 f4       	brcc	.+40     	; 0x1b14 <vfprintf+0x19e>
    1aec:	b7 01       	movw	r22, r14
    1aee:	80 e2       	ldi	r24, 0x20	; 32
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	37 d1       	rcall	.+622    	; 0x1d62 <fputc>
    1af4:	3a 94       	dec	r3
    1af6:	f5 cf       	rjmp	.-22     	; 0x1ae2 <vfprintf+0x16c>
    1af8:	f5 01       	movw	r30, r10
    1afa:	27 fc       	sbrc	r2, 7
    1afc:	85 91       	lpm	r24, Z+
    1afe:	27 fe       	sbrs	r2, 7
    1b00:	81 91       	ld	r24, Z+
    1b02:	5f 01       	movw	r10, r30
    1b04:	b7 01       	movw	r22, r14
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	2c d1       	rcall	.+600    	; 0x1d62 <fputc>
    1b0a:	31 10       	cpse	r3, r1
    1b0c:	3a 94       	dec	r3
    1b0e:	f1 e0       	ldi	r31, 0x01	; 1
    1b10:	4f 1a       	sub	r4, r31
    1b12:	51 08       	sbc	r5, r1
    1b14:	41 14       	cp	r4, r1
    1b16:	51 04       	cpc	r5, r1
    1b18:	79 f7       	brne	.-34     	; 0x1af8 <vfprintf+0x182>
    1b1a:	de c0       	rjmp	.+444    	; 0x1cd8 <vfprintf+0x362>
    1b1c:	84 36       	cpi	r24, 0x64	; 100
    1b1e:	11 f0       	breq	.+4      	; 0x1b24 <vfprintf+0x1ae>
    1b20:	89 36       	cpi	r24, 0x69	; 105
    1b22:	31 f5       	brne	.+76     	; 0x1b70 <vfprintf+0x1fa>
    1b24:	f8 01       	movw	r30, r16
    1b26:	27 ff       	sbrs	r18, 7
    1b28:	07 c0       	rjmp	.+14     	; 0x1b38 <vfprintf+0x1c2>
    1b2a:	60 81       	ld	r22, Z
    1b2c:	71 81       	ldd	r23, Z+1	; 0x01
    1b2e:	82 81       	ldd	r24, Z+2	; 0x02
    1b30:	93 81       	ldd	r25, Z+3	; 0x03
    1b32:	0c 5f       	subi	r16, 0xFC	; 252
    1b34:	1f 4f       	sbci	r17, 0xFF	; 255
    1b36:	08 c0       	rjmp	.+16     	; 0x1b48 <vfprintf+0x1d2>
    1b38:	60 81       	ld	r22, Z
    1b3a:	71 81       	ldd	r23, Z+1	; 0x01
    1b3c:	88 27       	eor	r24, r24
    1b3e:	77 fd       	sbrc	r23, 7
    1b40:	80 95       	com	r24
    1b42:	98 2f       	mov	r25, r24
    1b44:	0e 5f       	subi	r16, 0xFE	; 254
    1b46:	1f 4f       	sbci	r17, 0xFF	; 255
    1b48:	2f 76       	andi	r18, 0x6F	; 111
    1b4a:	b2 2e       	mov	r11, r18
    1b4c:	97 ff       	sbrs	r25, 7
    1b4e:	09 c0       	rjmp	.+18     	; 0x1b62 <vfprintf+0x1ec>
    1b50:	90 95       	com	r25
    1b52:	80 95       	com	r24
    1b54:	70 95       	com	r23
    1b56:	61 95       	neg	r22
    1b58:	7f 4f       	sbci	r23, 0xFF	; 255
    1b5a:	8f 4f       	sbci	r24, 0xFF	; 255
    1b5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b5e:	20 68       	ori	r18, 0x80	; 128
    1b60:	b2 2e       	mov	r11, r18
    1b62:	2a e0       	ldi	r18, 0x0A	; 10
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	a4 01       	movw	r20, r8
    1b68:	2e d1       	rcall	.+604    	; 0x1dc6 <__ultoa_invert>
    1b6a:	a8 2e       	mov	r10, r24
    1b6c:	a8 18       	sub	r10, r8
    1b6e:	43 c0       	rjmp	.+134    	; 0x1bf6 <vfprintf+0x280>
    1b70:	85 37       	cpi	r24, 0x75	; 117
    1b72:	29 f4       	brne	.+10     	; 0x1b7e <vfprintf+0x208>
    1b74:	2f 7e       	andi	r18, 0xEF	; 239
    1b76:	b2 2e       	mov	r11, r18
    1b78:	2a e0       	ldi	r18, 0x0A	; 10
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	25 c0       	rjmp	.+74     	; 0x1bc8 <vfprintf+0x252>
    1b7e:	f2 2f       	mov	r31, r18
    1b80:	f9 7f       	andi	r31, 0xF9	; 249
    1b82:	bf 2e       	mov	r11, r31
    1b84:	8f 36       	cpi	r24, 0x6F	; 111
    1b86:	c1 f0       	breq	.+48     	; 0x1bb8 <vfprintf+0x242>
    1b88:	18 f4       	brcc	.+6      	; 0x1b90 <vfprintf+0x21a>
    1b8a:	88 35       	cpi	r24, 0x58	; 88
    1b8c:	79 f0       	breq	.+30     	; 0x1bac <vfprintf+0x236>
    1b8e:	ad c0       	rjmp	.+346    	; 0x1cea <vfprintf+0x374>
    1b90:	80 37       	cpi	r24, 0x70	; 112
    1b92:	19 f0       	breq	.+6      	; 0x1b9a <vfprintf+0x224>
    1b94:	88 37       	cpi	r24, 0x78	; 120
    1b96:	21 f0       	breq	.+8      	; 0x1ba0 <vfprintf+0x22a>
    1b98:	a8 c0       	rjmp	.+336    	; 0x1cea <vfprintf+0x374>
    1b9a:	2f 2f       	mov	r18, r31
    1b9c:	20 61       	ori	r18, 0x10	; 16
    1b9e:	b2 2e       	mov	r11, r18
    1ba0:	b4 fe       	sbrs	r11, 4
    1ba2:	0d c0       	rjmp	.+26     	; 0x1bbe <vfprintf+0x248>
    1ba4:	8b 2d       	mov	r24, r11
    1ba6:	84 60       	ori	r24, 0x04	; 4
    1ba8:	b8 2e       	mov	r11, r24
    1baa:	09 c0       	rjmp	.+18     	; 0x1bbe <vfprintf+0x248>
    1bac:	24 ff       	sbrs	r18, 4
    1bae:	0a c0       	rjmp	.+20     	; 0x1bc4 <vfprintf+0x24e>
    1bb0:	9f 2f       	mov	r25, r31
    1bb2:	96 60       	ori	r25, 0x06	; 6
    1bb4:	b9 2e       	mov	r11, r25
    1bb6:	06 c0       	rjmp	.+12     	; 0x1bc4 <vfprintf+0x24e>
    1bb8:	28 e0       	ldi	r18, 0x08	; 8
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	05 c0       	rjmp	.+10     	; 0x1bc8 <vfprintf+0x252>
    1bbe:	20 e1       	ldi	r18, 0x10	; 16
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	02 c0       	rjmp	.+4      	; 0x1bc8 <vfprintf+0x252>
    1bc4:	20 e1       	ldi	r18, 0x10	; 16
    1bc6:	32 e0       	ldi	r19, 0x02	; 2
    1bc8:	f8 01       	movw	r30, r16
    1bca:	b7 fe       	sbrs	r11, 7
    1bcc:	07 c0       	rjmp	.+14     	; 0x1bdc <vfprintf+0x266>
    1bce:	60 81       	ld	r22, Z
    1bd0:	71 81       	ldd	r23, Z+1	; 0x01
    1bd2:	82 81       	ldd	r24, Z+2	; 0x02
    1bd4:	93 81       	ldd	r25, Z+3	; 0x03
    1bd6:	0c 5f       	subi	r16, 0xFC	; 252
    1bd8:	1f 4f       	sbci	r17, 0xFF	; 255
    1bda:	06 c0       	rjmp	.+12     	; 0x1be8 <vfprintf+0x272>
    1bdc:	60 81       	ld	r22, Z
    1bde:	71 81       	ldd	r23, Z+1	; 0x01
    1be0:	80 e0       	ldi	r24, 0x00	; 0
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	0e 5f       	subi	r16, 0xFE	; 254
    1be6:	1f 4f       	sbci	r17, 0xFF	; 255
    1be8:	a4 01       	movw	r20, r8
    1bea:	ed d0       	rcall	.+474    	; 0x1dc6 <__ultoa_invert>
    1bec:	a8 2e       	mov	r10, r24
    1bee:	a8 18       	sub	r10, r8
    1bf0:	fb 2d       	mov	r31, r11
    1bf2:	ff 77       	andi	r31, 0x7F	; 127
    1bf4:	bf 2e       	mov	r11, r31
    1bf6:	b6 fe       	sbrs	r11, 6
    1bf8:	0b c0       	rjmp	.+22     	; 0x1c10 <vfprintf+0x29a>
    1bfa:	2b 2d       	mov	r18, r11
    1bfc:	2e 7f       	andi	r18, 0xFE	; 254
    1bfe:	a5 14       	cp	r10, r5
    1c00:	50 f4       	brcc	.+20     	; 0x1c16 <vfprintf+0x2a0>
    1c02:	b4 fe       	sbrs	r11, 4
    1c04:	0a c0       	rjmp	.+20     	; 0x1c1a <vfprintf+0x2a4>
    1c06:	b2 fc       	sbrc	r11, 2
    1c08:	08 c0       	rjmp	.+16     	; 0x1c1a <vfprintf+0x2a4>
    1c0a:	2b 2d       	mov	r18, r11
    1c0c:	2e 7e       	andi	r18, 0xEE	; 238
    1c0e:	05 c0       	rjmp	.+10     	; 0x1c1a <vfprintf+0x2a4>
    1c10:	7a 2c       	mov	r7, r10
    1c12:	2b 2d       	mov	r18, r11
    1c14:	03 c0       	rjmp	.+6      	; 0x1c1c <vfprintf+0x2a6>
    1c16:	7a 2c       	mov	r7, r10
    1c18:	01 c0       	rjmp	.+2      	; 0x1c1c <vfprintf+0x2a6>
    1c1a:	75 2c       	mov	r7, r5
    1c1c:	24 ff       	sbrs	r18, 4
    1c1e:	0d c0       	rjmp	.+26     	; 0x1c3a <vfprintf+0x2c4>
    1c20:	fe 01       	movw	r30, r28
    1c22:	ea 0d       	add	r30, r10
    1c24:	f1 1d       	adc	r31, r1
    1c26:	80 81       	ld	r24, Z
    1c28:	80 33       	cpi	r24, 0x30	; 48
    1c2a:	11 f4       	brne	.+4      	; 0x1c30 <vfprintf+0x2ba>
    1c2c:	29 7e       	andi	r18, 0xE9	; 233
    1c2e:	09 c0       	rjmp	.+18     	; 0x1c42 <vfprintf+0x2cc>
    1c30:	22 ff       	sbrs	r18, 2
    1c32:	06 c0       	rjmp	.+12     	; 0x1c40 <vfprintf+0x2ca>
    1c34:	73 94       	inc	r7
    1c36:	73 94       	inc	r7
    1c38:	04 c0       	rjmp	.+8      	; 0x1c42 <vfprintf+0x2cc>
    1c3a:	82 2f       	mov	r24, r18
    1c3c:	86 78       	andi	r24, 0x86	; 134
    1c3e:	09 f0       	breq	.+2      	; 0x1c42 <vfprintf+0x2cc>
    1c40:	73 94       	inc	r7
    1c42:	23 fd       	sbrc	r18, 3
    1c44:	12 c0       	rjmp	.+36     	; 0x1c6a <vfprintf+0x2f4>
    1c46:	20 ff       	sbrs	r18, 0
    1c48:	06 c0       	rjmp	.+12     	; 0x1c56 <vfprintf+0x2e0>
    1c4a:	5a 2c       	mov	r5, r10
    1c4c:	73 14       	cp	r7, r3
    1c4e:	18 f4       	brcc	.+6      	; 0x1c56 <vfprintf+0x2e0>
    1c50:	53 0c       	add	r5, r3
    1c52:	57 18       	sub	r5, r7
    1c54:	73 2c       	mov	r7, r3
    1c56:	73 14       	cp	r7, r3
    1c58:	60 f4       	brcc	.+24     	; 0x1c72 <vfprintf+0x2fc>
    1c5a:	b7 01       	movw	r22, r14
    1c5c:	80 e2       	ldi	r24, 0x20	; 32
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	2c 87       	std	Y+12, r18	; 0x0c
    1c62:	7f d0       	rcall	.+254    	; 0x1d62 <fputc>
    1c64:	73 94       	inc	r7
    1c66:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c68:	f6 cf       	rjmp	.-20     	; 0x1c56 <vfprintf+0x2e0>
    1c6a:	73 14       	cp	r7, r3
    1c6c:	10 f4       	brcc	.+4      	; 0x1c72 <vfprintf+0x2fc>
    1c6e:	37 18       	sub	r3, r7
    1c70:	01 c0       	rjmp	.+2      	; 0x1c74 <vfprintf+0x2fe>
    1c72:	31 2c       	mov	r3, r1
    1c74:	24 ff       	sbrs	r18, 4
    1c76:	11 c0       	rjmp	.+34     	; 0x1c9a <vfprintf+0x324>
    1c78:	b7 01       	movw	r22, r14
    1c7a:	80 e3       	ldi	r24, 0x30	; 48
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	2c 87       	std	Y+12, r18	; 0x0c
    1c80:	70 d0       	rcall	.+224    	; 0x1d62 <fputc>
    1c82:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c84:	22 ff       	sbrs	r18, 2
    1c86:	16 c0       	rjmp	.+44     	; 0x1cb4 <vfprintf+0x33e>
    1c88:	21 ff       	sbrs	r18, 1
    1c8a:	03 c0       	rjmp	.+6      	; 0x1c92 <vfprintf+0x31c>
    1c8c:	88 e5       	ldi	r24, 0x58	; 88
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	02 c0       	rjmp	.+4      	; 0x1c96 <vfprintf+0x320>
    1c92:	88 e7       	ldi	r24, 0x78	; 120
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	b7 01       	movw	r22, r14
    1c98:	0c c0       	rjmp	.+24     	; 0x1cb2 <vfprintf+0x33c>
    1c9a:	82 2f       	mov	r24, r18
    1c9c:	86 78       	andi	r24, 0x86	; 134
    1c9e:	51 f0       	breq	.+20     	; 0x1cb4 <vfprintf+0x33e>
    1ca0:	21 fd       	sbrc	r18, 1
    1ca2:	02 c0       	rjmp	.+4      	; 0x1ca8 <vfprintf+0x332>
    1ca4:	80 e2       	ldi	r24, 0x20	; 32
    1ca6:	01 c0       	rjmp	.+2      	; 0x1caa <vfprintf+0x334>
    1ca8:	8b e2       	ldi	r24, 0x2B	; 43
    1caa:	27 fd       	sbrc	r18, 7
    1cac:	8d e2       	ldi	r24, 0x2D	; 45
    1cae:	b7 01       	movw	r22, r14
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	57 d0       	rcall	.+174    	; 0x1d62 <fputc>
    1cb4:	a5 14       	cp	r10, r5
    1cb6:	30 f4       	brcc	.+12     	; 0x1cc4 <vfprintf+0x34e>
    1cb8:	b7 01       	movw	r22, r14
    1cba:	80 e3       	ldi	r24, 0x30	; 48
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	51 d0       	rcall	.+162    	; 0x1d62 <fputc>
    1cc0:	5a 94       	dec	r5
    1cc2:	f8 cf       	rjmp	.-16     	; 0x1cb4 <vfprintf+0x33e>
    1cc4:	aa 94       	dec	r10
    1cc6:	f4 01       	movw	r30, r8
    1cc8:	ea 0d       	add	r30, r10
    1cca:	f1 1d       	adc	r31, r1
    1ccc:	80 81       	ld	r24, Z
    1cce:	b7 01       	movw	r22, r14
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	47 d0       	rcall	.+142    	; 0x1d62 <fputc>
    1cd4:	a1 10       	cpse	r10, r1
    1cd6:	f6 cf       	rjmp	.-20     	; 0x1cc4 <vfprintf+0x34e>
    1cd8:	33 20       	and	r3, r3
    1cda:	09 f4       	brne	.+2      	; 0x1cde <vfprintf+0x368>
    1cdc:	5d ce       	rjmp	.-838    	; 0x1998 <vfprintf+0x22>
    1cde:	b7 01       	movw	r22, r14
    1ce0:	80 e2       	ldi	r24, 0x20	; 32
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	3e d0       	rcall	.+124    	; 0x1d62 <fputc>
    1ce6:	3a 94       	dec	r3
    1ce8:	f7 cf       	rjmp	.-18     	; 0x1cd8 <vfprintf+0x362>
    1cea:	f7 01       	movw	r30, r14
    1cec:	86 81       	ldd	r24, Z+6	; 0x06
    1cee:	97 81       	ldd	r25, Z+7	; 0x07
    1cf0:	02 c0       	rjmp	.+4      	; 0x1cf6 <vfprintf+0x380>
    1cf2:	8f ef       	ldi	r24, 0xFF	; 255
    1cf4:	9f ef       	ldi	r25, 0xFF	; 255
    1cf6:	2c 96       	adiw	r28, 0x0c	; 12
    1cf8:	e2 e1       	ldi	r30, 0x12	; 18
    1cfa:	ef c0       	rjmp	.+478    	; 0x1eda <__epilogue_restores__>

00001cfc <__eerd_byte_m8>:
    1cfc:	e1 99       	sbic	0x1c, 1	; 28
    1cfe:	fe cf       	rjmp	.-4      	; 0x1cfc <__eerd_byte_m8>
    1d00:	9f bb       	out	0x1f, r25	; 31
    1d02:	8e bb       	out	0x1e, r24	; 30
    1d04:	e0 9a       	sbi	0x1c, 0	; 28
    1d06:	99 27       	eor	r25, r25
    1d08:	8d b3       	in	r24, 0x1d	; 29
    1d0a:	08 95       	ret

00001d0c <__eerd_word_m8>:
    1d0c:	a8 e1       	ldi	r26, 0x18	; 24
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	42 e0       	ldi	r20, 0x02	; 2
    1d12:	50 e0       	ldi	r21, 0x00	; 0
    1d14:	b8 c0       	rjmp	.+368    	; 0x1e86 <__eerd_blraw_m8>

00001d16 <__eewr_byte_m8>:
    1d16:	26 2f       	mov	r18, r22

00001d18 <__eewr_r18_m8>:
    1d18:	e1 99       	sbic	0x1c, 1	; 28
    1d1a:	fe cf       	rjmp	.-4      	; 0x1d18 <__eewr_r18_m8>
    1d1c:	9f bb       	out	0x1f, r25	; 31
    1d1e:	8e bb       	out	0x1e, r24	; 30
    1d20:	2d bb       	out	0x1d, r18	; 29
    1d22:	0f b6       	in	r0, 0x3f	; 63
    1d24:	f8 94       	cli
    1d26:	e2 9a       	sbi	0x1c, 2	; 28
    1d28:	e1 9a       	sbi	0x1c, 1	; 28
    1d2a:	0f be       	out	0x3f, r0	; 63
    1d2c:	01 96       	adiw	r24, 0x01	; 1
    1d2e:	08 95       	ret

00001d30 <__eewr_word_m8>:
    1d30:	f2 df       	rcall	.-28     	; 0x1d16 <__eewr_byte_m8>
    1d32:	27 2f       	mov	r18, r23
    1d34:	f1 cf       	rjmp	.-30     	; 0x1d18 <__eewr_r18_m8>

00001d36 <strnlen_P>:
    1d36:	fc 01       	movw	r30, r24
    1d38:	05 90       	lpm	r0, Z+
    1d3a:	61 50       	subi	r22, 0x01	; 1
    1d3c:	70 40       	sbci	r23, 0x00	; 0
    1d3e:	01 10       	cpse	r0, r1
    1d40:	d8 f7       	brcc	.-10     	; 0x1d38 <strnlen_P+0x2>
    1d42:	80 95       	com	r24
    1d44:	90 95       	com	r25
    1d46:	8e 0f       	add	r24, r30
    1d48:	9f 1f       	adc	r25, r31
    1d4a:	08 95       	ret

00001d4c <strnlen>:
    1d4c:	fc 01       	movw	r30, r24
    1d4e:	61 50       	subi	r22, 0x01	; 1
    1d50:	70 40       	sbci	r23, 0x00	; 0
    1d52:	01 90       	ld	r0, Z+
    1d54:	01 10       	cpse	r0, r1
    1d56:	d8 f7       	brcc	.-10     	; 0x1d4e <strnlen+0x2>
    1d58:	80 95       	com	r24
    1d5a:	90 95       	com	r25
    1d5c:	8e 0f       	add	r24, r30
    1d5e:	9f 1f       	adc	r25, r31
    1d60:	08 95       	ret

00001d62 <fputc>:
    1d62:	0f 93       	push	r16
    1d64:	1f 93       	push	r17
    1d66:	cf 93       	push	r28
    1d68:	df 93       	push	r29
    1d6a:	18 2f       	mov	r17, r24
    1d6c:	09 2f       	mov	r16, r25
    1d6e:	eb 01       	movw	r28, r22
    1d70:	8b 81       	ldd	r24, Y+3	; 0x03
    1d72:	81 fd       	sbrc	r24, 1
    1d74:	03 c0       	rjmp	.+6      	; 0x1d7c <fputc+0x1a>
    1d76:	8f ef       	ldi	r24, 0xFF	; 255
    1d78:	9f ef       	ldi	r25, 0xFF	; 255
    1d7a:	20 c0       	rjmp	.+64     	; 0x1dbc <fputc+0x5a>
    1d7c:	82 ff       	sbrs	r24, 2
    1d7e:	10 c0       	rjmp	.+32     	; 0x1da0 <fputc+0x3e>
    1d80:	4e 81       	ldd	r20, Y+6	; 0x06
    1d82:	5f 81       	ldd	r21, Y+7	; 0x07
    1d84:	2c 81       	ldd	r18, Y+4	; 0x04
    1d86:	3d 81       	ldd	r19, Y+5	; 0x05
    1d88:	42 17       	cp	r20, r18
    1d8a:	53 07       	cpc	r21, r19
    1d8c:	7c f4       	brge	.+30     	; 0x1dac <fputc+0x4a>
    1d8e:	e8 81       	ld	r30, Y
    1d90:	f9 81       	ldd	r31, Y+1	; 0x01
    1d92:	9f 01       	movw	r18, r30
    1d94:	2f 5f       	subi	r18, 0xFF	; 255
    1d96:	3f 4f       	sbci	r19, 0xFF	; 255
    1d98:	39 83       	std	Y+1, r19	; 0x01
    1d9a:	28 83       	st	Y, r18
    1d9c:	10 83       	st	Z, r17
    1d9e:	06 c0       	rjmp	.+12     	; 0x1dac <fputc+0x4a>
    1da0:	e8 85       	ldd	r30, Y+8	; 0x08
    1da2:	f9 85       	ldd	r31, Y+9	; 0x09
    1da4:	81 2f       	mov	r24, r17
    1da6:	09 95       	icall
    1da8:	89 2b       	or	r24, r25
    1daa:	29 f7       	brne	.-54     	; 0x1d76 <fputc+0x14>
    1dac:	2e 81       	ldd	r18, Y+6	; 0x06
    1dae:	3f 81       	ldd	r19, Y+7	; 0x07
    1db0:	2f 5f       	subi	r18, 0xFF	; 255
    1db2:	3f 4f       	sbci	r19, 0xFF	; 255
    1db4:	3f 83       	std	Y+7, r19	; 0x07
    1db6:	2e 83       	std	Y+6, r18	; 0x06
    1db8:	81 2f       	mov	r24, r17
    1dba:	90 2f       	mov	r25, r16
    1dbc:	df 91       	pop	r29
    1dbe:	cf 91       	pop	r28
    1dc0:	1f 91       	pop	r17
    1dc2:	0f 91       	pop	r16
    1dc4:	08 95       	ret

00001dc6 <__ultoa_invert>:
    1dc6:	fa 01       	movw	r30, r20
    1dc8:	aa 27       	eor	r26, r26
    1dca:	28 30       	cpi	r18, 0x08	; 8
    1dcc:	51 f1       	breq	.+84     	; 0x1e22 <__ultoa_invert+0x5c>
    1dce:	20 31       	cpi	r18, 0x10	; 16
    1dd0:	81 f1       	breq	.+96     	; 0x1e32 <__ultoa_invert+0x6c>
    1dd2:	e8 94       	clt
    1dd4:	6f 93       	push	r22
    1dd6:	6e 7f       	andi	r22, 0xFE	; 254
    1dd8:	6e 5f       	subi	r22, 0xFE	; 254
    1dda:	7f 4f       	sbci	r23, 0xFF	; 255
    1ddc:	8f 4f       	sbci	r24, 0xFF	; 255
    1dde:	9f 4f       	sbci	r25, 0xFF	; 255
    1de0:	af 4f       	sbci	r26, 0xFF	; 255
    1de2:	b1 e0       	ldi	r27, 0x01	; 1
    1de4:	3e d0       	rcall	.+124    	; 0x1e62 <__ultoa_invert+0x9c>
    1de6:	b4 e0       	ldi	r27, 0x04	; 4
    1de8:	3c d0       	rcall	.+120    	; 0x1e62 <__ultoa_invert+0x9c>
    1dea:	67 0f       	add	r22, r23
    1dec:	78 1f       	adc	r23, r24
    1dee:	89 1f       	adc	r24, r25
    1df0:	9a 1f       	adc	r25, r26
    1df2:	a1 1d       	adc	r26, r1
    1df4:	68 0f       	add	r22, r24
    1df6:	79 1f       	adc	r23, r25
    1df8:	8a 1f       	adc	r24, r26
    1dfa:	91 1d       	adc	r25, r1
    1dfc:	a1 1d       	adc	r26, r1
    1dfe:	6a 0f       	add	r22, r26
    1e00:	71 1d       	adc	r23, r1
    1e02:	81 1d       	adc	r24, r1
    1e04:	91 1d       	adc	r25, r1
    1e06:	a1 1d       	adc	r26, r1
    1e08:	20 d0       	rcall	.+64     	; 0x1e4a <__ultoa_invert+0x84>
    1e0a:	09 f4       	brne	.+2      	; 0x1e0e <__ultoa_invert+0x48>
    1e0c:	68 94       	set
    1e0e:	3f 91       	pop	r19
    1e10:	2a e0       	ldi	r18, 0x0A	; 10
    1e12:	26 9f       	mul	r18, r22
    1e14:	11 24       	eor	r1, r1
    1e16:	30 19       	sub	r19, r0
    1e18:	30 5d       	subi	r19, 0xD0	; 208
    1e1a:	31 93       	st	Z+, r19
    1e1c:	de f6       	brtc	.-74     	; 0x1dd4 <__ultoa_invert+0xe>
    1e1e:	cf 01       	movw	r24, r30
    1e20:	08 95       	ret
    1e22:	46 2f       	mov	r20, r22
    1e24:	47 70       	andi	r20, 0x07	; 7
    1e26:	40 5d       	subi	r20, 0xD0	; 208
    1e28:	41 93       	st	Z+, r20
    1e2a:	b3 e0       	ldi	r27, 0x03	; 3
    1e2c:	0f d0       	rcall	.+30     	; 0x1e4c <__ultoa_invert+0x86>
    1e2e:	c9 f7       	brne	.-14     	; 0x1e22 <__ultoa_invert+0x5c>
    1e30:	f6 cf       	rjmp	.-20     	; 0x1e1e <__ultoa_invert+0x58>
    1e32:	46 2f       	mov	r20, r22
    1e34:	4f 70       	andi	r20, 0x0F	; 15
    1e36:	40 5d       	subi	r20, 0xD0	; 208
    1e38:	4a 33       	cpi	r20, 0x3A	; 58
    1e3a:	18 f0       	brcs	.+6      	; 0x1e42 <__ultoa_invert+0x7c>
    1e3c:	49 5d       	subi	r20, 0xD9	; 217
    1e3e:	31 fd       	sbrc	r19, 1
    1e40:	40 52       	subi	r20, 0x20	; 32
    1e42:	41 93       	st	Z+, r20
    1e44:	02 d0       	rcall	.+4      	; 0x1e4a <__ultoa_invert+0x84>
    1e46:	a9 f7       	brne	.-22     	; 0x1e32 <__ultoa_invert+0x6c>
    1e48:	ea cf       	rjmp	.-44     	; 0x1e1e <__ultoa_invert+0x58>
    1e4a:	b4 e0       	ldi	r27, 0x04	; 4
    1e4c:	a6 95       	lsr	r26
    1e4e:	97 95       	ror	r25
    1e50:	87 95       	ror	r24
    1e52:	77 95       	ror	r23
    1e54:	67 95       	ror	r22
    1e56:	ba 95       	dec	r27
    1e58:	c9 f7       	brne	.-14     	; 0x1e4c <__ultoa_invert+0x86>
    1e5a:	00 97       	sbiw	r24, 0x00	; 0
    1e5c:	61 05       	cpc	r22, r1
    1e5e:	71 05       	cpc	r23, r1
    1e60:	08 95       	ret
    1e62:	9b 01       	movw	r18, r22
    1e64:	ac 01       	movw	r20, r24
    1e66:	0a 2e       	mov	r0, r26
    1e68:	06 94       	lsr	r0
    1e6a:	57 95       	ror	r21
    1e6c:	47 95       	ror	r20
    1e6e:	37 95       	ror	r19
    1e70:	27 95       	ror	r18
    1e72:	ba 95       	dec	r27
    1e74:	c9 f7       	brne	.-14     	; 0x1e68 <__ultoa_invert+0xa2>
    1e76:	62 0f       	add	r22, r18
    1e78:	73 1f       	adc	r23, r19
    1e7a:	84 1f       	adc	r24, r20
    1e7c:	95 1f       	adc	r25, r21
    1e7e:	a0 1d       	adc	r26, r0
    1e80:	08 95       	ret

00001e82 <__eerd_block_m8>:
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22

00001e86 <__eerd_blraw_m8>:
    1e86:	fc 01       	movw	r30, r24
    1e88:	e1 99       	sbic	0x1c, 1	; 28
    1e8a:	fe cf       	rjmp	.-4      	; 0x1e88 <__eerd_blraw_m8+0x2>
    1e8c:	06 c0       	rjmp	.+12     	; 0x1e9a <__eerd_blraw_m8+0x14>
    1e8e:	ff bb       	out	0x1f, r31	; 31
    1e90:	ee bb       	out	0x1e, r30	; 30
    1e92:	e0 9a       	sbi	0x1c, 0	; 28
    1e94:	31 96       	adiw	r30, 0x01	; 1
    1e96:	0d b2       	in	r0, 0x1d	; 29
    1e98:	0d 92       	st	X+, r0
    1e9a:	41 50       	subi	r20, 0x01	; 1
    1e9c:	50 40       	sbci	r21, 0x00	; 0
    1e9e:	b8 f7       	brcc	.-18     	; 0x1e8e <__eerd_blraw_m8+0x8>
    1ea0:	08 95       	ret

00001ea2 <__prologue_saves__>:
    1ea2:	2f 92       	push	r2
    1ea4:	3f 92       	push	r3
    1ea6:	4f 92       	push	r4
    1ea8:	5f 92       	push	r5
    1eaa:	6f 92       	push	r6
    1eac:	7f 92       	push	r7
    1eae:	8f 92       	push	r8
    1eb0:	9f 92       	push	r9
    1eb2:	af 92       	push	r10
    1eb4:	bf 92       	push	r11
    1eb6:	cf 92       	push	r12
    1eb8:	df 92       	push	r13
    1eba:	ef 92       	push	r14
    1ebc:	ff 92       	push	r15
    1ebe:	0f 93       	push	r16
    1ec0:	1f 93       	push	r17
    1ec2:	cf 93       	push	r28
    1ec4:	df 93       	push	r29
    1ec6:	cd b7       	in	r28, 0x3d	; 61
    1ec8:	de b7       	in	r29, 0x3e	; 62
    1eca:	ca 1b       	sub	r28, r26
    1ecc:	db 0b       	sbc	r29, r27
    1ece:	0f b6       	in	r0, 0x3f	; 63
    1ed0:	f8 94       	cli
    1ed2:	de bf       	out	0x3e, r29	; 62
    1ed4:	0f be       	out	0x3f, r0	; 63
    1ed6:	cd bf       	out	0x3d, r28	; 61
    1ed8:	09 94       	ijmp

00001eda <__epilogue_restores__>:
    1eda:	2a 88       	ldd	r2, Y+18	; 0x12
    1edc:	39 88       	ldd	r3, Y+17	; 0x11
    1ede:	48 88       	ldd	r4, Y+16	; 0x10
    1ee0:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ee2:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ee4:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ee6:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ee8:	9b 84       	ldd	r9, Y+11	; 0x0b
    1eea:	aa 84       	ldd	r10, Y+10	; 0x0a
    1eec:	b9 84       	ldd	r11, Y+9	; 0x09
    1eee:	c8 84       	ldd	r12, Y+8	; 0x08
    1ef0:	df 80       	ldd	r13, Y+7	; 0x07
    1ef2:	ee 80       	ldd	r14, Y+6	; 0x06
    1ef4:	fd 80       	ldd	r15, Y+5	; 0x05
    1ef6:	0c 81       	ldd	r16, Y+4	; 0x04
    1ef8:	1b 81       	ldd	r17, Y+3	; 0x03
    1efa:	aa 81       	ldd	r26, Y+2	; 0x02
    1efc:	b9 81       	ldd	r27, Y+1	; 0x01
    1efe:	ce 0f       	add	r28, r30
    1f00:	d1 1d       	adc	r29, r1
    1f02:	0f b6       	in	r0, 0x3f	; 63
    1f04:	f8 94       	cli
    1f06:	de bf       	out	0x3e, r29	; 62
    1f08:	0f be       	out	0x3f, r0	; 63
    1f0a:	cd bf       	out	0x3d, r28	; 61
    1f0c:	ed 01       	movw	r28, r26
    1f0e:	08 95       	ret

00001f10 <_exit>:
    1f10:	f8 94       	cli

00001f12 <__stop_program>:
    1f12:	ff cf       	rjmp	.-2      	; 0x1f12 <__stop_program>
