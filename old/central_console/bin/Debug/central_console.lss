
bin/Debug/central_console.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002fc4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000019e  00800060  00002fc4  00003078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000011c  008001fe  008001fe  00003216  2**0
                  ALLOC
  3 .fuse         00000002  00820000  00820000  00003216  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         0000b0d0  00000000  00000000  00003218  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00003a99  00000000  00000000  0000e2e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00011d81  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__ctors_end>
       4:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
       8:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
       c:	0c 94 bb 09 	jmp	0x1376	; 0x1376 <__vector_3>
      10:	0c 94 a2 13 	jmp	0x2744	; 0x2744 <__vector_4>
      14:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      18:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      1c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      20:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      24:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      28:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      2c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      30:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      34:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      38:	0c 94 a6 06 	jmp	0xd4c	; 0xd4c <__vector_14>
      3c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      40:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      44:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      48:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      4c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      50:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      54:	89 0a       	sbc	r8, r25
      56:	8c 0a       	sbc	r8, r28
      58:	8f 0a       	sbc	r8, r31
      5a:	92 0a       	sbc	r9, r18
      5c:	95 0a       	sbc	r9, r21
      5e:	98 0a       	sbc	r9, r24
      60:	9b 0a       	sbc	r9, r27
      62:	9e 0a       	sbc	r9, r30
      64:	a1 0a       	sbc	r10, r17
      66:	a4 0a       	sbc	r10, r20
      68:	a7 0a       	sbc	r10, r23
      6a:	aa 0a       	sbc	r10, r26
      6c:	ad 0a       	sbc	r10, r29
      6e:	b0 0a       	sbc	r11, r16
      70:	10 0c       	add	r1, r0
      72:	20 0c       	add	r2, r0
      74:	37 0c       	add	r3, r7
      76:	4f 0c       	add	r4, r15
      78:	90 0c       	add	r9, r0
      7a:	b8 0c       	add	r11, r8
      7c:	cc 0c       	add	r12, r12
      7e:	e1 0c       	add	r14, r1
      80:	41 0c       	add	r4, r1

00000082 <m_s2i5>:
      82:	da 00 91 00 66 01 66 01 00 48 61 b7 61 e3 00        ....f.f..Ha.a..

00000091 <m_s2i4>:
      91:	82 00 ab 00 66 01 7f 01 0a a8 6f b3 bf 6f 70 bd     ....f.....o..op.
      a1:	c3 65 20 b3 c3 b7 6f b3 c3 00                       .e ...o...

000000ab <m_s2i3>:
      ab:	91 00 c1 00 66 01 7f 01 04 42 c3 b2 6f 70 20 ba     ....f....B..op .
      bb:	61 bd 61 bb 61 00                                   a.a.a.

000000c1 <m_s2i2>:
      c1:	ab 00 da 00 66 01 7f 01 03 48 61 63 bf 70 6f b9     ....f....Hac.po.
      d1:	ba 61 20 b7 b3 79 ba 61 00                          .a ..y.a.

000000da <m_s2i1>:
      da:	c1 00 82 00 66 01 7f 01 02 a9 63 bf 2e 20 b3 70     ....f.....c.. .p
      ea:	65 bc 65 bd b8 00                                   e.e...

000000f0 <m_s1i8>:
      f0:	66 01 09 01 7f 01 7f 01 09 41 ba bf b8 b3 bd c3     f........A......
     100:	65 20 b3 c3 b7 6f b3 c3 00                          e ...o...

00000109 <m_s1i7>:
     109:	f0 00 1c 01 7f 01 7f 01 08 42 c3 e3 61 c0 61 20     .........B..a.a 
     119:	49 44 00                                            ID.

0000011c <m_s1i6>:
     11c:	09 01 2d 01 7f 01 7f 01 07 43 6f b2 c3 bf b8 c7     ..-......Co.....
	...

0000012d <m_s1i5>:
     12d:	1c 01 3d 01 7f 01 7f 01 06 43 bf 61 bf 79 63 00     ..=......C.a.yc.

0000013d <m_s1i4>:
     13d:	2d 01 53 01 7f 01 7f 01 05 43 6f 63 bf 2e 20 be     -.S......Coc.. .
     14d:	61 bc c7 bf b8 00                                   a.....

00000153 <m_s1i3>:
     153:	3d 01 66 01 7f 01 da 00 00 48 61 63 bf 70 6f b9     =.f......Hac.po.
     163:	ba b8 00                                            ...

00000166 <m_s1i2>:
     166:	53 01 f0 00 7f 01 75 01 00 42 c3 78 6f e3 00        S.....u..B.xo..

00000175 <m_s1i1>:
     175:	66 01 66 01 7f 01 53 01 00 00                       f.f...S...

0000017f <Null_Menu>:
	...

00000189 <strNULL>:
	...

0000018a <__ctors_end>:
     18a:	11 24       	eor	r1, r1
     18c:	1f be       	out	0x3f, r1	; 63
     18e:	cf e5       	ldi	r28, 0x5F	; 95
     190:	d8 e0       	ldi	r29, 0x08	; 8
     192:	de bf       	out	0x3e, r29	; 62
     194:	cd bf       	out	0x3d, r28	; 61

00000196 <__do_copy_data>:
     196:	11 e0       	ldi	r17, 0x01	; 1
     198:	a0 e6       	ldi	r26, 0x60	; 96
     19a:	b0 e0       	ldi	r27, 0x00	; 0
     19c:	e4 ec       	ldi	r30, 0xC4	; 196
     19e:	ff e2       	ldi	r31, 0x2F	; 47
     1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <__do_copy_data+0x10>
     1a2:	05 90       	lpm	r0, Z+
     1a4:	0d 92       	st	X+, r0
     1a6:	ae 3f       	cpi	r26, 0xFE	; 254
     1a8:	b1 07       	cpc	r27, r17
     1aa:	d9 f7       	brne	.-10     	; 0x1a2 <__do_copy_data+0xc>

000001ac <__do_clear_bss>:
     1ac:	13 e0       	ldi	r17, 0x03	; 3
     1ae:	ae ef       	ldi	r26, 0xFE	; 254
     1b0:	b1 e0       	ldi	r27, 0x01	; 1
     1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <.do_clear_bss_start>

000001b4 <.do_clear_bss_loop>:
     1b4:	1d 92       	st	X+, r1

000001b6 <.do_clear_bss_start>:
     1b6:	aa 31       	cpi	r26, 0x1A	; 26
     1b8:	b1 07       	cpc	r27, r17
     1ba:	e1 f7       	brne	.-8      	; 0x1b4 <.do_clear_bss_loop>
     1bc:	0e 94 c6 13 	call	0x278c	; 0x278c <main>
     1c0:	0c 94 e0 17 	jmp	0x2fc0	; 0x2fc0 <_exit>

000001c4 <__bad_interrupt>:
     1c4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c8 <verify_and_set_bit>:
extern volatile uint8_t active_call_id[N_ACTIVE_CALL_MAX], channel, status1, pack_buffer[PACKET_SIZE];
extern volatile uint16_t n_active_calls, seep_pointer;


uint8_t verify_and_set_bit(uint8_t byte)
{
     1c8:	1f 93       	push	r17
     1ca:	cf 93       	push	r28
     1cc:	df 93       	push	r29
    const uint8_t index = (byte >> 3) + BITMASK_POINTER;
     1ce:	18 2f       	mov	r17, r24
     1d0:	16 95       	lsr	r17
     1d2:	16 95       	lsr	r17
     1d4:	16 95       	lsr	r17
     1d6:	1e 5e       	subi	r17, 0xEE	; 238
    const uint8_t bit_mask = 1 << (byte & 0x07);
     1d8:	87 70       	andi	r24, 0x07	; 7
     1da:	c1 e0       	ldi	r28, 0x01	; 1
     1dc:	d0 e0       	ldi	r29, 0x00	; 0
     1de:	01 c0       	rjmp	.+2      	; 0x1e2 <verify_and_set_bit+0x1a>
     1e0:	cc 0f       	add	r28, r28
     1e2:	8a 95       	dec	r24
     1e4:	ea f7       	brpl	.-6      	; 0x1e0 <verify_and_set_bit+0x18>
    byte = ds_read_byte(index);
     1e6:	81 2f       	mov	r24, r17
     1e8:	0e 94 2a 05 	call	0xa54	; 0xa54 <ds_read_byte>

    if ( byte & bit_mask )
     1ec:	9c 2f       	mov	r25, r28
     1ee:	98 23       	and	r25, r24
     1f0:	39 f4       	brne	.+14     	; 0x200 <verify_and_set_bit+0x38>
        return 0;
    else
    {
        ds_write_byte(index, byte | bit_mask);
     1f2:	6c 2f       	mov	r22, r28
     1f4:	68 2b       	or	r22, r24
     1f6:	81 2f       	mov	r24, r17
     1f8:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <ds_write_byte>
        return 1;
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	01 c0       	rjmp	.+2      	; 0x202 <verify_and_set_bit+0x3a>
    const uint8_t index = (byte >> 3) + BITMASK_POINTER;
    const uint8_t bit_mask = 1 << (byte & 0x07);
    byte = ds_read_byte(index);

    if ( byte & bit_mask )
        return 0;
     200:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
        ds_write_byte(index, byte | bit_mask);
        return 1;
    }
}
     202:	df 91       	pop	r29
     204:	cf 91       	pop	r28
     206:	1f 91       	pop	r17
     208:	08 95       	ret

0000020a <add_active_call>:


/* Добавляет ID пульта в список активных вызовов, если его там нет */
uint8_t add_active_call(void)
{
    uint8_t find_index = 0, i;
     20a:	40 e0       	ldi	r20, 0x00	; 0

// Проверка наличия ID пульта в списке, если есть - функция возвращает 0.
    while ( (active_call_id[find_index] != pack_buffer[2]) && (find_index < n_active_calls) )
     20c:	84 2f       	mov	r24, r20
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	fc 01       	movw	r30, r24
     212:	e2 5a       	subi	r30, 0xA2	; 162
     214:	fd 4f       	sbci	r31, 0xFD	; 253
     216:	30 81       	ld	r19, Z
     218:	20 91 23 02 	lds	r18, 0x0223
     21c:	32 13       	cpse	r19, r18
     21e:	08 c0       	rjmp	.+16     	; 0x230 <add_active_call+0x26>
        ++find_index;

    if ( find_index != n_active_calls )
     220:	20 91 02 02 	lds	r18, 0x0202
     224:	30 91 03 02 	lds	r19, 0x0203
     228:	82 17       	cp	r24, r18
     22a:	93 07       	cpc	r25, r19
     22c:	d1 f5       	brne	.+116    	; 0x2a2 <add_active_call+0x98>
     22e:	09 c0       	rjmp	.+18     	; 0x242 <add_active_call+0x38>
uint8_t add_active_call(void)
{
    uint8_t find_index = 0, i;

// Проверка наличия ID пульта в списке, если есть - функция возвращает 0.
    while ( (active_call_id[find_index] != pack_buffer[2]) && (find_index < n_active_calls) )
     230:	20 91 02 02 	lds	r18, 0x0202
     234:	30 91 03 02 	lds	r19, 0x0203
     238:	82 17       	cp	r24, r18
     23a:	93 07       	cpc	r25, r19
     23c:	88 f7       	brcc	.-30     	; 0x220 <add_active_call+0x16>
        ++find_index;
     23e:	4f 5f       	subi	r20, 0xFF	; 255
     240:	e5 cf       	rjmp	.-54     	; 0x20c <add_active_call+0x2>

    if ( find_index != n_active_calls )
        return 0;

// Добавляет ID пульта в список, если список переполнен - записывает по кругу.
    if( n_active_calls < N_ACTIVE_CALL_MAX )
     242:	80 91 02 02 	lds	r24, 0x0202
     246:	90 91 03 02 	lds	r25, 0x0203
     24a:	48 97       	sbiw	r24, 0x18	; 24
     24c:	90 f4       	brcc	.+36     	; 0x272 <add_active_call+0x68>
        active_call_id[n_active_calls++] = pack_buffer[2];
     24e:	80 91 02 02 	lds	r24, 0x0202
     252:	90 91 03 02 	lds	r25, 0x0203
     256:	9c 01       	movw	r18, r24
     258:	2f 5f       	subi	r18, 0xFF	; 255
     25a:	3f 4f       	sbci	r19, 0xFF	; 255
     25c:	30 93 03 02 	sts	0x0203, r19
     260:	20 93 02 02 	sts	0x0202, r18
     264:	20 91 23 02 	lds	r18, 0x0223
     268:	fc 01       	movw	r30, r24
     26a:	e2 5a       	subi	r30, 0xA2	; 162
     26c:	fd 4f       	sbci	r31, 0xFD	; 253
     26e:	20 83       	st	Z, r18
     270:	16 c0       	rjmp	.+44     	; 0x29e <add_active_call+0x94>

    if ( find_index != n_active_calls )
        return 0;

// Добавляет ID пульта в список, если список переполнен - записывает по кругу.
    if( n_active_calls < N_ACTIVE_CALL_MAX )
     272:	80 e0       	ldi	r24, 0x00	; 0
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	9c 01       	movw	r18, r24
     278:	2f 5f       	subi	r18, 0xFF	; 255
     27a:	3f 4f       	sbci	r19, 0xFF	; 255
        active_call_id[n_active_calls++] = pack_buffer[2];
    else
    {
        for ( i=0 ; i<(N_ACTIVE_CALL_MAX-1) ; ++i )
            active_call_id[i] = active_call_id[i+1];
     27c:	f9 01       	movw	r30, r18
     27e:	e2 5a       	subi	r30, 0xA2	; 162
     280:	fd 4f       	sbci	r31, 0xFD	; 253
     282:	40 81       	ld	r20, Z
     284:	fc 01       	movw	r30, r24
     286:	e2 5a       	subi	r30, 0xA2	; 162
     288:	fd 4f       	sbci	r31, 0xFD	; 253
     28a:	40 83       	st	Z, r20
// Добавляет ID пульта в список, если список переполнен - записывает по кругу.
    if( n_active_calls < N_ACTIVE_CALL_MAX )
        active_call_id[n_active_calls++] = pack_buffer[2];
    else
    {
        for ( i=0 ; i<(N_ACTIVE_CALL_MAX-1) ; ++i )
     28c:	27 31       	cpi	r18, 0x17	; 23
     28e:	31 05       	cpc	r19, r1
     290:	11 f0       	breq	.+4      	; 0x296 <add_active_call+0x8c>
     292:	c9 01       	movw	r24, r18
     294:	f0 cf       	rjmp	.-32     	; 0x276 <add_active_call+0x6c>
            active_call_id[i] = active_call_id[i+1];

        active_call_id[N_ACTIVE_CALL_MAX-1] = pack_buffer[2];
     296:	80 91 23 02 	lds	r24, 0x0223
     29a:	80 93 75 02 	sts	0x0275, r24
    }
    return 1;
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	08 95       	ret
// Проверка наличия ID пульта в списке, если есть - функция возвращает 0.
    while ( (active_call_id[find_index] != pack_buffer[2]) && (find_index < n_active_calls) )
        ++find_index;

    if ( find_index != n_active_calls )
        return 0;
     2a2:	80 e0       	ldi	r24, 0x00	; 0
            active_call_id[i] = active_call_id[i+1];

        active_call_id[N_ACTIVE_CALL_MAX-1] = pack_buffer[2];
    }
    return 1;
}
     2a4:	08 95       	ret

000002a6 <remove_active_call>:


/* Удалят ID из списка, сдвигая писок к началу */
uint8_t remove_active_call(void)
{
    uint8_t find_index = 0;
     2a6:	40 e0       	ldi	r20, 0x00	; 0

// Проверяет наличие ID в списке, если нету - возвращает 0.
    while ( (active_call_id[find_index] != pack_buffer[2]) && (find_index < n_active_calls) )
     2a8:	84 2f       	mov	r24, r20
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	fc 01       	movw	r30, r24
     2ae:	e2 5a       	subi	r30, 0xA2	; 162
     2b0:	fd 4f       	sbci	r31, 0xFD	; 253
     2b2:	30 81       	ld	r19, Z
     2b4:	20 91 23 02 	lds	r18, 0x0223
     2b8:	32 13       	cpse	r19, r18
     2ba:	11 c0       	rjmp	.+34     	; 0x2de <remove_active_call+0x38>
        ++find_index;

    if (find_index == n_active_calls)
     2bc:	20 91 02 02 	lds	r18, 0x0202
     2c0:	30 91 03 02 	lds	r19, 0x0203
     2c4:	82 17       	cp	r24, r18
     2c6:	93 07       	cpc	r25, r19
     2c8:	41 f1       	breq	.+80     	; 0x31a <remove_active_call+0x74>
        return 0;

// Если есть - удаляет его из списка, сдвигая список к началу. Возвращает 1.
    --n_active_calls;
     2ca:	80 91 02 02 	lds	r24, 0x0202
     2ce:	90 91 03 02 	lds	r25, 0x0203
     2d2:	01 97       	sbiw	r24, 0x01	; 1
     2d4:	90 93 03 02 	sts	0x0203, r25
     2d8:	80 93 02 02 	sts	0x0202, r24

    for( ; find_index < n_active_calls ; ++find_index )
     2dc:	09 c0       	rjmp	.+18     	; 0x2f0 <remove_active_call+0x4a>
uint8_t remove_active_call(void)
{
    uint8_t find_index = 0;

// Проверяет наличие ID в списке, если нету - возвращает 0.
    while ( (active_call_id[find_index] != pack_buffer[2]) && (find_index < n_active_calls) )
     2de:	20 91 02 02 	lds	r18, 0x0202
     2e2:	30 91 03 02 	lds	r19, 0x0203
     2e6:	82 17       	cp	r24, r18
     2e8:	93 07       	cpc	r25, r19
     2ea:	40 f7       	brcc	.-48     	; 0x2bc <remove_active_call+0x16>
        ++find_index;
     2ec:	4f 5f       	subi	r20, 0xFF	; 255
     2ee:	dc cf       	rjmp	.-72     	; 0x2a8 <remove_active_call+0x2>
        return 0;

// Если есть - удаляет его из списка, сдвигая список к началу. Возвращает 1.
    --n_active_calls;

    for( ; find_index < n_active_calls ; ++find_index )
     2f0:	20 91 02 02 	lds	r18, 0x0202
     2f4:	30 91 03 02 	lds	r19, 0x0203
     2f8:	84 2f       	mov	r24, r20
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	82 17       	cp	r24, r18
     2fe:	93 07       	cpc	r25, r19
     300:	50 f4       	brcc	.+20     	; 0x316 <remove_active_call+0x70>
        active_call_id[find_index] = active_call_id[find_index+1];
     302:	fc 01       	movw	r30, r24
     304:	e1 5a       	subi	r30, 0xA1	; 161
     306:	fd 4f       	sbci	r31, 0xFD	; 253
     308:	20 81       	ld	r18, Z
     30a:	fc 01       	movw	r30, r24
     30c:	e2 5a       	subi	r30, 0xA2	; 162
     30e:	fd 4f       	sbci	r31, 0xFD	; 253
     310:	20 83       	st	Z, r18
        return 0;

// Если есть - удаляет его из списка, сдвигая список к началу. Возвращает 1.
    --n_active_calls;

    for( ; find_index < n_active_calls ; ++find_index )
     312:	4f 5f       	subi	r20, 0xFF	; 255
     314:	ed cf       	rjmp	.-38     	; 0x2f0 <remove_active_call+0x4a>
        active_call_id[find_index] = active_call_id[find_index+1];

    return 1;
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	08 95       	ret
// Проверяет наличие ID в списке, если нету - возвращает 0.
    while ( (active_call_id[find_index] != pack_buffer[2]) && (find_index < n_active_calls) )
        ++find_index;

    if (find_index == n_active_calls)
        return 0;
     31a:	80 e0       	ldi	r24, 0x00	; 0

    for( ; find_index < n_active_calls ; ++find_index )
        active_call_id[find_index] = active_call_id[find_index+1];

    return 1;
}
     31c:	08 95       	ret

0000031e <seep_call_write>:


/* Записывает данные во внешнюю EEPROM. */
void seep_call_write(void)
{
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	cd b7       	in	r28, 0x3d	; 61
     324:	de b7       	in	r29, 0x3e	; 62
     326:	2f 97       	sbiw	r28, 0x0f	; 15
     328:	0f b6       	in	r0, 0x3f	; 63
     32a:	f8 94       	cli
     32c:	de bf       	out	0x3e, r29	; 62
     32e:	0f be       	out	0x3f, r0	; 63
     330:	cd bf       	out	0x3d, r28	; 61
    uint8_t i, event_buffer[RECORD_SIZE], time[7];

    if ( (seep_pointer + RECORD_SIZE) >= (SEEP_MAX_POINTER) ) {
     332:	80 91 58 02 	lds	r24, 0x0258
     336:	90 91 59 02 	lds	r25, 0x0259
     33a:	08 96       	adiw	r24, 0x08	; 8
     33c:	8f 3f       	cpi	r24, 0xFF	; 255
     33e:	99 4f       	sbci	r25, 0xF9	; 249
     340:	20 f0       	brcs	.+8      	; 0x34a <seep_call_write+0x2c>
        status1 = '!';
     342:	81 e2       	ldi	r24, 0x21	; 33
     344:	80 93 55 02 	sts	0x0255, r24
     348:	46 c0       	rjmp	.+140    	; 0x3d6 <seep_call_write+0xb8>
        return;
    }
    else    status1 = ' ';
     34a:	80 e2       	ldi	r24, 0x20	; 32
     34c:	80 93 55 02 	sts	0x0255, r24

    cli();
     350:	f8 94       	cli

    event_buffer[0] = pack_buffer[1];      // вызов/отмена
     352:	80 91 22 02 	lds	r24, 0x0222
     356:	89 83       	std	Y+1, r24	; 0x01
    event_buffer[1] = pack_buffer[2];      // id пакета
     358:	80 91 23 02 	lds	r24, 0x0223
     35c:	8a 83       	std	Y+2, r24	; 0x02

    ds_read_time(time);
     35e:	ce 01       	movw	r24, r28
     360:	09 96       	adiw	r24, 0x09	; 9
     362:	0e 94 1a 06 	call	0xc34	; 0xc34 <ds_read_time>
    for ( i = 2 ; i < 5 ; ++i ) event_buffer[i] = time[8-i];
     366:	8f 85       	ldd	r24, Y+15	; 0x0f
     368:	8b 83       	std	Y+3, r24	; 0x03
     36a:	8e 85       	ldd	r24, Y+14	; 0x0e
     36c:	8c 83       	std	Y+4, r24	; 0x04
     36e:	8d 85       	ldd	r24, Y+13	; 0x0d
     370:	8d 83       	std	Y+5, r24	; 0x05
    for ( i = 5 ; i < 8 ; ++i ) event_buffer[i] = time[7-i];
     372:	8b 85       	ldd	r24, Y+11	; 0x0b
     374:	8e 83       	std	Y+6, r24	; 0x06
     376:	8a 85       	ldd	r24, Y+10	; 0x0a
     378:	8f 83       	std	Y+7, r24	; 0x07
     37a:	89 85       	ldd	r24, Y+9	; 0x09
     37c:	88 87       	std	Y+8, r24	; 0x08

    seep_pointer += RECORD_SIZE;
     37e:	80 91 58 02 	lds	r24, 0x0258
     382:	90 91 59 02 	lds	r25, 0x0259
     386:	08 96       	adiw	r24, 0x08	; 8
     388:	90 93 59 02 	sts	0x0259, r25
     38c:	80 93 58 02 	sts	0x0258, r24

    seep_wait();
     390:	0e 94 c3 03 	call	0x786	; 0x786 <seep_wait>
    seep_write_byte(0x0000, (uint8_t)(seep_pointer>>8));
     394:	80 91 58 02 	lds	r24, 0x0258
     398:	90 91 59 02 	lds	r25, 0x0259
     39c:	69 2f       	mov	r22, r25
     39e:	80 e0       	ldi	r24, 0x00	; 0
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	0e 94 10 03 	call	0x620	; 0x620 <seep_write_byte>
    seep_wait();
     3a6:	0e 94 c3 03 	call	0x786	; 0x786 <seep_wait>
    seep_write_byte(0x0001, (uint8_t)(seep_pointer&0x00ff));
     3aa:	60 91 58 02 	lds	r22, 0x0258
     3ae:	70 91 59 02 	lds	r23, 0x0259
     3b2:	81 e0       	ldi	r24, 0x01	; 1
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	0e 94 10 03 	call	0x620	; 0x620 <seep_write_byte>
    seep_wait();
     3ba:	0e 94 c3 03 	call	0x786	; 0x786 <seep_wait>

    seep_write(seep_pointer-RECORD_SIZE, event_buffer, 10);
     3be:	80 91 58 02 	lds	r24, 0x0258
     3c2:	90 91 59 02 	lds	r25, 0x0259
     3c6:	4a e0       	ldi	r20, 0x0A	; 10
     3c8:	be 01       	movw	r22, r28
     3ca:	6f 5f       	subi	r22, 0xFF	; 255
     3cc:	7f 4f       	sbci	r23, 0xFF	; 255
     3ce:	08 97       	sbiw	r24, 0x08	; 8
     3d0:	0e 94 40 03 	call	0x680	; 0x680 <seep_write>

    sei();
     3d4:	78 94       	sei
}
     3d6:	2f 96       	adiw	r28, 0x0f	; 15
     3d8:	0f b6       	in	r0, 0x3f	; 63
     3da:	f8 94       	cli
     3dc:	de bf       	out	0x3e, r29	; 62
     3de:	0f be       	out	0x3f, r0	; 63
     3e0:	cd bf       	out	0x3d, r28	; 61
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	08 95       	ret

000003e8 <display_call>:


/* Отображает событие на экран */
void display_call(void)
{
     3e8:	0f 93       	push	r16
     3ea:	1f 93       	push	r17
     3ec:	cf 93       	push	r28
     3ee:	df 93       	push	r29
     3f0:	cd b7       	in	r28, 0x3d	; 61
     3f2:	de b7       	in	r29, 0x3e	; 62
     3f4:	60 97       	sbiw	r28, 0x10	; 16
     3f6:	0f b6       	in	r0, 0x3f	; 63
     3f8:	f8 94       	cli
     3fa:	de bf       	out	0x3e, r29	; 62
     3fc:	0f be       	out	0x3f, r0	; 63
     3fe:	cd bf       	out	0x3d, r28	; 61
    char lcd_buffer[16];

    if( n_active_calls > 1 )
     400:	80 91 02 02 	lds	r24, 0x0202
     404:	90 91 03 02 	lds	r25, 0x0203
     408:	8e 01       	movw	r16, r28
     40a:	0f 5f       	subi	r16, 0xFF	; 255
     40c:	1f 4f       	sbci	r17, 0xFF	; 255
     40e:	02 97       	sbiw	r24, 0x02	; 2
     410:	48 f0       	brcs	.+18     	; 0x424 <display_call+0x3c>
        sprintf(lcd_buffer, "A\272\277\270\263\275\303x \xb3\xc3\xb7. %d", n_active_calls);
     412:	80 91 02 02 	lds	r24, 0x0202
     416:	90 91 03 02 	lds	r25, 0x0203
     41a:	9f 93       	push	r25
     41c:	8f 93       	push	r24
     41e:	80 e7       	ldi	r24, 0x70	; 112
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	0c c0       	rjmp	.+24     	; 0x43c <display_call+0x54>
    else if (n_active_calls == 1)
     424:	80 91 02 02 	lds	r24, 0x0202
     428:	90 91 03 02 	lds	r25, 0x0203
     42c:	01 97       	sbiw	r24, 0x01	; 1
     42e:	99 f4       	brne	.+38     	; 0x456 <display_call+0x6e>
        sprintf(lcd_buffer, "ID = %03d \263\303\267o\263", active_call_id[0]);
     430:	80 91 5e 02 	lds	r24, 0x025E
     434:	1f 92       	push	r1
     436:	8f 93       	push	r24
     438:	81 e8       	ldi	r24, 0x81	; 129
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	9f 93       	push	r25
     43e:	8f 93       	push	r24
     440:	1f 93       	push	r17
     442:	0f 93       	push	r16
     444:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <sprintf>
     448:	0f 90       	pop	r0
     44a:	0f 90       	pop	r0
     44c:	0f 90       	pop	r0
     44e:	0f 90       	pop	r0
     450:	0f 90       	pop	r0
     452:	0f 90       	pop	r0
     454:	01 c0       	rjmp	.+2      	; 0x458 <display_call+0x70>
    else
        lcd_buffer[0] = '\0';
     456:	19 82       	std	Y+1, r1	; 0x01

    lcd_cleanstr(1);
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	0e 94 61 08 	call	0x10c2	; 0x10c2 <lcd_cleanstr>
    lcd_puts(lcd_buffer);
     45e:	c8 01       	movw	r24, r16
     460:	0e 94 46 08 	call	0x108c	; 0x108c <lcd_puts>
}
     464:	60 96       	adiw	r28, 0x10	; 16
     466:	0f b6       	in	r0, 0x3f	; 63
     468:	f8 94       	cli
     46a:	de bf       	out	0x3e, r29	; 62
     46c:	0f be       	out	0x3f, r0	; 63
     46e:	cd bf       	out	0x3d, r28	; 61
     470:	df 91       	pop	r29
     472:	cf 91       	pop	r28
     474:	1f 91       	pop	r17
     476:	0f 91       	pop	r16
     478:	08 95       	ret

0000047a <send_ackn>:



void send_ackn(void)
{
    pack_buffer[0+HEADER_NBYTES] = BUTTON;
     47a:	80 e5       	ldi	r24, 0x50	; 80
     47c:	80 93 25 02 	sts	0x0225, r24
    pack_buffer[1+HEADER_NBYTES] = ACKN;
     480:	83 e0       	ldi	r24, 0x03	; 3
     482:	80 93 26 02 	sts	0x0226, r24
    pack_buffer[2+HEADER_NBYTES] = pack_buffer[2];
     486:	80 91 23 02 	lds	r24, 0x0223
     48a:	80 93 27 02 	sts	0x0227, r24

    rfm12_transmit_pack(3);
     48e:	83 e0       	ldi	r24, 0x03	; 3
     490:	0c 94 db 08 	jmp	0x11b6	; 0x11b6 <rfm12_transmit_pack>

00000494 <send_active_call>:

void send_active_call(void)
{
    uint8_t i = HEADER_NBYTES;

    pack_buffer[i++] = PAGER;
     494:	83 e7       	ldi	r24, 0x73	; 115
     496:	80 93 25 02 	sts	0x0225, r24
    pack_buffer[i++] = EVENT;
     49a:	8d e4       	ldi	r24, 0x4D	; 77
     49c:	80 93 26 02 	sts	0x0226, r24
     4a0:	46 e0       	ldi	r20, 0x06	; 6

    for ( ; i<(n_active_calls+HEADER_NBYTES+2) ; ++i )    pack_buffer[i] = active_call_id[i-2-HEADER_NBYTES];
     4a2:	80 91 02 02 	lds	r24, 0x0202
     4a6:	90 91 03 02 	lds	r25, 0x0203
     4aa:	24 2f       	mov	r18, r20
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	06 96       	adiw	r24, 0x06	; 6
     4b0:	28 17       	cp	r18, r24
     4b2:	39 07       	cpc	r19, r25
     4b4:	50 f4       	brcc	.+20     	; 0x4ca <send_active_call+0x36>
     4b6:	f9 01       	movw	r30, r18
     4b8:	e8 5a       	subi	r30, 0xA8	; 168
     4ba:	fd 4f       	sbci	r31, 0xFD	; 253
     4bc:	80 81       	ld	r24, Z
     4be:	f9 01       	movw	r30, r18
     4c0:	ef 5d       	subi	r30, 0xDF	; 223
     4c2:	fd 4f       	sbci	r31, 0xFD	; 253
     4c4:	80 83       	st	Z, r24
     4c6:	4f 5f       	subi	r20, 0xFF	; 255
     4c8:	ec cf       	rjmp	.-40     	; 0x4a2 <send_active_call+0xe>

    rfm12_transmit_pack(n_active_calls+2);
     4ca:	80 91 02 02 	lds	r24, 0x0202
     4ce:	90 91 03 02 	lds	r25, 0x0203
     4d2:	8e 5f       	subi	r24, 0xFE	; 254
     4d4:	0c 94 db 08 	jmp	0x11b6	; 0x11b6 <rfm12_transmit_pack>

000004d8 <send_time>:
}


void send_time(void)
{
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	cd b7       	in	r28, 0x3d	; 61
     4de:	de b7       	in	r29, 0x3e	; 62
     4e0:	27 97       	sbiw	r28, 0x07	; 7
     4e2:	0f b6       	in	r0, 0x3f	; 63
     4e4:	f8 94       	cli
     4e6:	de bf       	out	0x3e, r29	; 62
     4e8:	0f be       	out	0x3f, r0	; 63
     4ea:	cd bf       	out	0x3d, r28	; 61
    uint8_t time[7], i = HEADER_NBYTES;

    ds_read_time(time);
     4ec:	ce 01       	movw	r24, r28
     4ee:	01 96       	adiw	r24, 0x01	; 1
     4f0:	0e 94 1a 06 	call	0xc34	; 0xc34 <ds_read_time>

    pack_buffer[i++] = PAGER;
     4f4:	83 e7       	ldi	r24, 0x73	; 115
     4f6:	80 93 25 02 	sts	0x0225, r24
    pack_buffer[i++] = TIME;
     4fa:	83 e6       	ldi	r24, 0x63	; 99
     4fc:	80 93 26 02 	sts	0x0226, r24
     500:	fe 01       	movw	r30, r28
     502:	31 96       	adiw	r30, 0x01	; 1
     504:	86 e0       	ldi	r24, 0x06	; 6
     506:	90 e0       	ldi	r25, 0x00	; 0

    for ( ; i<(9+HEADER_NBYTES) ; ++i ) pack_buffer[i] = time[i-2-HEADER_NBYTES];
     508:	21 91       	ld	r18, Z+
     50a:	dc 01       	movw	r26, r24
     50c:	af 5d       	subi	r26, 0xDF	; 223
     50e:	bd 4f       	sbci	r27, 0xFD	; 253
     510:	2c 93       	st	X, r18
     512:	01 96       	adiw	r24, 0x01	; 1
     514:	8d 30       	cpi	r24, 0x0D	; 13
     516:	91 05       	cpc	r25, r1
     518:	b9 f7       	brne	.-18     	; 0x508 <send_time+0x30>

    rfm12_transmit_pack(9);
     51a:	89 e0       	ldi	r24, 0x09	; 9
     51c:	0e 94 db 08 	call	0x11b6	; 0x11b6 <rfm12_transmit_pack>
}
     520:	27 96       	adiw	r28, 0x07	; 7
     522:	0f b6       	in	r0, 0x3f	; 63
     524:	f8 94       	cli
     526:	de bf       	out	0x3e, r29	; 62
     528:	0f be       	out	0x3f, r0	; 63
     52a:	cd bf       	out	0x3d, r28	; 61
     52c:	df 91       	pop	r29
     52e:	cf 91       	pop	r28
     530:	08 95       	ret

00000532 <seep_i2c_init>:



void seep_i2c_init(void)
{
    SEEP_I2C_DDR |= (1<<SEEP_SCL) | (1<<SEEP_SDA);
     532:	8a b3       	in	r24, 0x1a	; 26
     534:	80 6c       	ori	r24, 0xC0	; 192
     536:	8a bb       	out	0x1a, r24	; 26
    SEEP_I2C_PORT |= (1<<SEEP_SCL) | (1<<SEEP_SDA);
     538:	8b b3       	in	r24, 0x1b	; 27
     53a:	80 6c       	ori	r24, 0xC0	; 192
     53c:	8b bb       	out	0x1b, r24	; 27
     53e:	08 95       	ret

00000540 <seep_i2c_start>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	8a 95       	dec	r24
     544:	f1 f7       	brne	.-4      	; 0x542 <seep_i2c_start+0x2>


void seep_i2c_start(void)
{
    _delay_us(SEEP_I2C_TIME4);
    SEEP_I2C_PORT &= ~(1<<SEEP_SDA);
     546:	de 98       	cbi	0x1b, 6	; 27
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	8a 95       	dec	r24
     54c:	f1 f7       	brne	.-4      	; 0x54a <seep_i2c_start+0xa>
    _delay_us(SEEP_I2C_TIME4);
    SEEP_I2C_PORT &= ~(1<<SEEP_SCL);
     54e:	df 98       	cbi	0x1b, 7	; 27
     550:	82 e0       	ldi	r24, 0x02	; 2
     552:	8a 95       	dec	r24
     554:	f1 f7       	brne	.-4      	; 0x552 <seep_i2c_start+0x12>
     556:	08 95       	ret

00000558 <seep_i2c_stop>:
}


void seep_i2c_stop(void)
{
    SEEP_I2C_PORT &= ~(1<<SEEP_SDA);
     558:	de 98       	cbi	0x1b, 6	; 27
     55a:	82 e0       	ldi	r24, 0x02	; 2
     55c:	8a 95       	dec	r24
     55e:	f1 f7       	brne	.-4      	; 0x55c <seep_i2c_stop+0x4>
    _delay_us(SEEP_I2C_TIME2);
    SEEP_I2C_PORT |= (1<<SEEP_SCL);
     560:	df 9a       	sbi	0x1b, 7	; 27
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	8a 95       	dec	r24
     566:	f1 f7       	brne	.-4      	; 0x564 <seep_i2c_stop+0xc>
    _delay_us(SEEP_I2C_TIME4);
    SEEP_I2C_PORT |= (1<<SEEP_SDA);
     568:	de 9a       	sbi	0x1b, 6	; 27
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	8a 95       	dec	r24
     56e:	f1 f7       	brne	.-4      	; 0x56c <seep_i2c_stop+0x14>
     570:	08 95       	ret

00000572 <seep_i2c_write_ack>:
}


void seep_i2c_write_ack(void)
{
    SEEP_I2C_DDR |= (1<<SEEP_SDA);
     572:	d6 9a       	sbi	0x1a, 6	; 26
    SEEP_I2C_PORT &= ~(1<<SEEP_SDA);
     574:	de 98       	cbi	0x1b, 6	; 27
     576:	82 e0       	ldi	r24, 0x02	; 2
     578:	8a 95       	dec	r24
     57a:	f1 f7       	brne	.-4      	; 0x578 <seep_i2c_write_ack+0x6>

    _delay_us(SEEP_I2C_TIME2);
    SEEP_I2C_PORT |= (1<<SEEP_SCL);
     57c:	df 9a       	sbi	0x1b, 7	; 27
     57e:	82 e0       	ldi	r24, 0x02	; 2
     580:	8a 95       	dec	r24
     582:	f1 f7       	brne	.-4      	; 0x580 <seep_i2c_write_ack+0xe>
    _delay_us(SEEP_I2C_TIME2);
    SEEP_I2C_PORT &= ~(1<<SEEP_SCL);
     584:	df 98       	cbi	0x1b, 7	; 27
    SEEP_I2C_PORT |= (1<<SEEP_SDA);
     586:	de 9a       	sbi	0x1b, 6	; 27
     588:	08 95       	ret

0000058a <seep_i2c_read_ack>:

uint8_t seep_i2c_read_ack(void)
{
    uint8_t ack;

    SEEP_I2C_DDR &= ~(1<<SEEP_SDA);
     58a:	d6 98       	cbi	0x1a, 6	; 26
    SEEP_I2C_PORT |= (1<<SEEP_SDA);
     58c:	de 9a       	sbi	0x1b, 6	; 27
     58e:	82 e0       	ldi	r24, 0x02	; 2
     590:	8a 95       	dec	r24
     592:	f1 f7       	brne	.-4      	; 0x590 <seep_i2c_read_ack+0x6>
    _delay_us(SEEP_I2C_TIME2);

    SEEP_I2C_PORT |= (1<<SEEP_SCL);
     594:	df 9a       	sbi	0x1b, 7	; 27
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	8a 95       	dec	r24
     59a:	f1 f7       	brne	.-4      	; 0x598 <seep_i2c_read_ack+0xe>

    _delay_us(SEEP_I2C_TIME4);
    ack = SEEP_I2C_PIN & (1<<SEEP_SDA);
     59c:	89 b3       	in	r24, 0x19	; 25
     59e:	91 e0       	ldi	r25, 0x01	; 1
     5a0:	9a 95       	dec	r25
     5a2:	f1 f7       	brne	.-4      	; 0x5a0 <seep_i2c_read_ack+0x16>
    _delay_us(SEEP_I2C_TIME4);

    SEEP_I2C_PORT &= ~(1<<SEEP_SCL);
     5a4:	df 98       	cbi	0x1b, 7	; 27
     5a6:	92 e0       	ldi	r25, 0x02	; 2
     5a8:	9a 95       	dec	r25
     5aa:	f1 f7       	brne	.-4      	; 0x5a8 <seep_i2c_read_ack+0x1e>
    _delay_us(SEEP_I2C_TIME2);
    SEEP_I2C_DDR |= (1<<SEEP_SDA);
     5ac:	d6 9a       	sbi	0x1a, 6	; 26

    if (ack)
        return 1;
    else
        return 0;
}
     5ae:	86 fb       	bst	r24, 6
     5b0:	88 27       	eor	r24, r24
     5b2:	80 f9       	bld	r24, 0
     5b4:	08 95       	ret

000005b6 <seep_i2c_write_byte>:


/* Отправляет один байт по I2C. */

void seep_i2c_write_byte( uint8_t byte )
{
     5b6:	28 e0       	ldi	r18, 0x08	; 8
     5b8:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t mask = 0x80;
     5ba:	90 e8       	ldi	r25, 0x80	; 128
     5bc:	52 e0       	ldi	r21, 0x02	; 2

    while ( mask )
    {
        if (mask & byte)    SEEP_I2C_PORT |= (1<<SEEP_SDA);
     5be:	49 2f       	mov	r20, r25
     5c0:	48 23       	and	r20, r24
     5c2:	11 f0       	breq	.+4      	; 0x5c8 <seep_i2c_write_byte+0x12>
     5c4:	de 9a       	sbi	0x1b, 6	; 27
     5c6:	01 c0       	rjmp	.+2      	; 0x5ca <seep_i2c_write_byte+0x14>
        else                SEEP_I2C_PORT &= ~(1<<SEEP_SDA);
     5c8:	de 98       	cbi	0x1b, 6	; 27
        mask >>= 1;
     5ca:	96 95       	lsr	r25
     5cc:	45 2f       	mov	r20, r21
     5ce:	4a 95       	dec	r20
     5d0:	f1 f7       	brne	.-4      	; 0x5ce <seep_i2c_write_byte+0x18>

        _delay_us(SEEP_I2C_TIME2);
        SEEP_I2C_PORT |= (1<<SEEP_SCL);
     5d2:	df 9a       	sbi	0x1b, 7	; 27
     5d4:	45 2f       	mov	r20, r21
     5d6:	4a 95       	dec	r20
     5d8:	f1 f7       	brne	.-4      	; 0x5d6 <seep_i2c_write_byte+0x20>
        _delay_us(SEEP_I2C_TIME2);
        SEEP_I2C_PORT &= ~(1<<SEEP_SCL);
     5da:	df 98       	cbi	0x1b, 7	; 27
     5dc:	21 50       	subi	r18, 0x01	; 1
     5de:	31 09       	sbc	r19, r1

void seep_i2c_write_byte( uint8_t byte )
{
    uint8_t mask = 0x80;

    while ( mask )
     5e0:	21 15       	cp	r18, r1
     5e2:	31 05       	cpc	r19, r1
     5e4:	61 f7       	brne	.-40     	; 0x5be <seep_i2c_write_byte+0x8>
        _delay_us(SEEP_I2C_TIME2);
        SEEP_I2C_PORT |= (1<<SEEP_SCL);
        _delay_us(SEEP_I2C_TIME2);
        SEEP_I2C_PORT &= ~(1<<SEEP_SCL);
    }
}
     5e6:	08 95       	ret

000005e8 <seep_i2c_read_byte>:

uint8_t seep_i2c_read_byte(void)
{
    uint8_t byte = 0, mask = 0x80;

    SEEP_I2C_DDR &= ~(1<<SEEP_SDA);
     5e8:	d6 98       	cbi	0x1a, 6	; 26
     5ea:	28 e0       	ldi	r18, 0x08	; 8
     5ec:	30 e0       	ldi	r19, 0x00	; 0

/* функция чтения байта по I2C, возвращает прочитаный байт */

uint8_t seep_i2c_read_byte(void)
{
    uint8_t byte = 0, mask = 0x80;
     5ee:	90 e8       	ldi	r25, 0x80	; 128
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	62 e0       	ldi	r22, 0x02	; 2
     5f4:	51 e0       	ldi	r21, 0x01	; 1
     5f6:	46 2f       	mov	r20, r22
     5f8:	4a 95       	dec	r20
     5fa:	f1 f7       	brne	.-4      	; 0x5f8 <seep_i2c_read_byte+0x10>
    SEEP_I2C_DDR &= ~(1<<SEEP_SDA);

    while ( mask )
    {
        _delay_us(SEEP_I2C_TIME2);
        SEEP_I2C_PORT |= (1<<SEEP_SCL);
     5fc:	df 9a       	sbi	0x1b, 7	; 27
     5fe:	45 2f       	mov	r20, r21
     600:	4a 95       	dec	r20
     602:	f1 f7       	brne	.-4      	; 0x600 <seep_i2c_read_byte+0x18>
        _delay_us(SEEP_I2C_TIME4);

        if (SEEP_I2C_PIN & (1<<SEEP_SDA))
     604:	ce 99       	sbic	0x19, 6	; 25
            byte |= mask;
     606:	89 2b       	or	r24, r25
        mask >>= 1;
     608:	96 95       	lsr	r25
     60a:	45 2f       	mov	r20, r21
     60c:	4a 95       	dec	r20
     60e:	f1 f7       	brne	.-4      	; 0x60c <seep_i2c_read_byte+0x24>

        _delay_us(SEEP_I2C_TIME4);
        SEEP_I2C_PORT &= ~(1<<SEEP_SCL);
     610:	df 98       	cbi	0x1b, 7	; 27
     612:	21 50       	subi	r18, 0x01	; 1
     614:	31 09       	sbc	r19, r1
{
    uint8_t byte = 0, mask = 0x80;

    SEEP_I2C_DDR &= ~(1<<SEEP_SDA);

    while ( mask )
     616:	21 15       	cp	r18, r1
     618:	31 05       	cpc	r19, r1
     61a:	69 f7       	brne	.-38     	; 0x5f6 <seep_i2c_read_byte+0xe>
        mask >>= 1;

        _delay_us(SEEP_I2C_TIME4);
        SEEP_I2C_PORT &= ~(1<<SEEP_SCL);
    }
    SEEP_I2C_DDR |= (1<<SEEP_SDA);
     61c:	d6 9a       	sbi	0x1a, 6	; 26

    return byte;
}
     61e:	08 95       	ret

00000620 <seep_write_byte>:


/* Запись нескольких одного байта по I2C. Возвращает значение > 0 если нет связи. */

uint8_t seep_write_byte( uint16_t address, uint8_t data )
{
     620:	0f 93       	push	r16
     622:	1f 93       	push	r17
     624:	cf 93       	push	r28
     626:	df 93       	push	r29
     628:	00 d0       	rcall	.+0      	; 0x62a <seep_write_byte+0xa>
     62a:	cd b7       	in	r28, 0x3d	; 61
     62c:	de b7       	in	r29, 0x3e	; 62
     62e:	08 2f       	mov	r16, r24
    uint8_t ack = 0;

    seep_i2c_start();
     630:	6a 83       	std	Y+2, r22	; 0x02
     632:	99 83       	std	Y+1, r25	; 0x01
     634:	0e 94 a0 02 	call	0x540	; 0x540 <seep_i2c_start>

    seep_i2c_write_byte(SEEP_ADDRESS_W);
     638:	80 ea       	ldi	r24, 0xA0	; 160
     63a:	0e 94 db 02 	call	0x5b6	; 0x5b6 <seep_i2c_write_byte>
    ack += seep_i2c_read_ack();
     63e:	0e 94 c5 02 	call	0x58a	; 0x58a <seep_i2c_read_ack>
     642:	18 2f       	mov	r17, r24

    seep_i2c_write_byte((uint8_t)(address>>8));
     644:	99 81       	ldd	r25, Y+1	; 0x01
     646:	89 2f       	mov	r24, r25
     648:	0e 94 db 02 	call	0x5b6	; 0x5b6 <seep_i2c_write_byte>
    ack += seep_i2c_read_ack();
     64c:	0e 94 c5 02 	call	0x58a	; 0x58a <seep_i2c_read_ack>
     650:	18 0f       	add	r17, r24

    seep_i2c_write_byte((uint8_t)address);
     652:	80 2f       	mov	r24, r16
     654:	0e 94 db 02 	call	0x5b6	; 0x5b6 <seep_i2c_write_byte>
    ack += seep_i2c_read_ack();
     658:	0e 94 c5 02 	call	0x58a	; 0x58a <seep_i2c_read_ack>
     65c:	18 0f       	add	r17, r24

    seep_i2c_write_byte(data);
     65e:	6a 81       	ldd	r22, Y+2	; 0x02
     660:	86 2f       	mov	r24, r22
     662:	0e 94 db 02 	call	0x5b6	; 0x5b6 <seep_i2c_write_byte>
    ack += seep_i2c_read_ack();
     666:	0e 94 c5 02 	call	0x58a	; 0x58a <seep_i2c_read_ack>
     66a:	18 0f       	add	r17, r24

    seep_i2c_stop();
     66c:	0e 94 ac 02 	call	0x558	; 0x558 <seep_i2c_stop>

    return ack;
}
     670:	81 2f       	mov	r24, r17
     672:	0f 90       	pop	r0
     674:	0f 90       	pop	r0
     676:	df 91       	pop	r29
     678:	cf 91       	pop	r28
     67a:	1f 91       	pop	r17
     67c:	0f 91       	pop	r16
     67e:	08 95       	ret

00000680 <seep_write>:


/* Запись нескольких байт по I2C. Возвращает значение > 0 если нет связи. */

uint8_t seep_write( uint16_t address, uint8_t *data, uint8_t ndata )
{
     680:	cf 92       	push	r12
     682:	df 92       	push	r13
     684:	ff 92       	push	r15
     686:	0f 93       	push	r16
     688:	1f 93       	push	r17
     68a:	cf 93       	push	r28
     68c:	df 93       	push	r29
     68e:	00 d0       	rcall	.+0      	; 0x690 <seep_write+0x10>
     690:	1f 92       	push	r1
     692:	cd b7       	in	r28, 0x3d	; 61
     694:	de b7       	in	r29, 0x3e	; 62
     696:	f8 2e       	mov	r15, r24
     698:	04 2f       	mov	r16, r20
    uint8_t i, ack = 0;

    seep_i2c_start();
     69a:	6a 83       	std	Y+2, r22	; 0x02
     69c:	7b 83       	std	Y+3, r23	; 0x03
     69e:	99 83       	std	Y+1, r25	; 0x01
     6a0:	0e 94 a0 02 	call	0x540	; 0x540 <seep_i2c_start>

    seep_i2c_write_byte(SEEP_ADDRESS_W);
     6a4:	80 ea       	ldi	r24, 0xA0	; 160
     6a6:	0e 94 db 02 	call	0x5b6	; 0x5b6 <seep_i2c_write_byte>
    ack += seep_i2c_read_ack();
     6aa:	0e 94 c5 02 	call	0x58a	; 0x58a <seep_i2c_read_ack>
     6ae:	18 2f       	mov	r17, r24

    seep_i2c_write_byte((uint8_t)(address>>8));
     6b0:	99 81       	ldd	r25, Y+1	; 0x01
     6b2:	89 2f       	mov	r24, r25
     6b4:	0e 94 db 02 	call	0x5b6	; 0x5b6 <seep_i2c_write_byte>
    ack += seep_i2c_read_ack();
     6b8:	0e 94 c5 02 	call	0x58a	; 0x58a <seep_i2c_read_ack>
     6bc:	18 0f       	add	r17, r24

    seep_i2c_write_byte((uint8_t)address);
     6be:	8f 2d       	mov	r24, r15
     6c0:	0e 94 db 02 	call	0x5b6	; 0x5b6 <seep_i2c_write_byte>
    ack += seep_i2c_read_ack();
     6c4:	0e 94 c5 02 	call	0x58a	; 0x58a <seep_i2c_read_ack>
     6c8:	18 0f       	add	r17, r24
     6ca:	6a 81       	ldd	r22, Y+2	; 0x02
     6cc:	f6 2e       	mov	r15, r22

    for (i=0 ; i<ndata ; ++i)
     6ce:	c6 2e       	mov	r12, r22
     6d0:	7b 81       	ldd	r23, Y+3	; 0x03
     6d2:	d7 2e       	mov	r13, r23
     6d4:	8c 2d       	mov	r24, r12
     6d6:	8f 19       	sub	r24, r15
     6d8:	80 17       	cp	r24, r16
     6da:	48 f4       	brcc	.+18     	; 0x6ee <seep_write+0x6e>
    {
        seep_i2c_write_byte(data[i]);
     6dc:	f6 01       	movw	r30, r12
     6de:	81 91       	ld	r24, Z+
     6e0:	6f 01       	movw	r12, r30
     6e2:	0e 94 db 02 	call	0x5b6	; 0x5b6 <seep_i2c_write_byte>
        ack += seep_i2c_read_ack();
     6e6:	0e 94 c5 02 	call	0x58a	; 0x58a <seep_i2c_read_ack>
     6ea:	18 0f       	add	r17, r24
     6ec:	f3 cf       	rjmp	.-26     	; 0x6d4 <seep_write+0x54>
    }

    seep_i2c_stop();
     6ee:	0e 94 ac 02 	call	0x558	; 0x558 <seep_i2c_stop>

    return ack;
}
     6f2:	81 2f       	mov	r24, r17
     6f4:	0f 90       	pop	r0
     6f6:	0f 90       	pop	r0
     6f8:	0f 90       	pop	r0
     6fa:	df 91       	pop	r29
     6fc:	cf 91       	pop	r28
     6fe:	1f 91       	pop	r17
     700:	0f 91       	pop	r16
     702:	ff 90       	pop	r15
     704:	df 90       	pop	r13
     706:	cf 90       	pop	r12
     708:	08 95       	ret

0000070a <seep_read_byte>:


/* Чтение одного байта по I2C. Возвращает считанное число, если успешно, иначе возвращает 0 */

uint8_t seep_read_byte( uint16_t address )
{
     70a:	0f 93       	push	r16
     70c:	1f 93       	push	r17
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	1f 92       	push	r1
     714:	cd b7       	in	r28, 0x3d	; 61
     716:	de b7       	in	r29, 0x3e	; 62
     718:	08 2f       	mov	r16, r24
    uint8_t ack = 0, data;

    seep_i2c_start();
     71a:	99 83       	std	Y+1, r25	; 0x01
     71c:	0e 94 a0 02 	call	0x540	; 0x540 <seep_i2c_start>

    seep_i2c_write_byte(SEEP_ADDRESS_W);
     720:	80 ea       	ldi	r24, 0xA0	; 160
     722:	0e 94 db 02 	call	0x5b6	; 0x5b6 <seep_i2c_write_byte>
    ack += seep_i2c_read_ack();
     726:	0e 94 c5 02 	call	0x58a	; 0x58a <seep_i2c_read_ack>
     72a:	18 2f       	mov	r17, r24

    seep_i2c_write_byte((uint8_t)(address>>8));
     72c:	99 81       	ldd	r25, Y+1	; 0x01
     72e:	89 2f       	mov	r24, r25
     730:	0e 94 db 02 	call	0x5b6	; 0x5b6 <seep_i2c_write_byte>
    ack += seep_i2c_read_ack();
     734:	0e 94 c5 02 	call	0x58a	; 0x58a <seep_i2c_read_ack>
     738:	18 0f       	add	r17, r24

    seep_i2c_write_byte((uint8_t)address);
     73a:	80 2f       	mov	r24, r16
     73c:	0e 94 db 02 	call	0x5b6	; 0x5b6 <seep_i2c_write_byte>
    ack += seep_i2c_read_ack();
     740:	0e 94 c5 02 	call	0x58a	; 0x58a <seep_i2c_read_ack>
     744:	18 0f       	add	r17, r24
    SEEP_I2C_PORT |= (1<<SEEP_SCL);
     746:	df 9a       	sbi	0x1b, 7	; 27
    seep_i2c_start();
     748:	0e 94 a0 02 	call	0x540	; 0x540 <seep_i2c_start>

    seep_i2c_write_byte(SEEP_ADDRESS_R);
     74c:	81 ea       	ldi	r24, 0xA1	; 161
     74e:	0e 94 db 02 	call	0x5b6	; 0x5b6 <seep_i2c_write_byte>
    seep_i2c_write_ack();
     752:	0e 94 b9 02 	call	0x572	; 0x572 <seep_i2c_write_ack>

    data = seep_i2c_read_byte();
     756:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <seep_i2c_read_byte>
     75a:	92 e0       	ldi	r25, 0x02	; 2
     75c:	9a 95       	dec	r25
     75e:	f1 f7       	brne	.-4      	; 0x75c <seep_read_byte+0x52>
    _delay_us(SEEP_I2C_TIME2);
    SEEP_I2C_PORT |= (1<<SEEP_SDA) | (1<<SEEP_SCL);
     760:	9b b3       	in	r25, 0x1b	; 27
     762:	90 6c       	ori	r25, 0xC0	; 192
     764:	9b bb       	out	0x1b, r25	; 27
     766:	92 e0       	ldi	r25, 0x02	; 2
     768:	9a 95       	dec	r25
     76a:	f1 f7       	brne	.-4      	; 0x768 <seep_read_byte+0x5e>
    _delay_us(SEEP_I2C_TIME2);
    SEEP_I2C_PORT &= ~(1<<SEEP_SCL);
     76c:	df 98       	cbi	0x1b, 7	; 27

    seep_i2c_stop();
     76e:	89 83       	std	Y+1, r24	; 0x01
     770:	0e 94 ac 02 	call	0x558	; 0x558 <seep_i2c_stop>

    if ( ack > 0 )
     774:	89 81       	ldd	r24, Y+1	; 0x01
     776:	11 11       	cpse	r17, r1
        return 0;
     778:	80 e0       	ldi	r24, 0x00	; 0
    else
        return data;
}
     77a:	0f 90       	pop	r0
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	0f 91       	pop	r16
     784:	08 95       	ret

00000786 <seep_wait>:
}


/* Ожидание пока eeprom не будет готова принять байт, или пока таймаут не пройдет */
void seep_wait(void)
{
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
    uint16_t timeout = 0;
     78a:	c0 e0       	ldi	r28, 0x00	; 0
     78c:	d0 e0       	ldi	r29, 0x00	; 0

    while( (seep_read_byte(0x0002) == 0) && (timeout < SEEP_TIMEOUT) )
     78e:	82 e0       	ldi	r24, 0x02	; 2
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	0e 94 85 03 	call	0x70a	; 0x70a <seep_read_byte>
     796:	81 11       	cpse	r24, r1
     798:	0f c0       	rjmp	.+30     	; 0x7b8 <seep_wait+0x32>
     79a:	be 01       	movw	r22, r28
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	0e 94 a7 14 	call	0x294e	; 0x294e <__floatunsisf>
     7a4:	22 e7       	ldi	r18, 0x72	; 114
     7a6:	3c e9       	ldi	r19, 0x9C	; 156
     7a8:	4d e2       	ldi	r20, 0x2D	; 45
     7aa:	55 e4       	ldi	r21, 0x45	; 69
     7ac:	0e 94 a3 14 	call	0x2946	; 0x2946 <__cmpsf2>
     7b0:	87 ff       	sbrs	r24, 7
     7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <seep_wait+0x32>
        ++timeout;
     7b4:	21 96       	adiw	r28, 0x01	; 1
     7b6:	eb cf       	rjmp	.-42     	; 0x78e <seep_wait+0x8>
}
     7b8:	df 91       	pop	r29
     7ba:	cf 91       	pop	r28
     7bc:	08 95       	ret

000007be <seep_init>:
}



uint8_t seep_init(void)
{
     7be:	cf 93       	push	r28
    uint8_t ack = 0;

    seep_i2c_init();
     7c0:	0e 94 99 02 	call	0x532	; 0x532 <seep_i2c_init>

    if ( seep_read_byte(0x0002) != 0xed )
     7c4:	82 e0       	ldi	r24, 0x02	; 2
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	0e 94 85 03 	call	0x70a	; 0x70a <seep_read_byte>
     7cc:	8d 3e       	cpi	r24, 0xED	; 237
     7ce:	d9 f0       	breq	.+54     	; 0x806 <seep_init+0x48>
    {
        seep_wait();
     7d0:	0e 94 c3 03 	call	0x786	; 0x786 <seep_wait>
        ack += seep_write_byte(0x0000, 0x00);
     7d4:	60 e0       	ldi	r22, 0x00	; 0
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	0e 94 10 03 	call	0x620	; 0x620 <seep_write_byte>
     7de:	c8 2f       	mov	r28, r24
        seep_wait();
     7e0:	0e 94 c3 03 	call	0x786	; 0x786 <seep_wait>
        ack += seep_write_byte(0x0001, 0x08);
     7e4:	68 e0       	ldi	r22, 0x08	; 8
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	0e 94 10 03 	call	0x620	; 0x620 <seep_write_byte>
     7ee:	c8 0f       	add	r28, r24
        seep_wait();
     7f0:	0e 94 c3 03 	call	0x786	; 0x786 <seep_wait>
        ack += seep_write_byte(0x0002, 0xed);
     7f4:	6d ee       	ldi	r22, 0xED	; 237
     7f6:	82 e0       	ldi	r24, 0x02	; 2
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	0e 94 10 03 	call	0x620	; 0x620 <seep_write_byte>
     7fe:	c8 0f       	add	r28, r24
        seep_wait();
     800:	0e 94 c3 03 	call	0x786	; 0x786 <seep_wait>
     804:	01 c0       	rjmp	.+2      	; 0x808 <seep_init+0x4a>



uint8_t seep_init(void)
{
    uint8_t ack = 0;
     806:	c0 e0       	ldi	r28, 0x00	; 0
        seep_wait();
        ack += seep_write_byte(0x0002, 0xed);
        seep_wait();
    }
    return ack;
}
     808:	8c 2f       	mov	r24, r28
     80a:	cf 91       	pop	r28
     80c:	08 95       	ret

0000080e <seep_read>:


/* Чтение нескольких байт подряд по I2C */

uint8_t seep_read( uint16_t address, uint8_t *data, uint8_t ndata )
{
     80e:	af 92       	push	r10
     810:	bf 92       	push	r11
     812:	df 92       	push	r13
     814:	ef 92       	push	r14
     816:	ff 92       	push	r15
     818:	0f 93       	push	r16
     81a:	1f 93       	push	r17
     81c:	cf 93       	push	r28
     81e:	df 93       	push	r29
     820:	1f 92       	push	r1
     822:	cd b7       	in	r28, 0x3d	; 61
     824:	de b7       	in	r29, 0x3e	; 62
     826:	d8 2e       	mov	r13, r24
     828:	8b 01       	movw	r16, r22
     82a:	e4 2e       	mov	r14, r20
    uint8_t i, ack = 0;

    seep_i2c_start();
     82c:	99 83       	std	Y+1, r25	; 0x01
     82e:	0e 94 a0 02 	call	0x540	; 0x540 <seep_i2c_start>

    seep_i2c_write_byte(SEEP_ADDRESS_W);
     832:	80 ea       	ldi	r24, 0xA0	; 160
     834:	0e 94 db 02 	call	0x5b6	; 0x5b6 <seep_i2c_write_byte>
    ack += seep_i2c_read_ack();
     838:	0e 94 c5 02 	call	0x58a	; 0x58a <seep_i2c_read_ack>
     83c:	f8 2e       	mov	r15, r24

    seep_i2c_write_byte((uint8_t)(address>>8));
     83e:	99 81       	ldd	r25, Y+1	; 0x01
     840:	89 2f       	mov	r24, r25
     842:	0e 94 db 02 	call	0x5b6	; 0x5b6 <seep_i2c_write_byte>
    ack += seep_i2c_read_ack();
     846:	0e 94 c5 02 	call	0x58a	; 0x58a <seep_i2c_read_ack>
     84a:	f8 0e       	add	r15, r24

    seep_i2c_write_byte((uint8_t)address);
     84c:	8d 2d       	mov	r24, r13
     84e:	0e 94 db 02 	call	0x5b6	; 0x5b6 <seep_i2c_write_byte>
    ack += seep_i2c_read_ack();
     852:	0e 94 c5 02 	call	0x58a	; 0x58a <seep_i2c_read_ack>
     856:	f8 0e       	add	r15, r24
    SEEP_I2C_PORT |= (1<<SEEP_SCL);
     858:	df 9a       	sbi	0x1b, 7	; 27
    seep_i2c_start();
     85a:	0e 94 a0 02 	call	0x540	; 0x540 <seep_i2c_start>

    seep_i2c_write_byte(SEEP_ADDRESS_R);
     85e:	81 ea       	ldi	r24, 0xA1	; 161
     860:	0e 94 db 02 	call	0x5b6	; 0x5b6 <seep_i2c_write_byte>
    seep_i2c_write_ack();
     864:	0e 94 b9 02 	call	0x572	; 0x572 <seep_i2c_write_ack>

    --ndata;
     868:	ea 94       	dec	r14
     86a:	d0 2e       	mov	r13, r16
    for (i=0 ; i<ndata ; ++i)
     86c:	58 01       	movw	r10, r16
     86e:	8a 2d       	mov	r24, r10
     870:	8d 19       	sub	r24, r13
     872:	8e 15       	cp	r24, r14
     874:	40 f4       	brcc	.+16     	; 0x886 <__stack+0x27>
    {
        data[i] = seep_i2c_read_byte();
     876:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <seep_i2c_read_byte>
     87a:	f5 01       	movw	r30, r10
     87c:	81 93       	st	Z+, r24
     87e:	5f 01       	movw	r10, r30
        seep_i2c_write_ack();
     880:	0e 94 b9 02 	call	0x572	; 0x572 <seep_i2c_write_ack>
     884:	f4 cf       	rjmp	.-24     	; 0x86e <__stack+0xf>
    }

    data[ndata] = seep_i2c_read_byte();
     886:	0e 0d       	add	r16, r14
     888:	11 1d       	adc	r17, r1
     88a:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <seep_i2c_read_byte>
     88e:	f8 01       	movw	r30, r16
     890:	80 83       	st	Z, r24
     892:	82 e0       	ldi	r24, 0x02	; 2
     894:	8a 95       	dec	r24
     896:	f1 f7       	brne	.-4      	; 0x894 <__stack+0x35>
    _delay_us(SEEP_I2C_TIME2);
    SEEP_I2C_PORT |= (1<<SEEP_SDA) | (1<<SEEP_SCL);
     898:	8b b3       	in	r24, 0x1b	; 27
     89a:	80 6c       	ori	r24, 0xC0	; 192
     89c:	8b bb       	out	0x1b, r24	; 27
     89e:	82 e0       	ldi	r24, 0x02	; 2
     8a0:	8a 95       	dec	r24
     8a2:	f1 f7       	brne	.-4      	; 0x8a0 <__stack+0x41>
    _delay_us(SEEP_I2C_TIME2);
    SEEP_I2C_PORT &= ~(1<<SEEP_SCL);
     8a4:	df 98       	cbi	0x1b, 7	; 27

    seep_i2c_stop();
     8a6:	0e 94 ac 02 	call	0x558	; 0x558 <seep_i2c_stop>

    return ack;
}
     8aa:	8f 2d       	mov	r24, r15
     8ac:	0f 90       	pop	r0
     8ae:	df 91       	pop	r29
     8b0:	cf 91       	pop	r28
     8b2:	1f 91       	pop	r17
     8b4:	0f 91       	pop	r16
     8b6:	ff 90       	pop	r15
     8b8:	ef 90       	pop	r14
     8ba:	df 90       	pop	r13
     8bc:	bf 90       	pop	r11
     8be:	af 90       	pop	r10
     8c0:	08 95       	ret

000008c2 <ds_i2c_init>:



void ds_i2c_init(void)
{
    DS_I2C_DDR |= (1<<SCL) | (1<<SDA);
     8c2:	81 b3       	in	r24, 0x11	; 17
     8c4:	80 63       	ori	r24, 0x30	; 48
     8c6:	81 bb       	out	0x11, r24	; 17
    DS_I2C_PORT |= (1<<SCL) | (1<<SDA);
     8c8:	82 b3       	in	r24, 0x12	; 18
     8ca:	80 63       	ori	r24, 0x30	; 48
     8cc:	82 bb       	out	0x12, r24	; 18
     8ce:	08 95       	ret

000008d0 <ds_i2c_start>:
     8d0:	8d e0       	ldi	r24, 0x0D	; 13
     8d2:	8a 95       	dec	r24
     8d4:	f1 f7       	brne	.-4      	; 0x8d2 <ds_i2c_start+0x2>


void ds_i2c_start(void)
{
    _delay_us(I2C_TIME4);
    DS_I2C_PORT &= ~(1<<SDA);
     8d6:	94 98       	cbi	0x12, 4	; 18
     8d8:	8d e0       	ldi	r24, 0x0D	; 13
     8da:	8a 95       	dec	r24
     8dc:	f1 f7       	brne	.-4      	; 0x8da <ds_i2c_start+0xa>
    _delay_us(I2C_TIME4);
    DS_I2C_PORT &= ~(1<<SCL);
     8de:	95 98       	cbi	0x12, 5	; 18
     8e0:	8a e1       	ldi	r24, 0x1A	; 26
     8e2:	8a 95       	dec	r24
     8e4:	f1 f7       	brne	.-4      	; 0x8e2 <ds_i2c_start+0x12>
     8e6:	08 95       	ret

000008e8 <ds_i2c_stop>:
}


void ds_i2c_stop(void)
{
    DS_I2C_PORT &= ~(1<<SDA);
     8e8:	94 98       	cbi	0x12, 4	; 18
     8ea:	8a e1       	ldi	r24, 0x1A	; 26
     8ec:	8a 95       	dec	r24
     8ee:	f1 f7       	brne	.-4      	; 0x8ec <ds_i2c_stop+0x4>
    _delay_us(I2C_TIME2);
    DS_I2C_PORT |= (1<<SCL);
     8f0:	95 9a       	sbi	0x12, 5	; 18
     8f2:	8d e0       	ldi	r24, 0x0D	; 13
     8f4:	8a 95       	dec	r24
     8f6:	f1 f7       	brne	.-4      	; 0x8f4 <ds_i2c_stop+0xc>
    _delay_us(I2C_TIME4);
    DS_I2C_PORT |= (1<<SDA);
     8f8:	94 9a       	sbi	0x12, 4	; 18
     8fa:	8d e0       	ldi	r24, 0x0D	; 13
     8fc:	8a 95       	dec	r24
     8fe:	f1 f7       	brne	.-4      	; 0x8fc <ds_i2c_stop+0x14>
     900:	08 95       	ret

00000902 <ds_i2c_write_byte>:


/* Отправляет один байт по I2C. Возвращает 0 если подтверждение принято, иначе 1 */

uint8_t ds_i2c_write_byte( uint8_t byte )
{
     902:	28 e0       	ldi	r18, 0x08	; 8
     904:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t ack, mask = 0x80;
     906:	90 e8       	ldi	r25, 0x80	; 128
     908:	5a e1       	ldi	r21, 0x1A	; 26

    while ( mask )
    {
        if (mask & byte)    DS_I2C_PORT |= (1<<SDA);
     90a:	49 2f       	mov	r20, r25
     90c:	48 23       	and	r20, r24
     90e:	11 f0       	breq	.+4      	; 0x914 <ds_i2c_write_byte+0x12>
     910:	94 9a       	sbi	0x12, 4	; 18
     912:	01 c0       	rjmp	.+2      	; 0x916 <ds_i2c_write_byte+0x14>
        else                DS_I2C_PORT &= ~(1<<SDA);
     914:	94 98       	cbi	0x12, 4	; 18
        mask >>= 1;
     916:	96 95       	lsr	r25
     918:	45 2f       	mov	r20, r21
     91a:	4a 95       	dec	r20
     91c:	f1 f7       	brne	.-4      	; 0x91a <ds_i2c_write_byte+0x18>

        _delay_us(I2C_TIME2);
        DS_I2C_PORT |= (1<<SCL);
     91e:	95 9a       	sbi	0x12, 5	; 18
     920:	45 2f       	mov	r20, r21
     922:	4a 95       	dec	r20
     924:	f1 f7       	brne	.-4      	; 0x922 <ds_i2c_write_byte+0x20>
        _delay_us(I2C_TIME2);
        DS_I2C_PORT &= ~(1<<SCL);
     926:	95 98       	cbi	0x12, 5	; 18
     928:	21 50       	subi	r18, 0x01	; 1
     92a:	31 09       	sbc	r19, r1

uint8_t ds_i2c_write_byte( uint8_t byte )
{
    uint8_t ack, mask = 0x80;

    while ( mask )
     92c:	21 15       	cp	r18, r1
     92e:	31 05       	cpc	r19, r1
     930:	61 f7       	brne	.-40     	; 0x90a <ds_i2c_write_byte+0x8>
        DS_I2C_PORT |= (1<<SCL);
        _delay_us(I2C_TIME2);
        DS_I2C_PORT &= ~(1<<SCL);
    }

    DS_I2C_DDR &= ~(1<<SDA);
     932:	8c 98       	cbi	0x11, 4	; 17
    DS_I2C_PORT |= (1<<SDA);
     934:	94 9a       	sbi	0x12, 4	; 18
     936:	8a e1       	ldi	r24, 0x1A	; 26
     938:	8a 95       	dec	r24
     93a:	f1 f7       	brne	.-4      	; 0x938 <ds_i2c_write_byte+0x36>
    _delay_us(I2C_TIME2);

    DS_I2C_PORT |= (1<<SCL);
     93c:	95 9a       	sbi	0x12, 5	; 18
     93e:	8d e0       	ldi	r24, 0x0D	; 13
     940:	8a 95       	dec	r24
     942:	f1 f7       	brne	.-4      	; 0x940 <ds_i2c_write_byte+0x3e>

    _delay_us(I2C_TIME4);
    ack = DS_I2C_PIN & (1<<SDA);
     944:	80 b3       	in	r24, 0x10	; 16
     946:	9d e0       	ldi	r25, 0x0D	; 13
     948:	9a 95       	dec	r25
     94a:	f1 f7       	brne	.-4      	; 0x948 <ds_i2c_write_byte+0x46>
    _delay_us(I2C_TIME4);

    DS_I2C_PORT &= ~(1<<SCL);
     94c:	95 98       	cbi	0x12, 5	; 18
     94e:	9a e1       	ldi	r25, 0x1A	; 26
     950:	9a 95       	dec	r25
     952:	f1 f7       	brne	.-4      	; 0x950 <ds_i2c_write_byte+0x4e>
    _delay_us(I2C_TIME2);
    DS_I2C_DDR |= (1<<SDA);
     954:	8c 9a       	sbi	0x11, 4	; 17

    if (ack)
        return 1;
    else
        return 0;
}
     956:	82 95       	swap	r24
     958:	81 70       	andi	r24, 0x01	; 1
     95a:	08 95       	ret

0000095c <ds_i2c_read_byte>:

uint8_t ds_i2c_read_byte(void)
{
    uint8_t byte = 0, mask = 0x80;

    DS_I2C_DDR &= ~(1<<SDA);
     95c:	8c 98       	cbi	0x11, 4	; 17
     95e:	28 e0       	ldi	r18, 0x08	; 8
     960:	30 e0       	ldi	r19, 0x00	; 0

/* функция чтения байта по I2C, возвращает прочитаный байт */

uint8_t ds_i2c_read_byte(void)
{
    uint8_t byte = 0, mask = 0x80;
     962:	90 e8       	ldi	r25, 0x80	; 128
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	6a e1       	ldi	r22, 0x1A	; 26
     968:	5d e0       	ldi	r21, 0x0D	; 13
     96a:	46 2f       	mov	r20, r22
     96c:	4a 95       	dec	r20
     96e:	f1 f7       	brne	.-4      	; 0x96c <ds_i2c_read_byte+0x10>
    DS_I2C_DDR &= ~(1<<SDA);

    while ( mask )
    {
        _delay_us(I2C_TIME2);
        DS_I2C_PORT |= (1<<SCL);
     970:	95 9a       	sbi	0x12, 5	; 18
     972:	45 2f       	mov	r20, r21
     974:	4a 95       	dec	r20
     976:	f1 f7       	brne	.-4      	; 0x974 <ds_i2c_read_byte+0x18>
        _delay_us(I2C_TIME4);

        if (DS_I2C_PIN & (1<<SDA))
     978:	84 99       	sbic	0x10, 4	; 16
            byte |= mask;
     97a:	89 2b       	or	r24, r25
        mask >>= 1;
     97c:	96 95       	lsr	r25
     97e:	45 2f       	mov	r20, r21
     980:	4a 95       	dec	r20
     982:	f1 f7       	brne	.-4      	; 0x980 <ds_i2c_read_byte+0x24>

        _delay_us(I2C_TIME4);
        DS_I2C_PORT &= ~(1<<SCL);
     984:	95 98       	cbi	0x12, 5	; 18
     986:	21 50       	subi	r18, 0x01	; 1
     988:	31 09       	sbc	r19, r1
{
    uint8_t byte = 0, mask = 0x80;

    DS_I2C_DDR &= ~(1<<SDA);

    while ( mask )
     98a:	21 15       	cp	r18, r1
     98c:	31 05       	cpc	r19, r1
     98e:	69 f7       	brne	.-38     	; 0x96a <ds_i2c_read_byte+0xe>

        _delay_us(I2C_TIME4);
        DS_I2C_PORT &= ~(1<<SCL);
    }

    DS_I2C_DDR |= (1<<SDA);
     990:	8c 9a       	sbi	0x11, 4	; 17
    DS_I2C_PORT &= ~(1<<SDA);
     992:	94 98       	cbi	0x12, 4	; 18
     994:	9a e1       	ldi	r25, 0x1A	; 26
     996:	9a 95       	dec	r25
     998:	f1 f7       	brne	.-4      	; 0x996 <ds_i2c_read_byte+0x3a>

    _delay_us(I2C_TIME2);
    DS_I2C_PORT |= (1<<SCL);
     99a:	95 9a       	sbi	0x12, 5	; 18
     99c:	9a e1       	ldi	r25, 0x1A	; 26
     99e:	9a 95       	dec	r25
     9a0:	f1 f7       	brne	.-4      	; 0x99e <ds_i2c_read_byte+0x42>
    _delay_us(I2C_TIME2);
    DS_I2C_PORT &= ~(1<<SCL);
     9a2:	95 98       	cbi	0x12, 5	; 18
    DS_I2C_PORT |= (1<<SDA);
     9a4:	94 9a       	sbi	0x12, 4	; 18

    return byte;
}
     9a6:	08 95       	ret

000009a8 <ds_write_byte>:


/* Запись нескольких одного байта по I2C. Возвращает значение > 0 если нет связи. */

uint8_t ds_write_byte( uint8_t address, uint8_t data )
{
     9a8:	0f 93       	push	r16
     9aa:	1f 93       	push	r17
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	1f 92       	push	r1
     9b2:	cd b7       	in	r28, 0x3d	; 61
     9b4:	de b7       	in	r29, 0x3e	; 62
     9b6:	08 2f       	mov	r16, r24
    uint8_t ack = 0;

    ds_i2c_start();
     9b8:	69 83       	std	Y+1, r22	; 0x01
     9ba:	0e 94 68 04 	call	0x8d0	; 0x8d0 <ds_i2c_start>

    ack += ds_i2c_write_byte(DS1307_ADDRESS_W);
     9be:	80 ed       	ldi	r24, 0xD0	; 208
     9c0:	0e 94 81 04 	call	0x902	; 0x902 <ds_i2c_write_byte>
     9c4:	18 2f       	mov	r17, r24
    ack += ds_i2c_write_byte(address);
     9c6:	80 2f       	mov	r24, r16
     9c8:	0e 94 81 04 	call	0x902	; 0x902 <ds_i2c_write_byte>
     9cc:	18 0f       	add	r17, r24
    ack += ds_i2c_write_byte(data);
     9ce:	69 81       	ldd	r22, Y+1	; 0x01
     9d0:	86 2f       	mov	r24, r22
     9d2:	0e 94 81 04 	call	0x902	; 0x902 <ds_i2c_write_byte>
     9d6:	18 0f       	add	r17, r24

    ds_i2c_stop();
     9d8:	0e 94 74 04 	call	0x8e8	; 0x8e8 <ds_i2c_stop>

    return ack;
}
     9dc:	81 2f       	mov	r24, r17
     9de:	0f 90       	pop	r0
     9e0:	df 91       	pop	r29
     9e2:	cf 91       	pop	r28
     9e4:	1f 91       	pop	r17
     9e6:	0f 91       	pop	r16
     9e8:	08 95       	ret

000009ea <ds_write>:


/* Запись нескольких байт по I2C. Возвращает значение > 0 если нет связи. */

uint8_t ds_write( uint8_t address, uint8_t *data, uint8_t ndata )
{
     9ea:	cf 92       	push	r12
     9ec:	df 92       	push	r13
     9ee:	ff 92       	push	r15
     9f0:	0f 93       	push	r16
     9f2:	1f 93       	push	r17
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
     9f8:	00 d0       	rcall	.+0      	; 0x9fa <ds_write+0x10>
     9fa:	cd b7       	in	r28, 0x3d	; 61
     9fc:	de b7       	in	r29, 0x3e	; 62
     9fe:	f8 2e       	mov	r15, r24
     a00:	04 2f       	mov	r16, r20
    uint8_t i, ack = 0;

    ds_i2c_start();
     a02:	69 83       	std	Y+1, r22	; 0x01
     a04:	7a 83       	std	Y+2, r23	; 0x02
     a06:	0e 94 68 04 	call	0x8d0	; 0x8d0 <ds_i2c_start>

    ack += ds_i2c_write_byte(DS1307_ADDRESS_W);
     a0a:	80 ed       	ldi	r24, 0xD0	; 208
     a0c:	0e 94 81 04 	call	0x902	; 0x902 <ds_i2c_write_byte>
     a10:	18 2f       	mov	r17, r24
    ack += ds_i2c_write_byte(address);
     a12:	8f 2d       	mov	r24, r15
     a14:	0e 94 81 04 	call	0x902	; 0x902 <ds_i2c_write_byte>
     a18:	18 0f       	add	r17, r24
     a1a:	69 81       	ldd	r22, Y+1	; 0x01
     a1c:	f6 2e       	mov	r15, r22

    for (i=0 ; i<ndata ; ++i)
     a1e:	c6 2e       	mov	r12, r22
     a20:	7a 81       	ldd	r23, Y+2	; 0x02
     a22:	d7 2e       	mov	r13, r23
     a24:	8c 2d       	mov	r24, r12
     a26:	8f 19       	sub	r24, r15
     a28:	80 17       	cp	r24, r16
     a2a:	38 f4       	brcc	.+14     	; 0xa3a <ds_write+0x50>
        ack += ds_i2c_write_byte(data[i]);
     a2c:	f6 01       	movw	r30, r12
     a2e:	81 91       	ld	r24, Z+
     a30:	6f 01       	movw	r12, r30
     a32:	0e 94 81 04 	call	0x902	; 0x902 <ds_i2c_write_byte>
     a36:	18 0f       	add	r17, r24
     a38:	f5 cf       	rjmp	.-22     	; 0xa24 <ds_write+0x3a>

    ds_i2c_stop();
     a3a:	0e 94 74 04 	call	0x8e8	; 0x8e8 <ds_i2c_stop>

    return ack;
}
     a3e:	81 2f       	mov	r24, r17
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	1f 91       	pop	r17
     a4a:	0f 91       	pop	r16
     a4c:	ff 90       	pop	r15
     a4e:	df 90       	pop	r13
     a50:	cf 90       	pop	r12
     a52:	08 95       	ret

00000a54 <ds_read_byte>:


/* Чтение одного байта по I2C. Возвращает считанное число, если успешно, иначе возвращает 0 */

uint8_t ds_read_byte( uint8_t address )
{
     a54:	0f 93       	push	r16
     a56:	1f 93       	push	r17
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
     a5c:	1f 92       	push	r1
     a5e:	cd b7       	in	r28, 0x3d	; 61
     a60:	de b7       	in	r29, 0x3e	; 62
     a62:	08 2f       	mov	r16, r24
    uint8_t ack = 0, data;

    ds_i2c_start();
     a64:	0e 94 68 04 	call	0x8d0	; 0x8d0 <ds_i2c_start>

    ack += ds_i2c_write_byte(DS1307_ADDRESS_W);
     a68:	80 ed       	ldi	r24, 0xD0	; 208
     a6a:	0e 94 81 04 	call	0x902	; 0x902 <ds_i2c_write_byte>
     a6e:	18 2f       	mov	r17, r24
    ack += ds_i2c_write_byte(address);
     a70:	80 2f       	mov	r24, r16
     a72:	0e 94 81 04 	call	0x902	; 0x902 <ds_i2c_write_byte>
     a76:	18 0f       	add	r17, r24

    ds_i2c_stop();
     a78:	0e 94 74 04 	call	0x8e8	; 0x8e8 <ds_i2c_stop>

    ds_i2c_start();
     a7c:	0e 94 68 04 	call	0x8d0	; 0x8d0 <ds_i2c_start>

    ack += ds_i2c_write_byte(DS1307_ADDRESS_R);
     a80:	81 ed       	ldi	r24, 0xD1	; 209
     a82:	0e 94 81 04 	call	0x902	; 0x902 <ds_i2c_write_byte>
     a86:	18 0f       	add	r17, r24
    data = ds_i2c_read_byte();
     a88:	0e 94 ae 04 	call	0x95c	; 0x95c <ds_i2c_read_byte>

    ds_i2c_stop();
     a8c:	89 83       	std	Y+1, r24	; 0x01
     a8e:	0e 94 74 04 	call	0x8e8	; 0x8e8 <ds_i2c_stop>

    if ( ack > 0 )
     a92:	89 81       	ldd	r24, Y+1	; 0x01
     a94:	11 11       	cpse	r17, r1
        return 0;
     a96:	80 e0       	ldi	r24, 0x00	; 0
    else
        return data;
}
     a98:	0f 90       	pop	r0
     a9a:	df 91       	pop	r29
     a9c:	cf 91       	pop	r28
     a9e:	1f 91       	pop	r17
     aa0:	0f 91       	pop	r16
     aa2:	08 95       	ret

00000aa4 <ds_read>:


/* Чтение нескольких байт подряд по SPI */

uint8_t ds_read( uint8_t address, uint8_t *data, uint8_t ndata )
{
     aa4:	cf 92       	push	r12
     aa6:	df 92       	push	r13
     aa8:	ff 92       	push	r15
     aaa:	0f 93       	push	r16
     aac:	1f 93       	push	r17
     aae:	cf 93       	push	r28
     ab0:	df 93       	push	r29
     ab2:	00 d0       	rcall	.+0      	; 0xab4 <ds_read+0x10>
     ab4:	cd b7       	in	r28, 0x3d	; 61
     ab6:	de b7       	in	r29, 0x3e	; 62
     ab8:	f8 2e       	mov	r15, r24
     aba:	04 2f       	mov	r16, r20
    uint8_t i, ack = 0;

    ds_i2c_start();
     abc:	69 83       	std	Y+1, r22	; 0x01
     abe:	7a 83       	std	Y+2, r23	; 0x02
     ac0:	0e 94 68 04 	call	0x8d0	; 0x8d0 <ds_i2c_start>

    ack += ds_i2c_write_byte(DS1307_ADDRESS_W);
     ac4:	80 ed       	ldi	r24, 0xD0	; 208
     ac6:	0e 94 81 04 	call	0x902	; 0x902 <ds_i2c_write_byte>
     aca:	18 2f       	mov	r17, r24
    ack += ds_i2c_write_byte(address);
     acc:	8f 2d       	mov	r24, r15
     ace:	0e 94 81 04 	call	0x902	; 0x902 <ds_i2c_write_byte>
     ad2:	18 0f       	add	r17, r24

    ds_i2c_stop();
     ad4:	0e 94 74 04 	call	0x8e8	; 0x8e8 <ds_i2c_stop>

    ds_i2c_start();
     ad8:	0e 94 68 04 	call	0x8d0	; 0x8d0 <ds_i2c_start>

    ack += ds_i2c_write_byte(DS1307_ADDRESS_R);
     adc:	81 ed       	ldi	r24, 0xD1	; 209
     ade:	0e 94 81 04 	call	0x902	; 0x902 <ds_i2c_write_byte>
     ae2:	18 0f       	add	r17, r24
     ae4:	69 81       	ldd	r22, Y+1	; 0x01
     ae6:	f6 2e       	mov	r15, r22
    for (i=0 ; i<ndata ; ++i)
     ae8:	c6 2e       	mov	r12, r22
     aea:	7a 81       	ldd	r23, Y+2	; 0x02
     aec:	d7 2e       	mov	r13, r23
     aee:	8c 2d       	mov	r24, r12
     af0:	8f 19       	sub	r24, r15
     af2:	80 17       	cp	r24, r16
     af4:	30 f4       	brcc	.+12     	; 0xb02 <ds_read+0x5e>
        data[i] = ds_i2c_read_byte();
     af6:	0e 94 ae 04 	call	0x95c	; 0x95c <ds_i2c_read_byte>
     afa:	f6 01       	movw	r30, r12
     afc:	81 93       	st	Z+, r24
     afe:	6f 01       	movw	r12, r30
     b00:	f6 cf       	rjmp	.-20     	; 0xaee <ds_read+0x4a>

    ds_i2c_stop();
     b02:	0e 94 74 04 	call	0x8e8	; 0x8e8 <ds_i2c_stop>

    return ack;
}
     b06:	81 2f       	mov	r24, r17
     b08:	0f 90       	pop	r0
     b0a:	0f 90       	pop	r0
     b0c:	df 91       	pop	r29
     b0e:	cf 91       	pop	r28
     b10:	1f 91       	pop	r17
     b12:	0f 91       	pop	r16
     b14:	ff 90       	pop	r15
     b16:	df 90       	pop	r13
     b18:	cf 90       	pop	r12
     b1a:	08 95       	ret

00000b1c <ds_set_time>:

/* Установка вермени - передается массив из семи байт (секунды, минуты, часы, день недели, дата, месяц, год).
    Возвращает 0 если все прошло успешно - иначе > 0. */

uint8_t ds_set_time (uint8_t *time)
{
     b1c:	1f 93       	push	r17
     b1e:	cf 93       	push	r28
     b20:	df 93       	push	r29
     b22:	cd b7       	in	r28, 0x3d	; 61
     b24:	de b7       	in	r29, 0x3e	; 62
     b26:	28 97       	sbiw	r28, 0x08	; 8
     b28:	0f b6       	in	r0, 0x3f	; 63
     b2a:	f8 94       	cli
     b2c:	de bf       	out	0x3e, r29	; 62
     b2e:	0f be       	out	0x3f, r0	; 63
     b30:	cd bf       	out	0x3d, r28	; 61
     b32:	dc 01       	movw	r26, r24
     b34:	fe 01       	movw	r30, r28
     b36:	31 96       	adiw	r30, 0x01	; 1
     b38:	9e 01       	movw	r18, r28
     b3a:	28 5f       	subi	r18, 0xF8	; 248
     b3c:	3f 4f       	sbci	r19, 0xFF	; 255
     b3e:	1e 2f       	mov	r17, r30
     b40:	5f 2f       	mov	r21, r31
    uint8_t data[8], ack, i;

    for (i=0 ; i<7 ; ++i)   data[i] = ((time[i]/10)<<4) + (time[i]%10);
     b42:	4a e0       	ldi	r20, 0x0A	; 10
     b44:	8d 91       	ld	r24, X+
     b46:	64 2f       	mov	r22, r20
     b48:	0e 94 7d 14 	call	0x28fa	; 0x28fa <__udivmodqi4>
     b4c:	60 e1       	ldi	r22, 0x10	; 16
     b4e:	86 9f       	mul	r24, r22
     b50:	90 0d       	add	r25, r0
     b52:	11 24       	eor	r1, r1
     b54:	91 93       	st	Z+, r25
     b56:	e2 17       	cp	r30, r18
     b58:	f3 07       	cpc	r31, r19
     b5a:	a1 f7       	brne	.-24     	; 0xb44 <ds_set_time+0x28>
    data[2] = 0x40 | (((time[2]/10)<<4) + (time[2]%10));
    if (time[2] > 12)
        data[2] |= 0x20;
#endif

    data[7] = 0x00;
     b5c:	18 86       	std	Y+8, r1	; 0x08

    ack = ds_write(0x00, data, 8);
     b5e:	48 e0       	ldi	r20, 0x08	; 8
     b60:	61 2f       	mov	r22, r17
     b62:	75 2f       	mov	r23, r21
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	0e 94 f5 04 	call	0x9ea	; 0x9ea <ds_write>

    return ack;
}
     b6a:	28 96       	adiw	r28, 0x08	; 8
     b6c:	0f b6       	in	r0, 0x3f	; 63
     b6e:	f8 94       	cli
     b70:	de bf       	out	0x3e, r29	; 62
     b72:	0f be       	out	0x3f, r0	; 63
     b74:	cd bf       	out	0x3d, r28	; 61
     b76:	df 91       	pop	r29
     b78:	cf 91       	pop	r28
     b7a:	1f 91       	pop	r17
     b7c:	08 95       	ret

00000b7e <ds_init>:


/* Инициализация часов. Включает SPI, проверяет, инициализировались ли ранее, если нет - записывает нулевое значение времени и запускает часы. */

uint8_t ds_init (uint8_t *init_data, uint8_t lenght)
{
     b7e:	ef 92       	push	r14
     b80:	ff 92       	push	r15
     b82:	0f 93       	push	r16
     b84:	1f 93       	push	r17
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	cd b7       	in	r28, 0x3d	; 61
     b8c:	de b7       	in	r29, 0x3e	; 62
     b8e:	ef 97       	sbiw	r28, 0x3f	; 63
     b90:	0f b6       	in	r0, 0x3f	; 63
     b92:	f8 94       	cli
     b94:	de bf       	out	0x3e, r29	; 62
     b96:	0f be       	out	0x3f, r0	; 63
     b98:	cd bf       	out	0x3d, r28	; 61
     b9a:	8c 01       	movw	r16, r24
     b9c:	f6 2e       	mov	r15, r22

#ifdef  H24
    uint8_t time[] = {0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x0e};
     b9e:	87 e0       	ldi	r24, 0x07	; 7
     ba0:	e0 e6       	ldi	r30, 0x60	; 96
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	de 01       	movw	r26, r28
     ba6:	d9 96       	adiw	r26, 0x39	; 57
     ba8:	01 90       	ld	r0, Z+
     baa:	0d 92       	st	X+, r0
     bac:	8a 95       	dec	r24
     bae:	e1 f7       	brne	.-8      	; 0xba8 <ds_init+0x2a>
    uint8_t time[] = {0x00, 0x00, 0x40, 0x01, 0x01, 0x01, 0x0e};
#endif

    uint8_t check, ack = 0;

    ds_i2c_init();
     bb0:	0e 94 61 04 	call	0x8c2	; 0x8c2 <ds_i2c_init>

    check = ds_read_byte(0x08);
     bb4:	88 e0       	ldi	r24, 0x08	; 8
     bb6:	0e 94 2a 05 	call	0xa54	; 0xa54 <ds_read_byte>

    if ( check != DS1307_CHECK_WORD )
     bba:	8d 3e       	cpi	r24, 0xED	; 237
     bbc:	69 f1       	breq	.+90     	; 0xc18 <ds_init+0x9a>
    {
        uint8_t buffer[DS1307_NSRAM], i;

        ack = ds_set_time(time);
     bbe:	ce 01       	movw	r24, r28
     bc0:	c9 96       	adiw	r24, 0x39	; 57
     bc2:	0e 94 8e 05 	call	0xb1c	; 0xb1c <ds_set_time>
     bc6:	e8 2e       	mov	r14, r24

        buffer[0] = DS1307_CHECK_WORD;
     bc8:	8d ee       	ldi	r24, 0xED	; 237
     bca:	89 83       	std	Y+1, r24	; 0x01

        for (i=1 ; i<=lenght      ; ++i)    buffer[i] = init_data[i-1];
     bcc:	91 e0       	ldi	r25, 0x01	; 1
     bce:	f9 16       	cp	r15, r25
     bd0:	78 f0       	brcs	.+30     	; 0xbf0 <ds_init+0x72>
     bd2:	e9 2f       	mov	r30, r25
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	a1 e0       	ldi	r26, 0x01	; 1
     bd8:	b0 e0       	ldi	r27, 0x00	; 0
     bda:	ac 0f       	add	r26, r28
     bdc:	bd 1f       	adc	r27, r29
     bde:	ae 0f       	add	r26, r30
     be0:	bf 1f       	adc	r27, r31
     be2:	e0 0f       	add	r30, r16
     be4:	f1 1f       	adc	r31, r17
     be6:	31 97       	sbiw	r30, 0x01	; 1
     be8:	80 81       	ld	r24, Z
     bea:	8c 93       	st	X, r24
     bec:	9f 5f       	subi	r25, 0xFF	; 255
     bee:	ef cf       	rjmp	.-34     	; 0xbce <ds_init+0x50>
        for (    ; i<DS1307_NSRAM ; ++i)    buffer[i] = 0;
     bf0:	98 33       	cpi	r25, 0x38	; 56
     bf2:	48 f4       	brcc	.+18     	; 0xc06 <ds_init+0x88>
     bf4:	e1 e0       	ldi	r30, 0x01	; 1
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	ec 0f       	add	r30, r28
     bfa:	fd 1f       	adc	r31, r29
     bfc:	e9 0f       	add	r30, r25
     bfe:	f1 1d       	adc	r31, r1
     c00:	10 82       	st	Z, r1
     c02:	9f 5f       	subi	r25, 0xFF	; 255
     c04:	f5 cf       	rjmp	.-22     	; 0xbf0 <ds_init+0x72>

        ack += ds_write(0x08, buffer, DS1307_NSRAM);
     c06:	48 e3       	ldi	r20, 0x38	; 56
     c08:	be 01       	movw	r22, r28
     c0a:	6f 5f       	subi	r22, 0xFF	; 255
     c0c:	7f 4f       	sbci	r23, 0xFF	; 255
     c0e:	88 e0       	ldi	r24, 0x08	; 8
     c10:	0e 94 f5 04 	call	0x9ea	; 0x9ea <ds_write>
     c14:	8e 0d       	add	r24, r14
     c16:	01 c0       	rjmp	.+2      	; 0xc1a <ds_init+0x9c>

#ifdef  H12
    uint8_t time[] = {0x00, 0x00, 0x40, 0x01, 0x01, 0x01, 0x0e};
#endif

    uint8_t check, ack = 0;
     c18:	80 e0       	ldi	r24, 0x00	; 0

        ack += ds_write(0x08, buffer, DS1307_NSRAM);
    }

    return ack;
}
     c1a:	ef 96       	adiw	r28, 0x3f	; 63
     c1c:	0f b6       	in	r0, 0x3f	; 63
     c1e:	f8 94       	cli
     c20:	de bf       	out	0x3e, r29	; 62
     c22:	0f be       	out	0x3f, r0	; 63
     c24:	cd bf       	out	0x3d, r28	; 61
     c26:	df 91       	pop	r29
     c28:	cf 91       	pop	r28
     c2a:	1f 91       	pop	r17
     c2c:	0f 91       	pop	r16
     c2e:	ff 90       	pop	r15
     c30:	ef 90       	pop	r14
     c32:	08 95       	ret

00000c34 <ds_read_time>:

/* Считывается время - передается массив из семи байт (секунды, минуты, часы, день недели, дата, месяц, год).
    Возвращает 0 если все прошло успешно - иначе > 0. */

uint8_t ds_read_time ( uint8_t *time )
{
     c34:	1f 93       	push	r17
     c36:	cf 93       	push	r28
     c38:	df 93       	push	r29
     c3a:	1f 92       	push	r1
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
     c40:	18 2f       	mov	r17, r24
    uint8_t ack, i;

    ack = ds_read(0x00, time, 7);
     c42:	47 e0       	ldi	r20, 0x07	; 7
     c44:	68 2f       	mov	r22, r24
     c46:	79 2f       	mov	r23, r25
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	99 83       	std	Y+1, r25	; 0x01
     c4c:	0e 94 52 05 	call	0xaa4	; 0xaa4 <ds_read>
     c50:	e1 2f       	mov	r30, r17
     c52:	99 81       	ldd	r25, Y+1	; 0x01
     c54:	f9 2f       	mov	r31, r25

    for (i=0 ; i<7 ; ++i)
     c56:	90 e0       	ldi	r25, 0x00	; 0
        time[i] = ((time[i]>>4)*10) + (time[i]&0x0f);
     c58:	20 81       	ld	r18, Z
     c5a:	32 2f       	mov	r19, r18
     c5c:	32 95       	swap	r19
     c5e:	3f 70       	andi	r19, 0x0F	; 15
     c60:	2f 70       	andi	r18, 0x0F	; 15
     c62:	4a e0       	ldi	r20, 0x0A	; 10
     c64:	34 9f       	mul	r19, r20
     c66:	20 0d       	add	r18, r0
     c68:	11 24       	eor	r1, r1
     c6a:	21 93       	st	Z+, r18
{
    uint8_t ack, i;

    ack = ds_read(0x00, time, 7);

    for (i=0 ; i<7 ; ++i)
     c6c:	9f 5f       	subi	r25, 0xFF	; 255
     c6e:	97 30       	cpi	r25, 0x07	; 7
     c70:	99 f7       	brne	.-26     	; 0xc58 <ds_read_time+0x24>
        time[i] = ((time[i]>>4)*10) + (time[i]&0x0f);

    return ack;
}
     c72:	0f 90       	pop	r0
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	1f 91       	pop	r17
     c7a:	08 95       	ret

00000c7c <uart_init>:
volatile uint8_t ft_event_buffer[RECORD_SIZE*2], i;


void uart_init(void)
{
    UCSRA = UCSRA_DEF;
     c7c:	1b b8       	out	0x0b, r1	; 11
    UCSRB = UCSRB_DEF;
     c7e:	88 e1       	ldi	r24, 0x18	; 24
     c80:	8a b9       	out	0x0a, r24	; 10
    UCSRC = UCSRC_DEF;
     c82:	86 e8       	ldi	r24, 0x86	; 134
     c84:	80 bd       	out	0x20, r24	; 32
    UBRRH = UBRRH_DEF;
     c86:	10 bc       	out	0x20, r1	; 32
    UBRRL = UBRRL_DEF;
     c88:	87 e6       	ldi	r24, 0x67	; 103
     c8a:	89 b9       	out	0x09, r24	; 9

    FT_DDR &= ~((1<<CTS) | (1<<RTS));
     c8c:	81 b3       	in	r24, 0x11	; 17
     c8e:	83 7f       	andi	r24, 0xF3	; 243
     c90:	81 bb       	out	0x11, r24	; 17
    FT_PORT |= ((1<<CTS) | (1<<RTS));
     c92:	82 b3       	in	r24, 0x12	; 18
     c94:	8c 60       	ori	r24, 0x0C	; 12
     c96:	82 bb       	out	0x12, r24	; 18
     c98:	08 95       	ret

00000c9a <ft_data_converter>:



void ft_data_converter(void)
{
    seep_wait();
     c9a:	0e 94 c3 03 	call	0x786	; 0x786 <seep_wait>
    seep_read(uart_pointer, ft_event_buffer+RECORD_SIZE, RECORD_SIZE);
     c9e:	80 91 09 02 	lds	r24, 0x0209
     ca2:	90 91 0a 02 	lds	r25, 0x020A
     ca6:	48 e0       	ldi	r20, 0x08	; 8
     ca8:	64 e1       	ldi	r22, 0x14	; 20
     caa:	72 e0       	ldi	r23, 0x02	; 2
     cac:	0e 94 07 04 	call	0x80e	; 0x80e <seep_read>

    ft_event_buffer[0] = 0x00;
     cb0:	10 92 0c 02 	sts	0x020C, r1
    ft_event_buffer[1] = 0x00;
     cb4:	10 92 0d 02 	sts	0x020D, r1
    ft_event_buffer[2] = ft_event_buffer[9];
     cb8:	80 91 15 02 	lds	r24, 0x0215
     cbc:	80 93 0e 02 	sts	0x020E, r24
    ft_event_buffer[3] = 2 - ft_event_buffer[8];
     cc0:	90 91 14 02 	lds	r25, 0x0214
     cc4:	82 e0       	ldi	r24, 0x02	; 2
     cc6:	89 1b       	sub	r24, r25
     cc8:	80 93 0f 02 	sts	0x020F, r24

    for (i = 5 ; i < 255 ; --i)  {
     ccc:	85 e0       	ldi	r24, 0x05	; 5
     cce:	80 93 0b 02 	sts	0x020B, r24
        ft_event_buffer[15-i-i-1] = ft_event_buffer[15-i] / 10;
     cd2:	2f e0       	ldi	r18, 0x0F	; 15
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	4a e0       	ldi	r20, 0x0A	; 10
    ft_event_buffer[0] = 0x00;
    ft_event_buffer[1] = 0x00;
    ft_event_buffer[2] = ft_event_buffer[9];
    ft_event_buffer[3] = 2 - ft_event_buffer[8];

    for (i = 5 ; i < 255 ; --i)  {
     cd8:	80 91 0b 02 	lds	r24, 0x020B
     cdc:	8f 3f       	cpi	r24, 0xFF	; 255
     cde:	99 f1       	breq	.+102    	; 0xd46 <ft_data_converter+0xac>
        ft_event_buffer[15-i-i-1] = ft_event_buffer[15-i] / 10;
     ce0:	90 91 0b 02 	lds	r25, 0x020B
     ce4:	80 91 0b 02 	lds	r24, 0x020B
     ce8:	f9 01       	movw	r30, r18
     cea:	e9 1b       	sub	r30, r25
     cec:	f1 09       	sbc	r31, r1
     cee:	e8 1b       	sub	r30, r24
     cf0:	f1 09       	sbc	r31, r1
     cf2:	80 91 0b 02 	lds	r24, 0x020B
     cf6:	d9 01       	movw	r26, r18
     cf8:	a8 1b       	sub	r26, r24
     cfa:	b1 09       	sbc	r27, r1
     cfc:	a4 5f       	subi	r26, 0xF4	; 244
     cfe:	bd 4f       	sbci	r27, 0xFD	; 253
     d00:	8c 91       	ld	r24, X
     d02:	64 2f       	mov	r22, r20
     d04:	0e 94 7d 14 	call	0x28fa	; 0x28fa <__udivmodqi4>
     d08:	e5 5f       	subi	r30, 0xF5	; 245
     d0a:	fd 4f       	sbci	r31, 0xFD	; 253
     d0c:	80 83       	st	Z, r24
        ft_event_buffer[15-i-i] = ft_event_buffer[15-i] % 10;
     d0e:	90 91 0b 02 	lds	r25, 0x020B
     d12:	80 91 0b 02 	lds	r24, 0x020B
     d16:	f9 01       	movw	r30, r18
     d18:	e9 1b       	sub	r30, r25
     d1a:	f1 09       	sbc	r31, r1
     d1c:	e8 1b       	sub	r30, r24
     d1e:	f1 09       	sbc	r31, r1
     d20:	80 91 0b 02 	lds	r24, 0x020B
     d24:	d9 01       	movw	r26, r18
     d26:	a8 1b       	sub	r26, r24
     d28:	b1 09       	sbc	r27, r1
     d2a:	a4 5f       	subi	r26, 0xF4	; 244
     d2c:	bd 4f       	sbci	r27, 0xFD	; 253
     d2e:	8c 91       	ld	r24, X
     d30:	0e 94 7d 14 	call	0x28fa	; 0x28fa <__udivmodqi4>
     d34:	e4 5f       	subi	r30, 0xF4	; 244
     d36:	fd 4f       	sbci	r31, 0xFD	; 253
     d38:	90 83       	st	Z, r25
    ft_event_buffer[0] = 0x00;
    ft_event_buffer[1] = 0x00;
    ft_event_buffer[2] = ft_event_buffer[9];
    ft_event_buffer[3] = 2 - ft_event_buffer[8];

    for (i = 5 ; i < 255 ; --i)  {
     d3a:	80 91 0b 02 	lds	r24, 0x020B
     d3e:	81 50       	subi	r24, 0x01	; 1
     d40:	80 93 0b 02 	sts	0x020B, r24
     d44:	c9 cf       	rjmp	.-110    	; 0xcd8 <ft_data_converter+0x3e>
        ft_event_buffer[15-i-i-1] = ft_event_buffer[15-i] / 10;
        ft_event_buffer[15-i-i] = ft_event_buffer[15-i] % 10;
    }
    i = 0;
     d46:	10 92 0b 02 	sts	0x020B, r1
     d4a:	08 95       	ret

00000d4c <__vector_14>:
}



ISR(USART_UDRE_vect)
{
     d4c:	1f 92       	push	r1
     d4e:	0f 92       	push	r0
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	0f 92       	push	r0
     d54:	11 24       	eor	r1, r1
     d56:	2f 93       	push	r18
     d58:	3f 93       	push	r19
     d5a:	4f 93       	push	r20
     d5c:	5f 93       	push	r21
     d5e:	6f 93       	push	r22
     d60:	7f 93       	push	r23
     d62:	8f 93       	push	r24
     d64:	9f 93       	push	r25
     d66:	af 93       	push	r26
     d68:	bf 93       	push	r27
     d6a:	ef 93       	push	r30
     d6c:	ff 93       	push	r31
    cli();
     d6e:	f8 94       	cli
    UDR = ft_event_buffer[i++];
     d70:	e0 91 0b 02 	lds	r30, 0x020B
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	8e 0f       	add	r24, r30
     d78:	80 93 0b 02 	sts	0x020B, r24
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	e4 5f       	subi	r30, 0xF4	; 244
     d80:	fd 4f       	sbci	r31, 0xFD	; 253
     d82:	80 81       	ld	r24, Z
     d84:	8c b9       	out	0x0c, r24	; 12

    if( i == (RECORD_SIZE*2) )
     d86:	80 91 0b 02 	lds	r24, 0x020B
     d8a:	80 31       	cpi	r24, 0x10	; 16
     d8c:	e1 f4       	brne	.+56     	; 0xdc6 <__vector_14+0x7a>
    {
        if (uart_pointer > RECORD_SIZE)     uart_pointer -= RECORD_SIZE;
     d8e:	80 91 09 02 	lds	r24, 0x0209
     d92:	90 91 0a 02 	lds	r25, 0x020A
     d96:	09 97       	sbiw	r24, 0x09	; 9
     d98:	50 f0       	brcs	.+20     	; 0xdae <__vector_14+0x62>
     d9a:	80 91 09 02 	lds	r24, 0x0209
     d9e:	90 91 0a 02 	lds	r25, 0x020A
     da2:	08 97       	sbiw	r24, 0x08	; 8
     da4:	90 93 0a 02 	sts	0x020A, r25
     da8:	80 93 09 02 	sts	0x0209, r24
     dac:	0a c0       	rjmp	.+20     	; 0xdc2 <__vector_14+0x76>
        else {
            UCSRB &= ~(1<<UDRIE);
     dae:	55 98       	cbi	0x0a, 5	; 10
            setTimer(MSG_PACK_HANDLER, 0, 1);
     db0:	41 e0       	ldi	r20, 0x01	; 1
     db2:	50 e0       	ldi	r21, 0x00	; 0
     db4:	60 e0       	ldi	r22, 0x00	; 0
     db6:	85 e0       	ldi	r24, 0x05	; 5
     db8:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <setTimer>
            status2 = ' ';
     dbc:	80 e2       	ldi	r24, 0x20	; 32
     dbe:	80 93 44 02 	sts	0x0244, r24
        }
        ft_data_converter();
     dc2:	0e 94 4d 06 	call	0xc9a	; 0xc9a <ft_data_converter>
    }
    sei();
     dc6:	78 94       	sei
}
     dc8:	ff 91       	pop	r31
     dca:	ef 91       	pop	r30
     dcc:	bf 91       	pop	r27
     dce:	af 91       	pop	r26
     dd0:	9f 91       	pop	r25
     dd2:	8f 91       	pop	r24
     dd4:	7f 91       	pop	r23
     dd6:	6f 91       	pop	r22
     dd8:	5f 91       	pop	r21
     dda:	4f 91       	pop	r20
     ddc:	3f 91       	pop	r19
     dde:	2f 91       	pop	r18
     de0:	0f 90       	pop	r0
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	0f 90       	pop	r0
     de6:	1f 90       	pop	r1
     de8:	18 95       	reti

00000dea <uart_check>:

uint8_t uart_check(msg_par par)
{
    uint8_t data;

    if( UCSRA & (1<<RXC) )
     dea:	5f 9b       	sbis	0x0b, 7	; 11
     dec:	3d c0       	rjmp	.+122    	; 0xe68 <uart_check+0x7e>
    {
        data = UDR;
     dee:	8c b1       	in	r24, 0x0c	; 12
        switch (data)
     df0:	80 3f       	cpi	r24, 0xF0	; 240
     df2:	b9 f0       	breq	.+46     	; 0xe22 <uart_check+0x38>
     df4:	89 3f       	cpi	r24, 0xF9	; 249
     df6:	c1 f5       	brne	.+112    	; 0xe68 <uart_check+0x7e>
                break;
            }

            case CLEAN_DATA :
            {
                seep_wait();
     df8:	0e 94 c3 03 	call	0x786	; 0x786 <seep_wait>
                seep_write_byte(0x0000, 0x00);
     dfc:	60 e0       	ldi	r22, 0x00	; 0
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	0e 94 10 03 	call	0x620	; 0x620 <seep_write_byte>
                seep_wait();
     e06:	0e 94 c3 03 	call	0x786	; 0x786 <seep_wait>
                seep_write_byte(0x0001, 0x08);
     e0a:	68 e0       	ldi	r22, 0x08	; 8
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	0e 94 10 03 	call	0x620	; 0x620 <seep_write_byte>

                seep_pointer = 0x0008;
     e14:	88 e0       	ldi	r24, 0x08	; 8
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	90 93 59 02 	sts	0x0259, r25
     e1c:	80 93 58 02 	sts	0x0258, r24

                while ( !(UCSRA & (1<<UDRE)) );
     e20:	1b c0       	rjmp	.+54     	; 0xe58 <uart_check+0x6e>
        data = UDR;
        switch (data)
        {
            case SEND_DATA :
            {
                if (seep_pointer <= RECORD_SIZE) return 2;
     e22:	80 91 58 02 	lds	r24, 0x0258
     e26:	90 91 59 02 	lds	r25, 0x0259
     e2a:	09 97       	sbiw	r24, 0x09	; 9
     e2c:	f8 f0       	brcs	.+62     	; 0xe6c <uart_check+0x82>
                killTimer(MSG_PACK_HANDLER);
     e2e:	85 e0       	ldi	r24, 0x05	; 5
     e30:	0e 94 39 13 	call	0x2672	; 0x2672 <killTimer>
                rfm12_sleep();
     e34:	0e 94 a1 09 	call	0x1342	; 0x1342 <rfm12_sleep>
                status2 = 'S';
     e38:	83 e5       	ldi	r24, 0x53	; 83
     e3a:	80 93 44 02 	sts	0x0244, r24

                uart_pointer = seep_pointer - RECORD_SIZE;
     e3e:	80 91 58 02 	lds	r24, 0x0258
     e42:	90 91 59 02 	lds	r25, 0x0259
     e46:	08 97       	sbiw	r24, 0x08	; 8
     e48:	90 93 0a 02 	sts	0x020A, r25
     e4c:	80 93 09 02 	sts	0x0209, r24
                ft_data_converter();
     e50:	0e 94 4d 06 	call	0xc9a	; 0xc9a <ft_data_converter>

                UCSRB |= (1<<UDRIE);
     e54:	55 9a       	sbi	0x0a, 5	; 10
     e56:	08 c0       	rjmp	.+16     	; 0xe68 <uart_check+0x7e>
                seep_wait();
                seep_write_byte(0x0001, 0x08);

                seep_pointer = 0x0008;

                while ( !(UCSRA & (1<<UDRE)) );
     e58:	5d 9b       	sbis	0x0b, 5	; 11
     e5a:	fe cf       	rjmp	.-4      	; 0xe58 <uart_check+0x6e>
                UDR = CLEAN_DATA_OK1;
     e5c:	8a ef       	ldi	r24, 0xFA	; 250
     e5e:	8c b9       	out	0x0c, r24	; 12
                while ( !(UCSRA & (1<<UDRE)) );
     e60:	5d 9b       	sbis	0x0b, 5	; 11
     e62:	fe cf       	rjmp	.-4      	; 0xe60 <uart_check+0x76>
                UDR = CLEAN_DATA_OK2;
     e64:	8b ef       	ldi	r24, 0xFB	; 251
     e66:	8c b9       	out	0x0c, r24	; 12

                break;
            }
        }
    }
    return 1;
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	08 95       	ret
        data = UDR;
        switch (data)
        {
            case SEND_DATA :
            {
                if (seep_pointer <= RECORD_SIZE) return 2;
     e6c:	82 e0       	ldi	r24, 0x02	; 2
                break;
            }
        }
    }
    return 1;
}
     e6e:	08 95       	ret

00000e70 <repeatKey>:
		}
	}
	return(0);
}

unsigned char repeatKey(msg_par par) {
     e70:	cf 93       	push	r28
     e72:	c8 2f       	mov	r28, r24
	if (prevKey == lastKey) {
     e74:	60 91 1e 02 	lds	r22, 0x021E
     e78:	80 91 1d 02 	lds	r24, 0x021D
     e7c:	68 13       	cpse	r22, r24
     e7e:	10 c0       	rjmp	.+32     	; 0xea0 <repeatKey+0x30>
		sendMessage(MSG_KEY_PRESS, lastKey);
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	0e 94 6f 12 	call	0x24de	; 0x24de <sendMessage>
		if (par>5)
     e86:	c6 30       	cpi	r28, 0x06	; 6
     e88:	28 f0       	brcs	.+10     	; 0xe94 <repeatKey+0x24>
			setTimer(MSG_KEY_REPEAT,par-1,par);
     e8a:	4c 2f       	mov	r20, r28
     e8c:	50 e0       	ldi	r21, 0x00	; 0
     e8e:	6f ef       	ldi	r22, 0xFF	; 255
     e90:	6c 0f       	add	r22, r28
     e92:	03 c0       	rjmp	.+6      	; 0xe9a <repeatKey+0x2a>
		else
			setTimer(MSG_KEY_REPEAT,5,5);
     e94:	45 e0       	ldi	r20, 0x05	; 5
     e96:	50 e0       	ldi	r21, 0x00	; 0
     e98:	65 e0       	ldi	r22, 0x05	; 5
     e9a:	82 e0       	ldi	r24, 0x02	; 2
     e9c:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <setTimer>
	}
	return(0);
}
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	cf 91       	pop	r28
     ea4:	08 95       	ret

00000ea6 <getKeyCode>:

uint8_t lastKey,prevKey;
uint8_t kf1,kf2,kf3;

unsigned char getKeyCode(uint8_t ah) {
	if (!(ah & _BV(KBD_PIN_OK))) {
     ea6:	81 ff       	sbrs	r24, 1
     ea8:	0a c0       	rjmp	.+20     	; 0xebe <getKeyCode+0x18>
		return KEY_OK;
	}
	if (!(ah & _BV(KBD_PIN_UP))) {
     eaa:	80 ff       	sbrs	r24, 0
     eac:	0a c0       	rjmp	.+20     	; 0xec2 <getKeyCode+0x1c>
		return KEY_UP;
	}
	if (!(ah & _BV(KBD_PIN_DOWN))) {
     eae:	84 ff       	sbrs	r24, 4
     eb0:	0a c0       	rjmp	.+20     	; 0xec6 <getKeyCode+0x20>
		return KEY_DOWN;
	}
	if (!(ah & _BV(KBD_PIN_LEFT))) {
     eb2:	83 ff       	sbrs	r24, 3
     eb4:	0a c0       	rjmp	.+20     	; 0xeca <getKeyCode+0x24>
		return KEY_LEFT;
	}
	if (!(ah & _BV(KBD_PIN_RIGHT))) {
     eb6:	82 ff       	sbrs	r24, 2
     eb8:	0a c0       	rjmp	.+20     	; 0xece <getKeyCode+0x28>
		return KEY_RIGHT;
	}
	return 0;
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	08 95       	ret
uint8_t lastKey,prevKey;
uint8_t kf1,kf2,kf3;

unsigned char getKeyCode(uint8_t ah) {
	if (!(ah & _BV(KBD_PIN_OK))) {
		return KEY_OK;
     ebe:	85 e0       	ldi	r24, 0x05	; 5
     ec0:	08 95       	ret
	}
	if (!(ah & _BV(KBD_PIN_UP))) {
		return KEY_UP;
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	08 95       	ret
	}
	if (!(ah & _BV(KBD_PIN_DOWN))) {
		return KEY_DOWN;
     ec6:	82 e0       	ldi	r24, 0x02	; 2
     ec8:	08 95       	ret
	}
	if (!(ah & _BV(KBD_PIN_LEFT))) {
		return KEY_LEFT;
     eca:	84 e0       	ldi	r24, 0x04	; 4
     ecc:	08 95       	ret
	}
	if (!(ah & _BV(KBD_PIN_RIGHT))) {
		return KEY_RIGHT;
     ece:	83 e0       	ldi	r24, 0x03	; 3
	}
	return 0;
}
     ed0:	08 95       	ret

00000ed2 <readKey>:

unsigned char readKey(msg_par par) {
     ed2:	1f 93       	push	r17
     ed4:	cf 93       	push	r28
     ed6:	df 93       	push	r29
     ed8:	1f 92       	push	r1
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62

	kf3=kf2;                                // сравнение предыдущих состояний кнопок с текущим
     ede:	60 91 20 02 	lds	r22, 0x0220
     ee2:	60 93 1c 02 	sts	0x021C, r22
	kf2=kf1;
     ee6:	10 91 1f 02 	lds	r17, 0x021F
     eea:	10 93 20 02 	sts	0x0220, r17
	kf1=getKeyCode(KBD_PIN & KBD_MASK);
     eee:	89 b3       	in	r24, 0x19	; 25
     ef0:	8f 71       	andi	r24, 0x1F	; 31
     ef2:	69 83       	std	Y+1, r22	; 0x01
     ef4:	0e 94 53 07 	call	0xea6	; 0xea6 <getKeyCode>
     ef8:	80 93 1f 02 	sts	0x021F, r24

	if ((kf2==kf1) && (kf3==kf2)) {         // если совпадают - значит это нажатие а не дребезг
     efc:	69 81       	ldd	r22, Y+1	; 0x01
     efe:	18 13       	cpse	r17, r24
     f00:	1a c0       	rjmp	.+52     	; 0xf36 <readKey+0x64>
     f02:	61 13       	cpse	r22, r17
     f04:	18 c0       	rjmp	.+48     	; 0xf36 <readKey+0x64>
		prevKey = lastKey;
     f06:	80 91 1d 02 	lds	r24, 0x021D
     f0a:	80 93 1e 02 	sts	0x021E, r24
		lastKey = kf1;
     f0e:	60 93 1d 02 	sts	0x021D, r22

		if (prevKey != lastKey) {                   // сравнивается предыдущее зафиксированное нажатие с текущим
     f12:	86 17       	cp	r24, r22
     f14:	81 f0       	breq	.+32     	; 0xf36 <readKey+0x64>
			sendMessage(MSG_KEY_PRESS, lastKey);    // если не совпадают - значит новое нажатие кнопки
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	0e 94 6f 12 	call	0x24de	; 0x24de <sendMessage>
			killTimer(MSG_KEY_REPEAT);
     f1c:	82 e0       	ldi	r24, 0x02	; 2
     f1e:	0e 94 39 13 	call	0x2672	; 0x2672 <killTimer>
			if (lastKey) {
     f22:	80 91 1d 02 	lds	r24, 0x021D
     f26:	88 23       	and	r24, r24
     f28:	31 f0       	breq	.+12     	; 0xf36 <readKey+0x64>
				setTimer(MSG_KEY_REPEAT,200,500);
     f2a:	44 ef       	ldi	r20, 0xF4	; 244
     f2c:	51 e0       	ldi	r21, 0x01	; 1
     f2e:	68 ec       	ldi	r22, 0xC8	; 200
     f30:	82 e0       	ldi	r24, 0x02	; 2
     f32:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <setTimer>
			}
		}
	}
	return(0);
}
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	0f 90       	pop	r0
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	1f 91       	pop	r17
     f40:	08 95       	ret

00000f42 <KBD_init>:
}



void  KBD_init() {
	KBD_PORT |= KBD_MASK;
     f42:	8b b3       	in	r24, 0x1b	; 27
     f44:	8f 61       	ori	r24, 0x1F	; 31
     f46:	8b bb       	out	0x1b, r24	; 27
	KBD_DDR &= ~KBD_MASK;
     f48:	8a b3       	in	r24, 0x1a	; 26
     f4a:	80 7e       	andi	r24, 0xE0	; 224
     f4c:	8a bb       	out	0x1a, r24	; 26

	lastKey = 0;
     f4e:	10 92 1d 02 	sts	0x021D, r1
	prevKey = 0;
     f52:	10 92 1e 02 	sts	0x021E, r1

	setHandler(MSG_KEY_SCAN, &readKey);
     f56:	69 e6       	ldi	r22, 0x69	; 105
     f58:	77 e0       	ldi	r23, 0x07	; 7
     f5a:	83 e0       	ldi	r24, 0x03	; 3
     f5c:	0e 94 b4 11 	call	0x2368	; 0x2368 <setHandler>
	setHandler(MSG_KEY_REPEAT, &repeatKey);
     f60:	68 e3       	ldi	r22, 0x38	; 56
     f62:	77 e0       	ldi	r23, 0x07	; 7
     f64:	82 e0       	ldi	r24, 0x02	; 2
     f66:	0e 94 b4 11 	call	0x2368	; 0x2368 <setHandler>

	setTimer(MSG_KEY_SCAN, 1, 50);
     f6a:	42 e3       	ldi	r20, 0x32	; 50
     f6c:	50 e0       	ldi	r21, 0x00	; 0
     f6e:	61 e0       	ldi	r22, 0x01	; 1
     f70:	83 e0       	ldi	r24, 0x03	; 3
     f72:	0c 94 fb 12 	jmp	0x25f6	; 0x25f6 <setTimer>

00000f76 <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     f76:	ad 9a       	sbi	0x15, 5	; 21
    lcd_e_delay();
     f78:	00 c0       	rjmp	.+0      	; 0xf7a <toggle_e+0x4>
    lcd_e_low();
     f7a:	ad 98       	cbi	0x15, 5	; 21
     f7c:	08 95       	ret

00000f7e <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs)
{
     f7e:	1f 93       	push	r17
     f80:	cf 93       	push	r28
     f82:	df 93       	push	r29
     f84:	1f 92       	push	r1
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
     f8a:	66 23       	and	r22, r22
     f8c:	11 f0       	breq	.+4      	; 0xf92 <lcd_write+0x14>
       lcd_rs_high();
     f8e:	ae 9a       	sbi	0x15, 6	; 21
     f90:	01 c0       	rjmp	.+2      	; 0xf94 <lcd_write+0x16>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
     f92:	ae 98       	cbi	0x15, 6	; 21
    }
    lcd_rw_low();
     f94:	ac 98       	cbi	0x15, 4	; 21

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;
     f96:	94 b3       	in	r25, 0x14	; 20
     f98:	9f 60       	ori	r25, 0x0F	; 15
     f9a:	94 bb       	out	0x14, r25	; 20

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
     f9c:	15 b3       	in	r17, 0x15	; 21
     f9e:	10 7f       	andi	r17, 0xF0	; 240
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
     fa0:	98 2f       	mov	r25, r24
     fa2:	92 95       	swap	r25
     fa4:	9f 70       	andi	r25, 0x0F	; 15
     fa6:	91 2b       	or	r25, r17
     fa8:	95 bb       	out	0x15, r25	; 21
        lcd_e_toggle();
     faa:	89 83       	std	Y+1, r24	; 0x01
     fac:	0e 94 bb 07 	call	0xf76	; 0xf76 <toggle_e>

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	8f 70       	andi	r24, 0x0F	; 15
     fb4:	81 2b       	or	r24, r17
     fb6:	85 bb       	out	0x15, r24	; 21
        lcd_e_toggle();
     fb8:	0e 94 bb 07 	call	0xf76	; 0xf76 <toggle_e>

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
     fbc:	1f 60       	ori	r17, 0x0F	; 15
     fbe:	15 bb       	out	0x15, r17	; 21
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    }
}
     fc0:	0f 90       	pop	r0
     fc2:	df 91       	pop	r29
     fc4:	cf 91       	pop	r28
     fc6:	1f 91       	pop	r17
     fc8:	08 95       	ret

00000fca <lcd_read.constprop.0>:


    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
     fca:	ae 98       	cbi	0x15, 6	; 21
    lcd_rw_high();                           /* RW=1  read mode      */
     fcc:	ac 9a       	sbi	0x15, 4	; 21

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
     fce:	84 b3       	in	r24, 0x14	; 20
     fd0:	80 7f       	andi	r24, 0xF0	; 240
     fd2:	84 bb       	out	0x14, r24	; 20

        lcd_e_high();
     fd4:	ad 9a       	sbi	0x15, 5	; 21
        lcd_e_delay();
     fd6:	00 c0       	rjmp	.+0      	; 0xfd8 <lcd_read.constprop.0+0xe>
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
     fd8:	83 b3       	in	r24, 0x13	; 19
        lcd_e_low();
     fda:	ad 98       	cbi	0x15, 5	; 21

        lcd_e_delay();                       /* Enable 500ns low       */
     fdc:	00 c0       	rjmp	.+0      	; 0xfde <lcd_read.constprop.0+0x14>

        lcd_e_high();
     fde:	ad 9a       	sbi	0x15, 5	; 21
        lcd_e_delay();
     fe0:	00 c0       	rjmp	.+0      	; 0xfe2 <lcd_read.constprop.0+0x18>
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
     fe2:	93 b3       	in	r25, 0x13	; 19
     fe4:	9f 70       	andi	r25, 0x0F	; 15
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */

        lcd_e_high();
        lcd_e_delay();
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
     fe6:	82 95       	swap	r24
     fe8:	80 7f       	andi	r24, 0xF0	; 240
        lcd_e_delay();                       /* Enable 500ns low       */

        lcd_e_high();
        lcd_e_delay();
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
        lcd_e_low();
     fea:	ad 98       	cbi	0x15, 5	; 21
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;
        lcd_e_low();
    }
    return data;
}
     fec:	89 2b       	or	r24, r25
     fee:	08 95       	ret

00000ff0 <lcd_waitbusy>:

{
    register uint8_t c;

    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
     ff0:	0e 94 e5 07 	call	0xfca	; 0xfca <lcd_read.constprop.0>
     ff4:	87 fd       	sbrc	r24, 7
     ff6:	fc cf       	rjmp	.-8      	; 0xff0 <lcd_waitbusy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     ff8:	84 e0       	ldi	r24, 0x04	; 4
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	01 97       	sbiw	r24, 0x01	; 1
     ffe:	f1 f7       	brne	.-4      	; 0xffc <lcd_waitbusy+0xc>

    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
    1000:	0c 94 e5 07 	jmp	0xfca	; 0xfca <lcd_read.constprop.0>

00001004 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    1004:	cf 93       	push	r28
    1006:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
    1008:	0e 94 f8 07 	call	0xff0	; 0xff0 <lcd_waitbusy>
    lcd_write(cmd,0);
    100c:	60 e0       	ldi	r22, 0x00	; 0
    100e:	8c 2f       	mov	r24, r28
}
    1010:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
    lcd_write(cmd,0);
    1012:	0c 94 bf 07 	jmp	0xf7e	; 0xf7e <lcd_write>

00001016 <lcd_data>:
Send data byte to LCD controller
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
    1016:	cf 93       	push	r28
    1018:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
    101a:	0e 94 f8 07 	call	0xff0	; 0xff0 <lcd_waitbusy>
    lcd_write(data,1);
    101e:	61 e0       	ldi	r22, 0x01	; 1
    1020:	8c 2f       	mov	r24, r28
}
    1022:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
    lcd_waitbusy();
    lcd_write(data,1);
    1024:	0c 94 bf 07 	jmp	0xf7e	; 0xf7e <lcd_write>

00001028 <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 )
    1028:	61 11       	cpse	r22, r1
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    102c:	80 58       	subi	r24, 0x80	; 128
    102e:	01 c0       	rjmp	.+2      	; 0x1032 <lcd_gotoxy+0xa>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
    1030:	80 54       	subi	r24, 0x40	; 64
    1032:	0c 94 02 08 	jmp	0x1004	; 0x1004 <lcd_command>

00001036 <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
    1036:	0e 94 f8 07 	call	0xff0	; 0xff0 <lcd_waitbusy>
}
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	08 95       	ret

0000103e <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	0c 94 02 08 	jmp	0x1004	; 0x1004 <lcd_command>

00001044 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
    1044:	82 e0       	ldi	r24, 0x02	; 2
    1046:	0c 94 02 08 	jmp	0x1004	; 0x1004 <lcd_command>

0000104a <lcd_putc>:
Display character at current cursor position
Input:    character to be displayed
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
    104a:	cf 93       	push	r28
    104c:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
    104e:	0e 94 f8 07 	call	0xff0	; 0xff0 <lcd_waitbusy>
    if (c=='\n')
    1052:	ca 30       	cpi	r28, 0x0A	; 10
    1054:	49 f4       	brne	.+18     	; 0x1068 <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
    1056:	80 34       	cpi	r24, 0x40	; 64
    1058:	10 f4       	brcc	.+4      	; 0x105e <lcd_putc+0x14>
        addressCounter = LCD_START_LINE2;
    105a:	80 e4       	ldi	r24, 0x40	; 64
    105c:	01 c0       	rjmp	.+2      	; 0x1060 <lcd_putc+0x16>
    else
        addressCounter = LCD_START_LINE1;
    105e:	80 e0       	ldi	r24, 0x00	; 0
        addressCounter = LCD_START_LINE4;
    else
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
    1060:	80 58       	subi	r24, 0x80	; 128
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
    }

}/* lcd_putc */
    1062:	cf 91       	pop	r28
        addressCounter = LCD_START_LINE4;
    else
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
    1064:	0c 94 02 08 	jmp	0x1004	; 0x1004 <lcd_command>
#if LCD_LINES==1
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#elif LCD_LINES==2
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
    1068:	80 31       	cpi	r24, 0x10	; 16
    106a:	19 f4       	brne	.+6      	; 0x1072 <lcd_putc+0x28>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	80 ec       	ldi	r24, 0xC0	; 192
    1070:	04 c0       	rjmp	.+8      	; 0x107a <lcd_putc+0x30>
        }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ){
    1072:	80 35       	cpi	r24, 0x50	; 80
    1074:	21 f4       	brne	.+8      	; 0x107e <lcd_putc+0x34>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
    1076:	60 e0       	ldi	r22, 0x00	; 0
    1078:	80 e8       	ldi	r24, 0x80	; 128
    107a:	0e 94 bf 07 	call	0xf7e	; 0xf7e <lcd_write>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE4,0);
        }else if ( pos == LCD_START_LINE4+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
    107e:	0e 94 f8 07 	call	0xff0	; 0xff0 <lcd_waitbusy>
#endif
        lcd_write(c, 1);
    1082:	61 e0       	ldi	r22, 0x01	; 1
    1084:	8c 2f       	mov	r24, r28
    }

}/* lcd_putc */
    1086:	cf 91       	pop	r28
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
    1088:	0c 94 bf 07 	jmp	0xf7e	; 0xf7e <lcd_write>

0000108c <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    108c:	cf 93       	push	r28
    108e:	df 93       	push	r29
    1090:	ec 01       	movw	r28, r24
    register char c;

    while ( (c = *s++) ) {
    1092:	89 91       	ld	r24, Y+
    1094:	88 23       	and	r24, r24
    1096:	19 f0       	breq	.+6      	; 0x109e <lcd_puts+0x12>
        lcd_putc(c);
    1098:	0e 94 25 08 	call	0x104a	; 0x104a <lcd_putc>
    109c:	fa cf       	rjmp	.-12     	; 0x1092 <lcd_puts+0x6>
    }

}/* lcd_puts */
    109e:	df 91       	pop	r29
    10a0:	cf 91       	pop	r28
    10a2:	08 95       	ret

000010a4 <lcd_puts_p>:
Input:     string from program memory be be displayed
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    10a4:	cf 93       	push	r28
    10a6:	df 93       	push	r29
    10a8:	fc 01       	movw	r30, r24
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
    10aa:	84 91       	lpm	r24, Z
    10ac:	ef 01       	movw	r28, r30
    10ae:	21 96       	adiw	r28, 0x01	; 1
    10b0:	88 23       	and	r24, r24
    10b2:	21 f0       	breq	.+8      	; 0x10bc <lcd_puts_p+0x18>
        lcd_putc(c);
    10b4:	0e 94 25 08 	call	0x104a	; 0x104a <lcd_putc>
    10b8:	fe 01       	movw	r30, r28
    10ba:	f7 cf       	rjmp	.-18     	; 0x10aa <lcd_puts_p+0x6>
    }

}/* lcd_puts_p */
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	08 95       	ret

000010c2 <lcd_cleanstr>:
Input:    horisontal position
Returns:  none
*************************************************************************/
void lcd_cleanstr(uint8_t y)
/* print empty string on lcd */
{
    10c2:	cf 93       	push	r28
    10c4:	df 93       	push	r29
    10c6:	d8 2f       	mov	r29, r24
    register char i;

    lcd_gotoxy(0,y);
    10c8:	68 2f       	mov	r22, r24
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	0e 94 14 08 	call	0x1028	; 0x1028 <lcd_gotoxy>
    10d0:	c0 e1       	ldi	r28, 0x10	; 16

    for ( i=0 ; i<LCD_DISP_LENGTH ; ++i )
        lcd_putc(' ');
    10d2:	80 e2       	ldi	r24, 0x20	; 32
    10d4:	0e 94 25 08 	call	0x104a	; 0x104a <lcd_putc>
    10d8:	c1 50       	subi	r28, 0x01	; 1
{
    register char i;

    lcd_gotoxy(0,y);

    for ( i=0 ; i<LCD_DISP_LENGTH ; ++i )
    10da:	d9 f7       	brne	.-10     	; 0x10d2 <lcd_cleanstr+0x10>
        lcd_putc(' ');

    lcd_gotoxy(0,y);
    10dc:	6d 2f       	mov	r22, r29
    10de:	80 e0       	ldi	r24, 0x00	; 0

}/* lcd_cleanstr */
    10e0:	df 91       	pop	r29
    10e2:	cf 91       	pop	r28
    lcd_gotoxy(0,y);

    for ( i=0 ; i<LCD_DISP_LENGTH ; ++i )
        lcd_putc(' ');

    lcd_gotoxy(0,y);
    10e4:	0c 94 14 08 	jmp	0x1028	; 0x1028 <lcd_gotoxy>

000010e8 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
    10e8:	cf 93       	push	r28
    10ea:	c8 2f       	mov	r28, r24
    }
    else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
           && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure all port bits as output (all LCD data lines on same port, but control lines on different ports) */
        DDR(LCD_DATA0_PORT) |= 0x0F;
    10ec:	94 b3       	in	r25, 0x14	; 20
    10ee:	9f 60       	ori	r25, 0x0F	; 15
    10f0:	94 bb       	out	0x14, r25	; 20
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
    10f2:	a6 9a       	sbi	0x14, 6	; 20
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
    10f4:	a4 9a       	sbi	0x14, 4	; 20
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    10f6:	a5 9a       	sbi	0x14, 5	; 20
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
    10f8:	e0 e0       	ldi	r30, 0x00	; 0
    10fa:	fd e7       	ldi	r31, 0x7D	; 125
    10fc:	31 97       	sbiw	r30, 0x01	; 1
    10fe:	f1 f7       	brne	.-4      	; 0x10fc <lcd_init+0x14>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
    1100:	a9 9a       	sbi	0x15, 1	; 21
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    1102:	a8 9a       	sbi	0x15, 0	; 21
    lcd_e_toggle();
    1104:	0e 94 bb 07 	call	0xf76	; 0xf76 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
    1108:	e0 e0       	ldi	r30, 0x00	; 0
    110a:	f7 e2       	ldi	r31, 0x27	; 39
    110c:	31 97       	sbiw	r30, 0x01	; 1
    110e:	f1 f7       	brne	.-4      	; 0x110c <lcd_init+0x24>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
    1110:	0e 94 bb 07 	call	0xf76	; 0xf76 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
    1114:	e0 e8       	ldi	r30, 0x80	; 128
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	31 97       	sbiw	r30, 0x01	; 1
    111a:	f1 f7       	brne	.-4      	; 0x1118 <lcd_init+0x30>
    /* repeat last command */
    lcd_e_toggle();
    delay(64);           /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
    111c:	0e 94 bb 07 	call	0xf76	; 0xf76 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
    1120:	e0 e8       	ldi	r30, 0x80	; 128
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	31 97       	sbiw	r30, 0x01	; 1
    1126:	f1 f7       	brne	.-4      	; 0x1124 <lcd_init+0x3c>
    /* repeat last command a third time */
    lcd_e_toggle();
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
    1128:	a8 98       	cbi	0x15, 0	; 21
    lcd_e_toggle();
    112a:	0e 94 bb 07 	call	0xf76	; 0xf76 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
    112e:	e0 e8       	ldi	r30, 0x80	; 128
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	31 97       	sbiw	r30, 0x01	; 1
    1134:	f1 f7       	brne	.-4      	; 0x1132 <lcd_init+0x4a>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
    1136:	88 e2       	ldi	r24, 0x28	; 40
    1138:	0e 94 02 08 	call	0x1004	; 0x1004 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
    113c:	88 e0       	ldi	r24, 0x08	; 8
    113e:	0e 94 02 08 	call	0x1004	; 0x1004 <lcd_command>
    lcd_clrscr();                           /* display clear                */
    1142:	0e 94 1f 08 	call	0x103e	; 0x103e <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
    1146:	86 e0       	ldi	r24, 0x06	; 6
    1148:	0e 94 02 08 	call	0x1004	; 0x1004 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
    114c:	8c 2f       	mov	r24, r28

}/* lcd_init */
    114e:	cf 91       	pop	r28
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
    lcd_clrscr();                           /* display clear                */
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
    lcd_command(dispAttr);                  /* display/cursor control       */
    1150:	0c 94 02 08 	jmp	0x1004	; 0x1004 <lcd_command>

00001154 <_crc16_update>:
		: "=r" (__ret), "=d" (__tmp)
		: "r" (__data), "0" (__crc)
		: "r0"
	);
	return __ret;
}
    1154:	86 27       	eor	r24, r22
    1156:	68 2f       	mov	r22, r24
    1158:	62 95       	swap	r22
    115a:	68 27       	eor	r22, r24
    115c:	06 2e       	mov	r0, r22
    115e:	66 95       	lsr	r22
    1160:	66 95       	lsr	r22
    1162:	60 25       	eor	r22, r0
    1164:	06 2e       	mov	r0, r22
    1166:	66 95       	lsr	r22
    1168:	60 25       	eor	r22, r0
    116a:	67 70       	andi	r22, 0x07	; 7
    116c:	08 2e       	mov	r0, r24
    116e:	89 2f       	mov	r24, r25
    1170:	66 95       	lsr	r22
    1172:	07 94       	ror	r0
    1174:	67 95       	ror	r22
    1176:	90 2d       	mov	r25, r0
    1178:	86 27       	eor	r24, r22
    117a:	06 94       	lsr	r0
    117c:	67 95       	ror	r22
    117e:	90 25       	eor	r25, r0
    1180:	86 27       	eor	r24, r22
    1182:	08 95       	ret

00001184 <rfm12_write>:
    sei();
}


uint16_t rfm12_write(uint16_t data)
{
    1184:	9c 01       	movw	r18, r24
    uint16_t in_data = 0;

	RFM12_SPI_PORT &= ~(1<<RFM12_EN);
    1186:	c4 98       	cbi	0x18, 4	; 24

#ifdef PROGRAM_SPI_ENABLE

	uint8_t i;

    RFM12_SPI_PORT &= ~(1<<RFM12_SCK);
    1188:	c7 98       	cbi	0x18, 7	; 24
    118a:	40 e1       	ldi	r20, 0x10	; 16
}


uint16_t rfm12_write(uint16_t data)
{
    uint16_t in_data = 0;
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;

    RFM12_SPI_PORT &= ~(1<<RFM12_SCK);
	for (i=0; i<16; i++)
	{
		if (data&0x8000)    RFM12_SPI_PORT |= (1<<RFM12_SDI);	              // вывод текущего бита в порт
    1190:	37 ff       	sbrs	r19, 7
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <rfm12_write+0x14>
    1194:	c5 9a       	sbi	0x18, 5	; 24
    1196:	01 c0       	rjmp	.+2      	; 0x119a <rfm12_write+0x16>
		else                RFM12_SPI_PORT &= ~(1<<RFM12_SDI);
    1198:	c5 98       	cbi	0x18, 5	; 24
		data<<=1;
    119a:	22 0f       	add	r18, r18
    119c:	33 1f       	adc	r19, r19
    119e:	88 0f       	add	r24, r24
    11a0:	99 1f       	adc	r25, r25

		if (RFM12_SPI_PIN&(1<<RFM12_SDO)) in_data = (in_data<<1) | 0x0001;    // считываение текущего бита с порта
    11a2:	b6 99       	sbic	0x16, 6	; 22
    11a4:	81 60       	ori	r24, 0x01	; 1
		else                              in_data = in_data<<1;

		RFM12_SPI_PORT |= (1<<RFM12_SCK);                                     // сигнал синхронизации
    11a6:	c7 9a       	sbi	0x18, 7	; 24
		asm("nop");                                                           // немного китайского кода
    11a8:	00 00       	nop
        asm("nop");
    11aa:	00 00       	nop
		RFM12_SPI_PORT &= ~(1<<RFM12_SCK);
    11ac:	c7 98       	cbi	0x18, 7	; 24
    11ae:	41 50       	subi	r20, 0x01	; 1
#ifdef PROGRAM_SPI_ENABLE

	uint8_t i;

    RFM12_SPI_PORT &= ~(1<<RFM12_SCK);
	for (i=0; i<16; i++)
    11b0:	79 f7       	brne	.-34     	; 0x1190 <rfm12_write+0xc>
    data = SPDR;
	in_data += data;

#endif // PROGRAM_SPI_ENABLE

	RFM12_SPI_PORT |= (1<<RFM12_EN);
    11b2:	c4 9a       	sbi	0x18, 4	; 24

    return in_data;

}
    11b4:	08 95       	ret

000011b6 <rfm12_transmit_pack>:
#endif
}


uint8_t rfm12_transmit_pack( uint8_t nbytes )
{
    11b6:	1f 93       	push	r17
    11b8:	cf 93       	push	r28
    11ba:	df 93       	push	r29
    11bc:	c8 2f       	mov	r28, r24
    uint8_t i=0;
    uint16_t crc = 0xffff;

    if (nbytes > DATA_BYTES_MAX)    return 1;
    11be:	89 31       	cpi	r24, 0x19	; 25
    11c0:	08 f0       	brcs	.+2      	; 0x11c4 <rfm12_transmit_pack+0xe>
    11c2:	55 c0       	rjmp	.+170    	; 0x126e <rfm12_transmit_pack+0xb8>

    switch (rfm_condition)
    11c4:	80 91 01 02 	lds	r24, 0x0201
    11c8:	81 30       	cpi	r24, 0x01	; 1
    11ca:	09 f4       	brne	.+2      	; 0x11ce <rfm12_transmit_pack+0x18>
    11cc:	52 c0       	rjmp	.+164    	; 0x1272 <rfm12_transmit_pack+0xbc>
    11ce:	82 30       	cpi	r24, 0x02	; 2
    11d0:	41 f4       	brne	.+16     	; 0x11e2 <rfm12_transmit_pack+0x2c>
        {
            return 2;
        }
        case RECEIVE_PACK :
        {
            rfm12_write(FIFO_AND_RESET);                                                           // перестать заполнять FIFO
    11d2:	81 e8       	ldi	r24, 0x81	; 129
    11d4:	9a ec       	ldi	r25, 0xCA	; 202
    11d6:	0e 94 c2 08 	call	0x1184	; 0x1184 <rfm12_write>
            rfm12_write(POWER_SC);
    11da:	88 e1       	ldi	r24, 0x18	; 24
    11dc:	92 e8       	ldi	r25, 0x82	; 130
    11de:	0e 94 c2 08 	call	0x1184	; 0x1184 <rfm12_write>
        }
    }

    rfm_condition = TRANSMIT_PACK;
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	80 93 01 02 	sts	0x0201, r24
    pack_counter = 0;
    11e8:	10 92 00 02 	sts	0x0200, r1

    pack_buffer[i++] = 0xaa;
    11ec:	8a ea       	ldi	r24, 0xAA	; 170
    11ee:	80 93 21 02 	sts	0x0221, r24
    pack_buffer[i++] = 0x2d;
    11f2:	8d e2       	ldi	r24, 0x2D	; 45
    11f4:	80 93 22 02 	sts	0x0222, r24
    pack_buffer[i++] = SYNCH_WORD;
    11f8:	84 ed       	ldi	r24, 0xD4	; 212
    11fa:	80 93 23 02 	sts	0x0223, r24
    pack_buffer[i++] = nbytes+2;
    11fe:	82 e0       	ldi	r24, 0x02	; 2
    1200:	8c 0f       	add	r24, r28
    1202:	80 93 24 02 	sts	0x0224, r24


uint8_t rfm12_transmit_pack( uint8_t nbytes )
{
    uint8_t i=0;
    uint16_t crc = 0xffff;
    1206:	8f ef       	ldi	r24, 0xFF	; 255
    1208:	9f ef       	ldi	r25, 0xFF	; 255
    pack_counter = 0;

    pack_buffer[i++] = 0xaa;
    pack_buffer[i++] = 0x2d;
    pack_buffer[i++] = SYNCH_WORD;
    pack_buffer[i++] = nbytes+2;
    120a:	44 e0       	ldi	r20, 0x04	; 4
    for ( ; i<(nbytes+HEADER_NBYTES) ; ++i) crc = _crc16_update(crc, pack_buffer[i]);
    120c:	d0 e0       	ldi	r29, 0x00	; 0
    120e:	23 96       	adiw	r28, 0x03	; 3
    1210:	24 2f       	mov	r18, r20
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	d9 01       	movw	r26, r18
    1216:	af 5d       	subi	r26, 0xDF	; 223
    1218:	bd 4f       	sbci	r27, 0xFD	; 253
    121a:	11 e0       	ldi	r17, 0x01	; 1
    121c:	14 0f       	add	r17, r20
    121e:	c2 17       	cp	r28, r18
    1220:	d3 07       	cpc	r29, r19
    1222:	2c f0       	brlt	.+10     	; 0x122e <rfm12_transmit_pack+0x78>
    1224:	6c 91       	ld	r22, X
    1226:	0e 94 aa 08 	call	0x1154	; 0x1154 <_crc16_update>
    122a:	41 2f       	mov	r20, r17
    122c:	f1 cf       	rjmp	.-30     	; 0x1210 <rfm12_transmit_pack+0x5a>
    pack_buffer[i++] = (uint8_t)(crc>>8);
    122e:	9c 93       	st	X, r25
    pack_buffer[i++] = (uint8_t)crc;
    1230:	e1 2f       	mov	r30, r17
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	ef 5d       	subi	r30, 0xDF	; 223
    1236:	fd 4f       	sbci	r31, 0xFD	; 253
    1238:	80 83       	st	Z, r24
    123a:	e2 e0       	ldi	r30, 0x02	; 2
    123c:	e4 0f       	add	r30, r20
    pack_buffer[i++] = 0xaa;
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	ef 5d       	subi	r30, 0xDF	; 223
    1242:	fd 4f       	sbci	r31, 0xFD	; 253
    1244:	8a ea       	ldi	r24, 0xAA	; 170
    1246:	80 83       	st	Z, r24
    1248:	e3 e0       	ldi	r30, 0x03	; 3
    124a:	e4 0f       	add	r30, r20
    pack_buffer[i++] = 0xaa;
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	ef 5d       	subi	r30, 0xDF	; 223
    1250:	fd 4f       	sbci	r31, 0xFD	; 253
    1252:	80 83       	st	Z, r24
    pack_size = i+2;
    1254:	4a 5f       	subi	r20, 0xFA	; 250
    1256:	40 93 ff 01 	sts	0x01FF, r20

    rfm12_write(CONFIGURATION_SETTING | TX_REG_MASK);
    125a:	87 ed       	ldi	r24, 0xD7	; 215
    125c:	90 e8       	ldi	r25, 0x80	; 128
    125e:	0e 94 c2 08 	call	0x1184	; 0x1184 <rfm12_write>
    rfm12_write(POWER_TX);      // включить передатик
    1262:	88 e3       	ldi	r24, 0x38	; 56
    1264:	92 e8       	ldi	r25, 0x82	; 130
    1266:	0e 94 c2 08 	call	0x1184	; 0x1184 <rfm12_write>

    return 0;
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	03 c0       	rjmp	.+6      	; 0x1274 <rfm12_transmit_pack+0xbe>
uint8_t rfm12_transmit_pack( uint8_t nbytes )
{
    uint8_t i=0;
    uint16_t crc = 0xffff;

    if (nbytes > DATA_BYTES_MAX)    return 1;
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	01 c0       	rjmp	.+2      	; 0x1274 <rfm12_transmit_pack+0xbe>

    switch (rfm_condition)
    {
        case TRANSMIT_PACK :
        {
            return 2;
    1272:	82 e0       	ldi	r24, 0x02	; 2

    rfm12_write(CONFIGURATION_SETTING | TX_REG_MASK);
    rfm12_write(POWER_TX);      // включить передатик

    return 0;
}
    1274:	df 91       	pop	r29
    1276:	cf 91       	pop	r28
    1278:	1f 91       	pop	r17
    127a:	08 95       	ret

0000127c <rfm12_wait_pack>:


uint8_t rfm12_wait_pack(void)
{
    switch (rfm_condition)
    127c:	80 91 01 02 	lds	r24, 0x0201
    1280:	81 30       	cpi	r24, 0x01	; 1
    1282:	99 f0       	breq	.+38     	; 0x12aa <rfm12_wait_pack+0x2e>
    1284:	82 30       	cpi	r24, 0x02	; 2
    1286:	99 f0       	breq	.+38     	; 0x12ae <rfm12_wait_pack+0x32>

        case RECEIVE_PACK :
            return 2;
    }

    rfm_condition = RECEIVE_PACK;
    1288:	82 e0       	ldi	r24, 0x02	; 2
    128a:	80 93 01 02 	sts	0x0201, r24
    pack_size = pack_counter = 0;
    128e:	10 92 00 02 	sts	0x0200, r1
    1292:	10 92 ff 01 	sts	0x01FF, r1

    rfm12_write(FIFO_AND_RESET | FIFO_EN_MASK);
    1296:	83 e8       	ldi	r24, 0x83	; 131
    1298:	9a ec       	ldi	r25, 0xCA	; 202
    129a:	0e 94 c2 08 	call	0x1184	; 0x1184 <rfm12_write>
    rfm12_write(POWER_RX);
    129e:	88 ec       	ldi	r24, 0xC8	; 200
    12a0:	92 e8       	ldi	r25, 0x82	; 130
    12a2:	0e 94 c2 08 	call	0x1184	; 0x1184 <rfm12_write>
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	08 95       	ret
uint8_t rfm12_wait_pack(void)
{
    switch (rfm_condition)
    {
        case TRANSMIT_PACK :
            return 1;
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	08 95       	ret

        case RECEIVE_PACK :
            return 2;
    12ae:	82 e0       	ldi	r24, 0x02	; 2
    pack_size = pack_counter = 0;

    rfm12_write(FIFO_AND_RESET | FIFO_EN_MASK);
    rfm12_write(POWER_RX);
    return 0;
}
    12b0:	08 95       	ret

000012b2 <rfm12_init>:
}


void rfm12_init(void)
{
	RFM12_IRQDDR &= ~(1<<RFM12_IRQ);
    12b2:	ba 98       	cbi	0x17, 2	; 23
	GICR |= (1<<INT2);
    12b4:	8b b7       	in	r24, 0x3b	; 59
    12b6:	80 62       	ori	r24, 0x20	; 32
    12b8:	8b bf       	out	0x3b, r24	; 59

	RFM12_SPI_DDR |= RFM12_SPI_MASK; 					// инициализация SPI
    12ba:	87 b3       	in	r24, 0x17	; 23
    12bc:	80 6b       	ori	r24, 0xB0	; 176
    12be:	87 bb       	out	0x17, r24	; 23
	RFM12_SPI_PORT |= (1<<RFM12_EN);
    12c0:	c4 9a       	sbi	0x18, 4	; 24
    RFM12_IRQDDR &= ~(1<<RFM12_IRQ);
    12c2:	ba 98       	cbi	0x17, 2	; 23

    GICR |= (1<<INT2);
    12c4:	8b b7       	in	r24, 0x3b	; 59
    12c6:	80 62       	ori	r24, 0x20	; 32
    12c8:	8b bf       	out	0x3b, r24	; 59

#ifndef PROGRAM_SPI_ENABLE
    SPCR = RFM12_SPCR;
#endif

    rfm12_write(CONFIGURATION_SETTING);
    12ca:	87 e5       	ldi	r24, 0x57	; 87
    12cc:	90 e8       	ldi	r25, 0x80	; 128
    12ce:	0e 94 c2 08 	call	0x1184	; 0x1184 <rfm12_write>
    rfm12_write(FREQUENCY_SETTING);
    12d2:	8b ed       	ldi	r24, 0xDB	; 219
    12d4:	94 ea       	ldi	r25, 0xA4	; 164
    12d6:	0e 94 c2 08 	call	0x1184	; 0x1184 <rfm12_write>
    rfm12_write(DATA_RATE);
    12da:	83 e2       	ldi	r24, 0x23	; 35
    12dc:	96 ec       	ldi	r25, 0xC6	; 198
    12de:	0e 94 c2 08 	call	0x1184	; 0x1184 <rfm12_write>
    rfm12_write(RECEIVER_CONTROL);
    12e2:	89 ea       	ldi	r24, 0xA9	; 169
    12e4:	94 e9       	ldi	r25, 0x94	; 148
    12e6:	0e 94 c2 08 	call	0x1184	; 0x1184 <rfm12_write>
    rfm12_write(DATA_FILTER);
    12ea:	8c e2       	ldi	r24, 0x2C	; 44
    12ec:	92 ec       	ldi	r25, 0xC2	; 194
    12ee:	0e 94 c2 08 	call	0x1184	; 0x1184 <rfm12_write>
    rfm12_write(FIFO_AND_RESET);
    12f2:	81 e8       	ldi	r24, 0x81	; 129
    12f4:	9a ec       	ldi	r25, 0xCA	; 202
    12f6:	0e 94 c2 08 	call	0x1184	; 0x1184 <rfm12_write>
    rfm12_write(SYNCHRON_PATTERN);
    12fa:	84 ed       	ldi	r24, 0xD4	; 212
    12fc:	9e ec       	ldi	r25, 0xCE	; 206
    12fe:	0e 94 c2 08 	call	0x1184	; 0x1184 <rfm12_write>
    rfm12_write(AFC_COMMAND);
    1302:	87 ea       	ldi	r24, 0xA7	; 167
    1304:	94 ec       	ldi	r25, 0xC4	; 196
    1306:	0e 94 c2 08 	call	0x1184	; 0x1184 <rfm12_write>
    rfm12_write(TX_CONFIGURATION);
    130a:	80 e1       	ldi	r24, 0x10	; 16
    130c:	98 e9       	ldi	r25, 0x98	; 152
    130e:	0e 94 c2 08 	call	0x1184	; 0x1184 <rfm12_write>
    rfm12_write(PLL_SETING);
    1312:	87 e7       	ldi	r24, 0x77	; 119
    1314:	9c ec       	ldi	r25, 0xCC	; 204
    1316:	0e 94 c2 08 	call	0x1184	; 0x1184 <rfm12_write>
    rfm12_write(LOW_DUTY_CYCLE);
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	98 ec       	ldi	r25, 0xC8	; 200
    131e:	0e 94 c2 08 	call	0x1184	; 0x1184 <rfm12_write>
    rfm12_write(WAKEUP_TIMER);
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	90 ee       	ldi	r25, 0xE0	; 224
    1326:	0e 94 c2 08 	call	0x1184	; 0x1184 <rfm12_write>
    rfm12_write(0x0000);
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	0e 94 c2 08 	call	0x1184	; 0x1184 <rfm12_write>

    rfm_condition = pack_size = error = 0;
    1332:	10 92 fe 01 	sts	0x01FE, r1
    1336:	10 92 ff 01 	sts	0x01FF, r1
    133a:	10 92 01 02 	sts	0x0201, r1
#ifdef ALWAYS_RX
    rfm12_wait_pack();
    133e:	0c 94 3e 09 	jmp	0x127c	; 0x127c <rfm12_wait_pack>

00001342 <rfm12_sleep>:
    return 0;
}


uint8_t rfm12_sleep(void)
{
    1342:	cf 93       	push	r28
    uint8_t buffer;

    rfm_condition = SLEEP;
    1344:	83 e0       	ldi	r24, 0x03	; 3
    1346:	80 93 01 02 	sts	0x0201, r24
    pack_counter = 0;
    134a:	10 92 00 02 	sts	0x0200, r1

    rfm12_write(POWER_SC);
    134e:	88 e1       	ldi	r24, 0x18	; 24
    1350:	92 e8       	ldi	r25, 0x82	; 130
    1352:	0e 94 c2 08 	call	0x1184	; 0x1184 <rfm12_write>
    buffer = rfm12_write(STATUS_READ);
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	0e 94 c2 08 	call	0x1184	; 0x1184 <rfm12_write>
    135e:	c8 2f       	mov	r28, r24
    rfm12_write(FIFO_AND_RESET);            // выкл. и обнулить FIFO
    1360:	81 e8       	ldi	r24, 0x81	; 129
    1362:	9a ec       	ldi	r25, 0xCA	; 202
    1364:	0e 94 c2 08 	call	0x1184	; 0x1184 <rfm12_write>
    rfm12_write(CONFIGURATION_SETTING);     // выкл. и обнулить буфер передатчика
    1368:	87 e5       	ldi	r24, 0x57	; 87
    136a:	90 e8       	ldi	r25, 0x80	; 128
    136c:	0e 94 c2 08 	call	0x1184	; 0x1184 <rfm12_write>

    return buffer;
}
    1370:	8c 2f       	mov	r24, r28
    1372:	cf 91       	pop	r28
    1374:	08 95       	ret

00001376 <__vector_3>:


volatile uint8_t rfm_condition = 0, pack_buffer[PACKET_SIZE], pack_counter = 0, pack_size = 0, error = 0;

ISR(INT2_vect)
{
    1376:	1f 92       	push	r1
    1378:	0f 92       	push	r0
    137a:	0f b6       	in	r0, 0x3f	; 63
    137c:	0f 92       	push	r0
    137e:	11 24       	eor	r1, r1
    1380:	2f 93       	push	r18
    1382:	3f 93       	push	r19
    1384:	4f 93       	push	r20
    1386:	5f 93       	push	r21
    1388:	6f 93       	push	r22
    138a:	7f 93       	push	r23
    138c:	8f 93       	push	r24
    138e:	9f 93       	push	r25
    1390:	af 93       	push	r26
    1392:	bf 93       	push	r27
    1394:	cf 93       	push	r28
    1396:	ef 93       	push	r30
    1398:	ff 93       	push	r31
	cli();
    139a:	f8 94       	cli

	switch (rfm_condition)
    139c:	80 91 01 02 	lds	r24, 0x0201
    13a0:	81 30       	cpi	r24, 0x01	; 1
    13a2:	19 f0       	breq	.+6      	; 0x13aa <__vector_3+0x34>
    13a4:	82 30       	cpi	r24, 0x02	; 2
    13a6:	11 f1       	breq	.+68     	; 0x13ec <__vector_3+0x76>
    13a8:	79 c0       	rjmp	.+242    	; 0x149c <__vector_3+0x126>
	{
        case TRANSMIT_PACK :
        {
            if ( (pack_counter < pack_size) && (pack_counter < PACKET_SIZE) )
    13aa:	90 91 00 02 	lds	r25, 0x0200
    13ae:	80 91 ff 01 	lds	r24, 0x01FF
    13b2:	98 17       	cp	r25, r24
    13b4:	88 f4       	brcc	.+34     	; 0x13d8 <__vector_3+0x62>
    13b6:	80 91 00 02 	lds	r24, 0x0200
    13ba:	80 32       	cpi	r24, 0x20	; 32
    13bc:	68 f4       	brcc	.+26     	; 0x13d8 <__vector_3+0x62>
                rfm12_write(TX_REGISTER_WRITE | pack_buffer[pack_counter++]);
    13be:	e0 91 00 02 	lds	r30, 0x0200
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	8e 0f       	add	r24, r30
    13c6:	80 93 00 02 	sts	0x0200, r24
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	ef 5d       	subi	r30, 0xDF	; 223
    13ce:	fd 4f       	sbci	r31, 0xFD	; 253
    13d0:	80 81       	ld	r24, Z
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	98 6b       	ori	r25, 0xB8	; 184
    13d6:	59 c0       	rjmp	.+178    	; 0x148a <__vector_3+0x114>
            else
            {
#ifdef  ALWAYS_RX
                rfm12_write(CONFIGURATION_SETTING);         // чтобы обнулить регистр отправки
    13d8:	87 e5       	ldi	r24, 0x57	; 87
    13da:	90 e8       	ldi	r25, 0x80	; 128
    13dc:	0e 94 c2 08 	call	0x1184	; 0x1184 <rfm12_write>
                rfm_condition = SLEEP;
    13e0:	83 e0       	ldi	r24, 0x03	; 3
    13e2:	80 93 01 02 	sts	0x0201, r24
                rfm12_wait_pack();
    13e6:	0e 94 3e 09 	call	0x127c	; 0x127c <rfm12_wait_pack>
    13ea:	5c c0       	rjmp	.+184    	; 0x14a4 <__vector_3+0x12e>

        case RECEIVE_PACK :
        {
            uint8_t buffer;

            buffer = (uint8_t)(rfm12_write(READ_FIFO));
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	90 eb       	ldi	r25, 0xB0	; 176
    13f0:	0e 94 c2 08 	call	0x1184	; 0x1184 <rfm12_write>

            if (pack_size == 0)
    13f4:	90 91 ff 01 	lds	r25, 0x01FF
    13f8:	91 11       	cpse	r25, r1
    13fa:	03 c0       	rjmp	.+6      	; 0x1402 <__vector_3+0x8c>
                pack_size = buffer;                                                 // первый байт определяет размер пакета
    13fc:	80 93 ff 01 	sts	0x01FF, r24
    1400:	51 c0       	rjmp	.+162    	; 0x14a4 <__vector_3+0x12e>
            else if ( (pack_counter < pack_size) && (pack_counter < PACKET_SIZE) )
    1402:	20 91 00 02 	lds	r18, 0x0200
    1406:	90 91 ff 01 	lds	r25, 0x01FF
    140a:	29 17       	cp	r18, r25
    140c:	78 f4       	brcc	.+30     	; 0x142c <__vector_3+0xb6>
    140e:	90 91 00 02 	lds	r25, 0x0200
    1412:	90 32       	cpi	r25, 0x20	; 32
    1414:	58 f4       	brcc	.+22     	; 0x142c <__vector_3+0xb6>
                pack_buffer[pack_counter++] = buffer;
    1416:	e0 91 00 02 	lds	r30, 0x0200
    141a:	91 e0       	ldi	r25, 0x01	; 1
    141c:	9e 0f       	add	r25, r30
    141e:	90 93 00 02 	sts	0x0200, r25
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	ef 5d       	subi	r30, 0xDF	; 223
    1426:	fd 4f       	sbci	r31, 0xFD	; 253
    1428:	80 83       	st	Z, r24
    142a:	3c c0       	rjmp	.+120    	; 0x14a4 <__vector_3+0x12e>
            else
            {
                uint8_t i;
                uint16_t crc=0xffff;

                pack_size -= 2;
    142c:	80 91 ff 01 	lds	r24, 0x01FF
    1430:	82 50       	subi	r24, 0x02	; 2
    1432:	80 93 ff 01 	sts	0x01FF, r24
            else if ( (pack_counter < pack_size) && (pack_counter < PACKET_SIZE) )
                pack_buffer[pack_counter++] = buffer;
            else
            {
                uint8_t i;
                uint16_t crc=0xffff;
    1436:	8f ef       	ldi	r24, 0xFF	; 255
    1438:	9f ef       	ldi	r25, 0xFF	; 255

                pack_size -= 2;
                for(i=0 ; i<pack_size ; ++i)    crc = _crc16_update(crc, pack_buffer[i]);
    143a:	c0 e0       	ldi	r28, 0x00	; 0
    143c:	20 91 ff 01 	lds	r18, 0x01FF
    1440:	c2 17       	cp	r28, r18
    1442:	48 f4       	brcc	.+18     	; 0x1456 <__vector_3+0xe0>
    1444:	ec 2f       	mov	r30, r28
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	ef 5d       	subi	r30, 0xDF	; 223
    144a:	fd 4f       	sbci	r31, 0xFD	; 253
    144c:	60 81       	ld	r22, Z
    144e:	0e 94 aa 08 	call	0x1154	; 0x1154 <_crc16_update>
    1452:	cf 5f       	subi	r28, 0xFF	; 255
    1454:	f3 cf       	rjmp	.-26     	; 0x143c <__vector_3+0xc6>

                if( (((uint8_t)(crc>>8)) != pack_buffer[pack_size]) || (((uint8_t)crc) != pack_buffer[pack_size+1]) )  //проверка crc
    1456:	e0 91 ff 01 	lds	r30, 0x01FF
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	ef 5d       	subi	r30, 0xDF	; 223
    145e:	fd 4f       	sbci	r31, 0xFD	; 253
    1460:	20 81       	ld	r18, Z
    1462:	29 13       	cpse	r18, r25
    1464:	08 c0       	rjmp	.+16     	; 0x1476 <__vector_3+0x100>
    1466:	e0 91 ff 01 	lds	r30, 0x01FF
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	ee 5d       	subi	r30, 0xDE	; 222
    146e:	fd 4f       	sbci	r31, 0xFD	; 253
    1470:	90 81       	ld	r25, Z
    1472:	98 17       	cp	r25, r24
    1474:	69 f0       	breq	.+26     	; 0x1490 <__vector_3+0x11a>
                {
#ifdef  ALWAYS_RX
                    rfm12_write(FIFO_AND_RESET);                                                       // перестать заполнять FIFO
    1476:	81 e8       	ldi	r24, 0x81	; 129
    1478:	9a ec       	ldi	r25, 0xCA	; 202
    147a:	0e 94 c2 08 	call	0x1184	; 0x1184 <rfm12_write>
                    pack_counter = pack_size = 0;
    147e:	10 92 ff 01 	sts	0x01FF, r1
    1482:	10 92 00 02 	sts	0x0200, r1
                    rfm12_write(FIFO_AND_RESET | FIFO_EN_MASK);
    1486:	83 e8       	ldi	r24, 0x83	; 131
    1488:	9a ec       	ldi	r25, 0xCA	; 202
    148a:	0e 94 c2 08 	call	0x1184	; 0x1184 <rfm12_write>
    148e:	0a c0       	rjmp	.+20     	; 0x14a4 <__vector_3+0x12e>
                    rfm12_sleep();
#endif
                }
                else
                {
                    rfm12_sleep();
    1490:	0e 94 a1 09 	call	0x1342	; 0x1342 <rfm12_sleep>
                    rfm_condition = NEW_PACK;
    1494:	84 e0       	ldi	r24, 0x04	; 4
    1496:	80 93 01 02 	sts	0x0201, r24
    149a:	04 c0       	rjmp	.+8      	; 0x14a4 <__vector_3+0x12e>
            break;
        }

        default :
        {
            error = rfm12_sleep();
    149c:	0e 94 a1 09 	call	0x1342	; 0x1342 <rfm12_sleep>
    14a0:	80 93 fe 01 	sts	0x01FE, r24
            break;
        }
	}
    sei();
    14a4:	78 94       	sei
}
    14a6:	ff 91       	pop	r31
    14a8:	ef 91       	pop	r30
    14aa:	cf 91       	pop	r28
    14ac:	bf 91       	pop	r27
    14ae:	af 91       	pop	r26
    14b0:	9f 91       	pop	r25
    14b2:	8f 91       	pop	r24
    14b4:	7f 91       	pop	r23
    14b6:	6f 91       	pop	r22
    14b8:	5f 91       	pop	r21
    14ba:	4f 91       	pop	r20
    14bc:	3f 91       	pop	r19
    14be:	2f 91       	pop	r18
    14c0:	0f 90       	pop	r0
    14c2:	0f be       	out	0x3f, r0	; 63
    14c4:	0f 90       	pop	r0
    14c6:	1f 90       	pop	r1
    14c8:	18 95       	reti

000014ca <rfm12_deep_sleep>:
    return buffer;
}


uint8_t rfm12_deep_sleep(void)
{
    14ca:	cf 93       	push	r28
    uint8_t buffer;

    rfm_condition = SLEEP;
    14cc:	83 e0       	ldi	r24, 0x03	; 3
    14ce:	80 93 01 02 	sts	0x0201, r24
    pack_counter = 0;
    14d2:	10 92 00 02 	sts	0x0200, r1

    rfm12_write(POWER_SLEEP);
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	92 e8       	ldi	r25, 0x82	; 130
    14da:	0e 94 c2 08 	call	0x1184	; 0x1184 <rfm12_write>
    buffer = rfm12_write(STATUS_READ);
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	0e 94 c2 08 	call	0x1184	; 0x1184 <rfm12_write>
    14e6:	c8 2f       	mov	r28, r24
    rfm12_write(FIFO_AND_RESET);            // выкл. и обнулить FIFO
    14e8:	81 e8       	ldi	r24, 0x81	; 129
    14ea:	9a ec       	ldi	r25, 0xCA	; 202
    14ec:	0e 94 c2 08 	call	0x1184	; 0x1184 <rfm12_write>
    rfm12_write(CONFIGURATION_SETTING);     // выкл. и обнулить буфер передатчика
    14f0:	87 e5       	ldi	r24, 0x57	; 87
    14f2:	90 e8       	ldi	r25, 0x80	; 128
    14f4:	0e 94 c2 08 	call	0x1184	; 0x1184 <rfm12_write>

    return buffer;
}
    14f8:	8c 2f       	mov	r24, r28
    14fa:	cf 91       	pop	r28
    14fc:	08 95       	ret

000014fe <rfm12_channel>:


void rfm12_channel(uint8_t ch)
{
    switch(ch)
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	fc 01       	movw	r30, r24
    1502:	31 97       	sbiw	r30, 0x01	; 1
    1504:	ee 30       	cpi	r30, 0x0E	; 14
    1506:	f1 05       	cpc	r31, r1
    1508:	78 f5       	brcc	.+94     	; 0x1568 <rfm12_channel+0x6a>
    150a:	e6 5d       	subi	r30, 0xD6	; 214
    150c:	ff 4f       	sbci	r31, 0xFF	; 255
    150e:	0c 94 9d 14 	jmp	0x293a	; 0x293a <__tablejump2__>
    {
    case 1 :
        rfm12_write(FREQ_CH1);
    1512:	8b ed       	ldi	r24, 0xDB	; 219
    1514:	94 ea       	ldi	r25, 0xA4	; 164
    1516:	26 c0       	rjmp	.+76     	; 0x1564 <rfm12_channel+0x66>
        break;
    case 2 :
        rfm12_write(FREQ_CH2);
    1518:	8c e0       	ldi	r24, 0x0C	; 12
    151a:	95 ea       	ldi	r25, 0xA5	; 165
    151c:	23 c0       	rjmp	.+70     	; 0x1564 <rfm12_channel+0x66>
        break;
    case 3 :
        rfm12_write(FREQ_CH3);
    151e:	8c e3       	ldi	r24, 0x3C	; 60
    1520:	95 ea       	ldi	r25, 0xA5	; 165
    1522:	20 c0       	rjmp	.+64     	; 0x1564 <rfm12_channel+0x66>
        break;
    case 4 :
        rfm12_write(FREQ_CH4);
    1524:	8c e6       	ldi	r24, 0x6C	; 108
    1526:	95 ea       	ldi	r25, 0xA5	; 165
    1528:	1d c0       	rjmp	.+58     	; 0x1564 <rfm12_channel+0x66>
        break;
    case 5 :
        rfm12_write(FREQ_CH5);
    152a:	8b e9       	ldi	r24, 0x9B	; 155
    152c:	95 ea       	ldi	r25, 0xA5	; 165
    152e:	1a c0       	rjmp	.+52     	; 0x1564 <rfm12_channel+0x66>
        break;
    case 6 :
        rfm12_write(FREQ_CH6);
    1530:	8b ec       	ldi	r24, 0xCB	; 203
    1532:	95 ea       	ldi	r25, 0xA5	; 165
    1534:	17 c0       	rjmp	.+46     	; 0x1564 <rfm12_channel+0x66>
        break;
    case 7 :
        rfm12_write(FREQ_CH7);
    1536:	8b ef       	ldi	r24, 0xFB	; 251
    1538:	95 ea       	ldi	r25, 0xA5	; 165
    153a:	14 c0       	rjmp	.+40     	; 0x1564 <rfm12_channel+0x66>
        break;
    case 8 :
        rfm12_write(FREQ_CH8);
    153c:	8c e2       	ldi	r24, 0x2C	; 44
    153e:	96 ea       	ldi	r25, 0xA6	; 166
    1540:	11 c0       	rjmp	.+34     	; 0x1564 <rfm12_channel+0x66>
        break;
    case 9 :
        rfm12_write(FREQ_CH9);
    1542:	8c e5       	ldi	r24, 0x5C	; 92
    1544:	96 ea       	ldi	r25, 0xA6	; 166
    1546:	0e c0       	rjmp	.+28     	; 0x1564 <rfm12_channel+0x66>
        break;
    case 10 :
        rfm12_write(FREQ_CH10);
    1548:	8c e8       	ldi	r24, 0x8C	; 140
    154a:	96 ea       	ldi	r25, 0xA6	; 166
    154c:	0b c0       	rjmp	.+22     	; 0x1564 <rfm12_channel+0x66>
        break;
    case 11 :
        rfm12_write(FREQ_CH11);
    154e:	8b eb       	ldi	r24, 0xBB	; 187
    1550:	96 ea       	ldi	r25, 0xA6	; 166
    1552:	08 c0       	rjmp	.+16     	; 0x1564 <rfm12_channel+0x66>
        break;
    case 12 :
        rfm12_write(FREQ_CH12);
    1554:	8b ee       	ldi	r24, 0xEB	; 235
    1556:	96 ea       	ldi	r25, 0xA6	; 166
    1558:	05 c0       	rjmp	.+10     	; 0x1564 <rfm12_channel+0x66>
        break;
    case 13 :
        rfm12_write(FREQ_CH13);
    155a:	8b e1       	ldi	r24, 0x1B	; 27
    155c:	97 ea       	ldi	r25, 0xA7	; 167
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <rfm12_channel+0x66>
        break;
    case 14 :
        rfm12_write(FREQ_CH14);
    1560:	8c e4       	ldi	r24, 0x4C	; 76
    1562:	97 ea       	ldi	r25, 0xA7	; 167
    1564:	0c 94 c2 08 	jmp	0x1184	; 0x1184 <rfm12_write>
    1568:	08 95       	ret

0000156a <beep_repeat>:
}


uint8_t beep_repeat(msg_par par)
{
    setTimer(MSG_BEEP, par, snd_duration);
    156a:	40 91 42 02 	lds	r20, 0x0242
    156e:	50 91 43 02 	lds	r21, 0x0243
    1572:	68 2f       	mov	r22, r24
    1574:	89 e0       	ldi	r24, 0x09	; 9
    1576:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <setTimer>
    return 0;
}
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	08 95       	ret

0000157e <clock>:
	}
}


uint8_t clock(msg_par par)
{
    157e:	0f 93       	push	r16
    1580:	1f 93       	push	r17
    1582:	cf 93       	push	r28
    1584:	df 93       	push	r29
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
    158a:	67 97       	sbiw	r28, 0x17	; 23
    158c:	0f b6       	in	r0, 0x3f	; 63
    158e:	f8 94       	cli
    1590:	de bf       	out	0x3e, r29	; 62
    1592:	0f be       	out	0x3f, r0	; 63
    1594:	cd bf       	out	0x3d, r28	; 61
	uint8_t time[7];
    char lcd_buffer[16];

	ds_read_time(time);
    1596:	ce 01       	movw	r24, r28
    1598:	41 96       	adiw	r24, 0x11	; 17
    159a:	0e 94 1a 06 	call	0xc34	; 0xc34 <ds_read_time>

	sprintf(lcd_buffer, "%02d.%02d %02d:%02d:%02d", time[4], time[5], time[2], time[1], time[0]);
    159e:	89 89       	ldd	r24, Y+17	; 0x11
    15a0:	1f 92       	push	r1
    15a2:	8f 93       	push	r24
    15a4:	8a 89       	ldd	r24, Y+18	; 0x12
    15a6:	1f 92       	push	r1
    15a8:	8f 93       	push	r24
    15aa:	8b 89       	ldd	r24, Y+19	; 0x13
    15ac:	1f 92       	push	r1
    15ae:	8f 93       	push	r24
    15b0:	8e 89       	ldd	r24, Y+22	; 0x16
    15b2:	1f 92       	push	r1
    15b4:	8f 93       	push	r24
    15b6:	8d 89       	ldd	r24, Y+21	; 0x15
    15b8:	1f 92       	push	r1
    15ba:	8f 93       	push	r24
    15bc:	81 e9       	ldi	r24, 0x91	; 145
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	9f 93       	push	r25
    15c2:	8f 93       	push	r24
    15c4:	8e 01       	movw	r16, r28
    15c6:	0f 5f       	subi	r16, 0xFF	; 255
    15c8:	1f 4f       	sbci	r17, 0xFF	; 255
    15ca:	1f 93       	push	r17
    15cc:	0f 93       	push	r16
    15ce:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <sprintf>
	lcd_gotoxy(0,0);
    15d2:	60 e0       	ldi	r22, 0x00	; 0
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	0e 94 14 08 	call	0x1028	; 0x1028 <lcd_gotoxy>
	lcd_puts(lcd_buffer);
    15da:	c8 01       	movw	r24, r16
    15dc:	0e 94 46 08 	call	0x108c	; 0x108c <lcd_puts>
	lcd_putc(status1);
    15e0:	80 91 55 02 	lds	r24, 0x0255
    15e4:	0e 94 25 08 	call	0x104a	; 0x104a <lcd_putc>
	lcd_putc(status2);
    15e8:	80 91 44 02 	lds	r24, 0x0244
    15ec:	0e 94 25 08 	call	0x104a	; 0x104a <lcd_putc>

    return 1;
    15f0:	0f b6       	in	r0, 0x3f	; 63
    15f2:	f8 94       	cli
    15f4:	de bf       	out	0x3e, r29	; 62
    15f6:	0f be       	out	0x3f, r0	; 63
    15f8:	cd bf       	out	0x3d, r28	; 61
}
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	67 96       	adiw	r28, 0x17	; 23
    15fe:	0f b6       	in	r0, 0x3f	; 63
    1600:	f8 94       	cli
    1602:	de bf       	out	0x3e, r29	; 62
    1604:	0f be       	out	0x3f, r0	; 63
    1606:	cd bf       	out	0x3d, r28	; 61
    1608:	df 91       	pop	r29
    160a:	cf 91       	pop	r28
    160c:	1f 91       	pop	r17
    160e:	0f 91       	pop	r16
    1610:	08 95       	ret

00001612 <beep>:

uint8_t beep(msg_par par)
{
	static unsigned char i;

	PORTB ^= (1<<PB0);
    1612:	98 b3       	in	r25, 0x18	; 24
    1614:	21 e0       	ldi	r18, 0x01	; 1
    1616:	92 27       	eor	r25, r18
    1618:	98 bb       	out	0x18, r25	; 24
	i++;
    161a:	90 91 05 02 	lds	r25, 0x0205
    161e:	9f 5f       	subi	r25, 0xFF	; 255
	if(i>=par)
    1620:	98 17       	cp	r25, r24
    1622:	18 f4       	brcc	.+6      	; 0x162a <beep+0x18>
uint8_t beep(msg_par par)
{
	static unsigned char i;

	PORTB ^= (1<<PB0);
	i++;
    1624:	90 93 05 02 	sts	0x0205, r25
    1628:	06 c0       	rjmp	.+12     	; 0x1636 <beep+0x24>
	if(i>=par)
	{
		i=0;
    162a:	10 92 05 02 	sts	0x0205, r1
        PORTB &= ~(1<<PB0);
    162e:	c0 98       	cbi	0x18, 0	; 24
        killTimer(MSG_BEEP);
    1630:	89 e0       	ldi	r24, 0x09	; 9
    1632:	0e 94 39 13 	call	0x2672	; 0x2672 <killTimer>
	}
	return 1;
}
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	08 95       	ret

0000163a <packet_handler>:


uint8_t packet_handler(msg_par par){

    if(pager_counter < PAGER_WAIT_TIME)    ++pager_counter;
    163a:	80 91 56 02 	lds	r24, 0x0256
    163e:	90 91 57 02 	lds	r25, 0x0257
    1642:	88 35       	cpi	r24, 0x58	; 88
    1644:	9b 41       	sbci	r25, 0x1B	; 27
    1646:	50 f4       	brcc	.+20     	; 0x165c <packet_handler+0x22>
    1648:	80 91 56 02 	lds	r24, 0x0256
    164c:	90 91 57 02 	lds	r25, 0x0257
    1650:	01 96       	adiw	r24, 0x01	; 1
    1652:	90 93 57 02 	sts	0x0257, r25
    1656:	80 93 56 02 	sts	0x0256, r24
    165a:	07 c0       	rjmp	.+14     	; 0x166a <packet_handler+0x30>
    else    if(status2 == 'P')             status2 = ' ';
    165c:	80 91 44 02 	lds	r24, 0x0244
    1660:	80 35       	cpi	r24, 0x50	; 80
    1662:	19 f4       	brne	.+6      	; 0x166a <packet_handler+0x30>
    1664:	80 e2       	ldi	r24, 0x20	; 32
    1666:	80 93 44 02 	sts	0x0244, r24

	if(rfm_condition != NEW_PACK)  return 2;                        // если нового пакета нет - возвращает 1
    166a:	80 91 01 02 	lds	r24, 0x0201
    166e:	84 30       	cpi	r24, 0x04	; 4
    1670:	09 f0       	breq	.+2      	; 0x1674 <packet_handler+0x3a>
    1672:	a6 c0       	rjmp	.+332    	; 0x17c0 <packet_handler+0x186>

    killTimer(MSG_PACK_HANDLER);
    1674:	85 e0       	ldi	r24, 0x05	; 5
    1676:	0e 94 39 13 	call	0x2672	; 0x2672 <killTimer>

    switch (pack_buffer[0])
    167a:	80 91 21 02 	lds	r24, 0x0221
    167e:	80 35       	cpi	r24, 0x50	; 80
    1680:	21 f0       	breq	.+8      	; 0x168a <packet_handler+0x50>
    1682:	83 37       	cpi	r24, 0x73	; 115
    1684:	09 f4       	brne	.+2      	; 0x1688 <packet_handler+0x4e>
    1686:	7e c0       	rjmp	.+252    	; 0x1784 <packet_handler+0x14a>
    1688:	93 c0       	rjmp	.+294    	; 0x17b0 <packet_handler+0x176>
    {
        case BUTTON :
        {
            switch (pack_buffer[1])
    168a:	80 91 22 02 	lds	r24, 0x0222
    168e:	82 30       	cpi	r24, 0x02	; 2
    1690:	a1 f1       	breq	.+104    	; 0x16fa <packet_handler+0xc0>
    1692:	89 34       	cpi	r24, 0x49	; 73
    1694:	09 f4       	brne	.+2      	; 0x1698 <packet_handler+0x5e>
    1696:	62 c0       	rjmp	.+196    	; 0x175c <packet_handler+0x122>
    1698:	81 30       	cpi	r24, 0x01	; 1
    169a:	09 f0       	breq	.+2      	; 0x169e <packet_handler+0x64>
    169c:	89 c0       	rjmp	.+274    	; 0x17b0 <packet_handler+0x176>
            {
            case CALL :
            {
				if ( (add_active_call() > 0) || (second_call > 0) )
    169e:	0e 94 05 01 	call	0x20a	; 0x20a <add_active_call>
    16a2:	81 11       	cpse	r24, r1
    16a4:	05 c0       	rjmp	.+10     	; 0x16b0 <packet_handler+0x76>
    16a6:	80 91 5d 02 	lds	r24, 0x025D
    16aa:	88 23       	and	r24, r24
    16ac:	09 f4       	brne	.+2      	; 0x16b0 <packet_handler+0x76>
    16ae:	4e c0       	rjmp	.+156    	; 0x174c <packet_handler+0x112>
                {
                    seep_call_write();
    16b0:	0e 94 8f 01 	call	0x31e	; 0x31e <seep_call_write>
                    if(snd_on) {
    16b4:	80 91 41 02 	lds	r24, 0x0241
    16b8:	88 23       	and	r24, r24
    16ba:	b1 f0       	breq	.+44     	; 0x16e8 <packet_handler+0xae>
                        setTimer(MSG_BEEP, 6, snd_duration);
    16bc:	40 91 42 02 	lds	r20, 0x0242
    16c0:	50 91 43 02 	lds	r21, 0x0243
    16c4:	66 e0       	ldi	r22, 0x06	; 6
    16c6:	89 e0       	ldi	r24, 0x09	; 9
    16c8:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <setTimer>
                        setTimer(MSG_BEEP_REP, 6, snd_duration*10);
    16cc:	80 91 42 02 	lds	r24, 0x0242
    16d0:	90 91 43 02 	lds	r25, 0x0243
    16d4:	2a e0       	ldi	r18, 0x0A	; 10
    16d6:	28 9f       	mul	r18, r24
    16d8:	a0 01       	movw	r20, r0
    16da:	29 9f       	mul	r18, r25
    16dc:	50 0d       	add	r21, r0
    16de:	11 24       	eor	r1, r1
    16e0:	66 e0       	ldi	r22, 0x06	; 6
    16e2:	8a e0       	ldi	r24, 0x0A	; 10
    16e4:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <setTimer>
                    }

                    if(active_on)   sendMessage(MSG_KEY_PRESS, 0);
    16e8:	80 91 04 02 	lds	r24, 0x0204
    16ec:	88 23       	and	r24, r24
    16ee:	21 f1       	breq	.+72     	; 0x1738 <packet_handler+0xfe>
    16f0:	60 e0       	ldi	r22, 0x00	; 0
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	0e 94 6f 12 	call	0x24de	; 0x24de <sendMessage>
    16f8:	29 c0       	rjmp	.+82     	; 0x174c <packet_handler+0x112>
                send_ackn();
                break;
            }
            case CANCEL :
            {
				if ( remove_active_call() )
    16fa:	0e 94 53 01 	call	0x2a6	; 0x2a6 <remove_active_call>
    16fe:	88 23       	and	r24, r24
    1700:	29 f1       	breq	.+74     	; 0x174c <packet_handler+0x112>
                {
                    seep_call_write();
    1702:	0e 94 8f 01 	call	0x31e	; 0x31e <seep_call_write>
                    if(snd_on) {
    1706:	80 91 41 02 	lds	r24, 0x0241
    170a:	88 23       	and	r24, r24
    170c:	59 f0       	breq	.+22     	; 0x1724 <packet_handler+0xea>
                        killTimer(MSG_BEEP_REP);
    170e:	8a e0       	ldi	r24, 0x0A	; 10
    1710:	0e 94 39 13 	call	0x2672	; 0x2672 <killTimer>
                        setTimer(MSG_BEEP, 2, snd_duration);
    1714:	40 91 42 02 	lds	r20, 0x0242
    1718:	50 91 43 02 	lds	r21, 0x0243
    171c:	62 e0       	ldi	r22, 0x02	; 2
    171e:	89 e0       	ldi	r24, 0x09	; 9
    1720:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <setTimer>
                    }

                    if(active_on)   sendMessage(MSG_KEY_PRESS, 0);
    1724:	80 91 04 02 	lds	r24, 0x0204
    1728:	81 11       	cpse	r24, r1
    172a:	e2 cf       	rjmp	.-60     	; 0x16f0 <packet_handler+0xb6>
                    else
                    {
                        if(n_active_calls)
    172c:	80 91 02 02 	lds	r24, 0x0202
    1730:	90 91 03 02 	lds	r25, 0x0203
    1734:	89 2b       	or	r24, r25
    1736:	69 f0       	breq	.+26     	; 0x1752 <packet_handler+0x118>
                    }

                    if(active_on)   sendMessage(MSG_KEY_PRESS, 0);
                    else
                    {
                        stopMenu();
    1738:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <stopMenu>
                        rfm12_channel(channel);         // на случай если прийдет вызов во время выдачи ID
    173c:	80 91 5c 02 	lds	r24, 0x025C
    1740:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <rfm12_channel>
                        startMenuNull();
    1744:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <startMenuNull>
                        display_call();
    1748:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <display_call>
                    }
                }
                send_ackn();
    174c:	0e 94 3d 02 	call	0x47a	; 0x47a <send_ackn>
    1750:	2f c0       	rjmp	.+94     	; 0x17b0 <packet_handler+0x176>
                            stopMenu();
                            rfm12_channel(channel);         // на случай если прийдет вызов во время выдачи ID
                            startMenuNull();
                            display_call();
                        }
                        else if( checkMenu() )   display_call();
    1752:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <checkMenu>
    1756:	88 23       	and	r24, r24
    1758:	c9 f3       	breq	.-14     	; 0x174c <packet_handler+0x112>
    175a:	f6 cf       	rjmp	.-20     	; 0x1748 <packet_handler+0x10e>
				send_ackn();
                break;
            }
            case ID_GET :
            {
                stopMenu();
    175c:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <stopMenu>
                lcd_init(LCD_DISP_ON_CURSOR_BLINK);
    1760:	8f e0       	ldi	r24, 0x0F	; 15
    1762:	0e 94 74 08 	call	0x10e8	; 0x10e8 <lcd_init>
                killHandler(MSG_KEY_PRESS, &Key_id);
    1766:	65 ea       	ldi	r22, 0xA5	; 165
    1768:	71 e1       	ldi	r23, 0x11	; 17
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <killHandler>
                setHandler(MSG_KEY_PRESS, &Key_button);
    1770:	6c e4       	ldi	r22, 0x4C	; 76
    1772:	7f e0       	ldi	r23, 0x0F	; 15
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	0e 94 b4 11 	call	0x2368	; 0x2368 <setHandler>
                sendMessage(MSG_KEY_PRESS,0);
    177a:	60 e0       	ldi	r22, 0x00	; 0
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	0e 94 6f 12 	call	0x24de	; 0x24de <sendMessage>
    1782:	16 c0       	rjmp	.+44     	; 0x17b0 <packet_handler+0x176>
            break;
        }

        case PAGER :
        {
            pager_counter = 0;
    1784:	10 92 57 02 	sts	0x0257, r1
    1788:	10 92 56 02 	sts	0x0256, r1
            if(status2 == ' ')  status2 = 'P';
    178c:	80 91 44 02 	lds	r24, 0x0244
    1790:	80 32       	cpi	r24, 0x20	; 32
    1792:	19 f4       	brne	.+6      	; 0x179a <packet_handler+0x160>
    1794:	80 e5       	ldi	r24, 0x50	; 80
    1796:	80 93 44 02 	sts	0x0244, r24

            switch(pack_buffer[1])
    179a:	80 91 22 02 	lds	r24, 0x0222
    179e:	8d 34       	cpi	r24, 0x4D	; 77
    17a0:	29 f0       	breq	.+10     	; 0x17ac <packet_handler+0x172>
    17a2:	83 36       	cpi	r24, 0x63	; 99
    17a4:	29 f4       	brne	.+10     	; 0x17b0 <packet_handler+0x176>
            {
                case EVENT :
                    send_active_call();
                    break;
                case TIME :
                    send_time();
    17a6:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <send_time>
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <packet_handler+0x176>
            if(status2 == ' ')  status2 = 'P';

            switch(pack_buffer[1])
            {
                case EVENT :
                    send_active_call();
    17ac:	0e 94 4a 02 	call	0x494	; 0x494 <send_active_call>
            }
            break;
        }
    }

    setTimer(MSG_PACK_HANDLER, 0, 1);
    17b0:	41 e0       	ldi	r20, 0x01	; 1
    17b2:	50 e0       	ldi	r21, 0x00	; 0
    17b4:	60 e0       	ldi	r22, 0x00	; 0
    17b6:	85 e0       	ldi	r24, 0x05	; 5
    17b8:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <setTimer>
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	08 95       	ret
uint8_t packet_handler(msg_par par){

    if(pager_counter < PAGER_WAIT_TIME)    ++pager_counter;
    else    if(status2 == 'P')             status2 = ' ';

	if(rfm_condition != NEW_PACK)  return 2;                        // если нового пакета нет - возвращает 1
    17c0:	82 e0       	ldi	r24, 0x02	; 2
    }

    setTimer(MSG_PACK_HANDLER, 0, 1);

	return 1;
}
    17c2:	08 95       	ret

000017c4 <dispMenu>:


/* Вывод пункта меню на экран */
uint8_t dispMenu(msg_par par) {

	lcd_cleanstr(1);
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	0e 94 61 08 	call	0x10c2	; 0x10c2 <lcd_cleanstr>

	if(selectedMenuItem == (menuItem*)&m_s1i1)  display_call();
    17ca:	80 91 92 02 	lds	r24, 0x0292
    17ce:	90 91 93 02 	lds	r25, 0x0293
    17d2:	21 e0       	ldi	r18, 0x01	; 1
    17d4:	85 37       	cpi	r24, 0x75	; 117
    17d6:	92 07       	cpc	r25, r18
    17d8:	19 f4       	brne	.+6      	; 0x17e0 <dispMenu+0x1c>
    17da:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <display_call>
    17de:	03 c0       	rjmp	.+6      	; 0x17e6 <dispMenu+0x22>
    else                                        lcd_puts_p((char *)&selectedMenuItem->Text);
    17e0:	09 96       	adiw	r24, 0x09	; 9
    17e2:	0e 94 52 08 	call	0x10a4	; 0x10a4 <lcd_puts_p>

	return (1);
}
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	08 95       	ret

000017ea <selectMenu>:
MAKE_MENU(m_s2i5,  m_s2i1,    m_s2i4,      m_s1i2,     m_s1i2,       0,         "Ha\267a\343");                                             // Выход


/* В этой функции описывается алгоритм выбора пунктов меню */
uint8_t selectMenu(msg_par par)
{
    17ea:	0f 93       	push	r16
    17ec:	1f 93       	push	r17
    17ee:	cf 93       	push	r28
    17f0:	df 93       	push	r29
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62
    17f6:	61 97       	sbiw	r28, 0x11	; 17
    17f8:	0f b6       	in	r0, 0x3f	; 63
    17fa:	f8 94       	cli
    17fc:	de bf       	out	0x3e, r29	; 62
    17fe:	0f be       	out	0x3f, r0	; 63
    1800:	cd bf       	out	0x3d, r28	; 61
    char lcd_buffer[16];

    lcd_clrscr();
    1802:	89 8b       	std	Y+17, r24	; 0x11
    1804:	0e 94 1f 08 	call	0x103e	; 0x103e <lcd_clrscr>

	switch (par)
    1808:	89 89       	ldd	r24, Y+17	; 0x11
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	fc 01       	movw	r30, r24
    180e:	32 97       	sbiw	r30, 0x02	; 2
    1810:	e9 30       	cpi	r30, 0x09	; 9
    1812:	f1 05       	cpc	r31, r1
    1814:	08 f0       	brcs	.+2      	; 0x1818 <selectMenu+0x2e>
    1816:	e0 c0       	rjmp	.+448    	; 0x19d8 <selectMenu+0x1ee>
    1818:	e8 5c       	subi	r30, 0xC8	; 200
    181a:	ff 4f       	sbci	r31, 0xFF	; 255
    181c:	0c 94 9d 14 	jmp	0x293a	; 0x293a <__tablejump2__>
    {
	case MENU_TIME :
	{
		lcd_init(LCD_DISP_ON_CURSOR_BLINK);
    1820:	8f e0       	ldi	r24, 0x0F	; 15
    1822:	0e 94 74 08 	call	0x10e8	; 0x10e8 <lcd_init>
		lcd_puts("\xe3\xe3 \xbc\xbc \xb4\xb4 \xc0\xc0 \xbc\xb8\xbd");
    1826:	8b eb       	ldi	r24, 0xBB	; 187
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	0e 94 46 08 	call	0x108c	; 0x108c <lcd_puts>
        ds_read_time(time);
    182e:	8b e8       	ldi	r24, 0x8B	; 139
    1830:	92 e0       	ldi	r25, 0x02	; 2
    1832:	0e 94 1a 06 	call	0xc34	; 0xc34 <ds_read_time>
        menu_x = 0;
    1836:	10 92 08 02 	sts	0x0208, r1

		setHandler(MSG_KEY_PRESS, &Key_time);
    183a:	68 e9       	ldi	r22, 0x98	; 152
    183c:	7d e0       	ldi	r23, 0x0D	; 13
    183e:	13 c0       	rjmp	.+38     	; 0x1866 <selectMenu+0x7c>
        sendMessage(MSG_KEY_PRESS, 0);
		break;
	}
    case MENU_SND :
	{
		lcd_init(LCD_DISP_ON_CURSOR_BLINK);
    1840:	8f e0       	ldi	r24, 0x0F	; 15
    1842:	0e 94 74 08 	call	0x10e8	; 0x10e8 <lcd_init>
		lcd_puts(" \267\263y\272: ");
    1846:	8b ec       	ldi	r24, 0xCB	; 203
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	0e 94 46 08 	call	0x108c	; 0x108c <lcd_puts>
		lcd_gotoxy(0,1);
    184e:	61 e0       	ldi	r22, 0x01	; 1
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	0e 94 14 08 	call	0x1028	; 0x1028 <lcd_gotoxy>
		lcd_puts(" \343\273\270\277.     ce\272.");
    1856:	83 ed       	ldi	r24, 0xD3	; 211
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	0e 94 46 08 	call	0x108c	; 0x108c <lcd_puts>
        menu_x = 0;
    185e:	10 92 08 02 	sts	0x0208, r1
		setHandler(MSG_KEY_PRESS, &Key_snd);
    1862:	60 e8       	ldi	r22, 0x80	; 128
    1864:	7e e0       	ldi	r23, 0x0E	; 14
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	0e 94 b4 11 	call	0x2368	; 0x2368 <setHandler>
    186c:	b1 c0       	rjmp	.+354    	; 0x19d0 <selectMenu+0x1e6>
        sendMessage(MSG_KEY_PRESS, 0);
		break;
	}
	case MENU_CH :
	{
 		lcd_init(LCD_DISP_ON_CURSOR_BLINK);
    186e:	8f e0       	ldi	r24, 0x0F	; 15
    1870:	0e 94 74 08 	call	0x10e8	; 0x10e8 <lcd_init>
        lcd_puts("B\263e\343\270\277e");
    1874:	83 ee       	ldi	r24, 0xE3	; 227
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	0e 94 46 08 	call	0x108c	; 0x108c <lcd_puts>

        setHandler(MSG_KEY_PRESS, &Key_channel);
    187c:	64 e0       	ldi	r22, 0x04	; 4
    187e:	70 e1       	ldi	r23, 0x10	; 16
    1880:	f2 cf       	rjmp	.-28     	; 0x1866 <selectMenu+0x7c>
        sendMessage(MSG_KEY_PRESS, 0);
        break;
	}
	case MENU_SCALL :
    {
        nevent = second_call;
    1882:	80 91 5d 02 	lds	r24, 0x025D
    1886:	80 93 06 02 	sts	0x0206, r24
        lcd_init(LCD_DISP_ON_CURSOR_BLINK);
    188a:	8f e0       	ldi	r24, 0x0F	; 15
    188c:	0e 94 74 08 	call	0x10e8	; 0x10e8 <lcd_init>
        lcd_puts("\250o\263\277op\275\303e \263\303\267.:");
    1890:	8b ee       	ldi	r24, 0xEB	; 235
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	0e 94 46 08 	call	0x108c	; 0x108c <lcd_puts>

        setHandler(MSG_KEY_PRESS, &Key_scall);
    1898:	6b ec       	ldi	r22, 0xCB	; 203
    189a:	7f e0       	ldi	r23, 0x0F	; 15
    189c:	e4 cf       	rjmp	.-56     	; 0x1866 <selectMenu+0x7c>
        break;
    }

	case MENU_ROM :
	{
		sprintf(lcd_buffer,"\244a\276o\273\275e\275o:%3d%%", seep_pointer/640);
    189e:	80 91 58 02 	lds	r24, 0x0258
    18a2:	90 91 59 02 	lds	r25, 0x0259
    18a6:	60 e8       	ldi	r22, 0x80	; 128
    18a8:	72 e0       	ldi	r23, 0x02	; 2
    18aa:	0e 94 89 14 	call	0x2912	; 0x2912 <__udivmodhi4>
    18ae:	7f 93       	push	r23
    18b0:	6f 93       	push	r22
    18b2:	8b ef       	ldi	r24, 0xFB	; 251
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	9f 93       	push	r25
    18b8:	8f 93       	push	r24
    18ba:	8e 01       	movw	r16, r28
    18bc:	0f 5f       	subi	r16, 0xFF	; 255
    18be:	1f 4f       	sbci	r17, 0xFF	; 255
    18c0:	1f 93       	push	r17
    18c2:	0f 93       	push	r16
    18c4:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <sprintf>
		lcd_puts(lcd_buffer);
    18c8:	c8 01       	movw	r24, r16
    18ca:	0e 94 46 08 	call	0x108c	; 0x108c <lcd_puts>
        sprintf(lcd_buffer, "%4d \307\300. \270\267 %4d", seep_pointer>>3, 8000);
    18ce:	80 91 58 02 	lds	r24, 0x0258
    18d2:	90 91 59 02 	lds	r25, 0x0259
    18d6:	2f e1       	ldi	r18, 0x1F	; 31
    18d8:	2f 93       	push	r18
    18da:	20 e4       	ldi	r18, 0x40	; 64
    18dc:	2f 93       	push	r18
    18de:	23 e0       	ldi	r18, 0x03	; 3
    18e0:	96 95       	lsr	r25
    18e2:	87 95       	ror	r24
    18e4:	2a 95       	dec	r18
    18e6:	e1 f7       	brne	.-8      	; 0x18e0 <selectMenu+0xf6>
    18e8:	9f 93       	push	r25
    18ea:	8f 93       	push	r24
    18ec:	8b e0       	ldi	r24, 0x0B	; 11
    18ee:	91 e0       	ldi	r25, 0x01	; 1
    18f0:	9f 93       	push	r25
    18f2:	8f 93       	push	r24
    18f4:	1f 93       	push	r17
    18f6:	0f 93       	push	r16
    18f8:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <sprintf>
        lcd_gotoxy(0,1);
    18fc:	61 e0       	ldi	r22, 0x01	; 1
    18fe:	80 e0       	ldi	r24, 0x00	; 0
    1900:	0e 94 14 08 	call	0x1028	; 0x1028 <lcd_gotoxy>
        lcd_puts(lcd_buffer);
    1904:	c8 01       	movw	r24, r16
    1906:	0e 94 46 08 	call	0x108c	; 0x108c <lcd_puts>
		setHandler(MSG_KEY_PRESS, &Key_ok);
    190a:	60 ec       	ldi	r22, 0xC0	; 192
    190c:	7f e0       	ldi	r23, 0x0F	; 15
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	0e 94 b4 11 	call	0x2368	; 0x2368 <setHandler>
		break;
    1914:	0f b6       	in	r0, 0x3f	; 63
    1916:	f8 94       	cli
    1918:	de bf       	out	0x3e, r29	; 62
    191a:	0f be       	out	0x3f, r0	; 63
    191c:	cd bf       	out	0x3d, r28	; 61
    191e:	5c c0       	rjmp	.+184    	; 0x19d8 <selectMenu+0x1ee>
	}
	case MENU_ST :
	{
        lcd_puts("Ko\273\270\300ec\277\263o");
    1920:	8a e1       	ldi	r24, 0x1A	; 26
    1922:	91 e0       	ldi	r25, 0x01	; 1
    1924:	0e 94 46 08 	call	0x108c	; 0x108c <lcd_puts>
        sprintf(lcd_buffer, "\276y\273\304\277o\263: %3d", nbuttons);
    1928:	80 91 5a 02 	lds	r24, 0x025A
    192c:	90 91 5b 02 	lds	r25, 0x025B
    1930:	9f 93       	push	r25
    1932:	8f 93       	push	r24
    1934:	85 e2       	ldi	r24, 0x25	; 37
    1936:	91 e0       	ldi	r25, 0x01	; 1
    1938:	9f 93       	push	r25
    193a:	8f 93       	push	r24
    193c:	8e 01       	movw	r16, r28
    193e:	0f 5f       	subi	r16, 0xFF	; 255
    1940:	1f 4f       	sbci	r17, 0xFF	; 255
    1942:	1f 93       	push	r17
    1944:	0f 93       	push	r16
    1946:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <sprintf>
        lcd_gotoxy(0,1);
    194a:	61 e0       	ldi	r22, 0x01	; 1
    194c:	80 e0       	ldi	r24, 0x00	; 0
    194e:	0e 94 14 08 	call	0x1028	; 0x1028 <lcd_gotoxy>
        lcd_puts(lcd_buffer);
    1952:	c8 01       	movw	r24, r16
    1954:	0e 94 46 08 	call	0x108c	; 0x108c <lcd_puts>

        setHandler(MSG_KEY_PRESS, &Key_ok);
    1958:	60 ec       	ldi	r22, 0xC0	; 192
    195a:	7f e0       	ldi	r23, 0x0F	; 15
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	0e 94 b4 11 	call	0x2368	; 0x2368 <setHandler>
        break;
    1962:	0f 90       	pop	r0
    1964:	0f 90       	pop	r0
    1966:	0f 90       	pop	r0
    1968:	0f 90       	pop	r0
    196a:	0f 90       	pop	r0
    196c:	0f 90       	pop	r0
    196e:	34 c0       	rjmp	.+104    	; 0x19d8 <selectMenu+0x1ee>
	}
	case MENU_EV :
	{
        if (seep_pointer > RECORD_SIZE)
    1970:	80 91 58 02 	lds	r24, 0x0258
    1974:	90 91 59 02 	lds	r25, 0x0259
    1978:	09 97       	sbiw	r24, 0x09	; 9
    197a:	18 f0       	brcs	.+6      	; 0x1982 <selectMenu+0x198>
        {
            setHandler(MSG_KEY_PRESS, &Key_event);
    197c:	64 e5       	ldi	r22, 0x54	; 84
    197e:	70 e1       	ldi	r23, 0x10	; 16
    1980:	22 c0       	rjmp	.+68     	; 0x19c6 <selectMenu+0x1dc>
            nevent = 0;
            sendMessage(MSG_KEY_PRESS, 0);
        }
        else
        {
            lcd_gotoxy(2,1);
    1982:	61 e0       	ldi	r22, 0x01	; 1
    1984:	82 e0       	ldi	r24, 0x02	; 2
    1986:	0e 94 14 08 	call	0x1028	; 0x1028 <lcd_gotoxy>
            lcd_puts("He\277 \263\303\267o\263o\263");
    198a:	82 e3       	ldi	r24, 0x32	; 50
    198c:	91 e0       	ldi	r25, 0x01	; 1
    198e:	0e 94 46 08 	call	0x108c	; 0x108c <lcd_puts>
            setHandler(MSG_KEY_PRESS, &Key_ok);
    1992:	60 ec       	ldi	r22, 0xC0	; 192
    1994:	7f e0       	ldi	r23, 0x0F	; 15
    1996:	11 c0       	rjmp	.+34     	; 0x19ba <selectMenu+0x1d0>
        }
        break;
	}
	case MENU_ID :
	{
        rfm12_channel(1);
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <rfm12_channel>
        lcd_puts("    Bc\277a\263\304\277e");
    199e:	8e e3       	ldi	r24, 0x3E	; 62
    19a0:	91 e0       	ldi	r25, 0x01	; 1
    19a2:	0e 94 46 08 	call	0x108c	; 0x108c <lcd_puts>
        lcd_gotoxy(0,1);
    19a6:	61 e0       	ldi	r22, 0x01	; 1
    19a8:	80 e0       	ldi	r24, 0x00	; 0
    19aa:	0e 94 14 08 	call	0x1028	; 0x1028 <lcd_gotoxy>
        lcd_puts("   \262a\277ape\271\272\270");
    19ae:	8b e4       	ldi	r24, 0x4B	; 75
    19b0:	91 e0       	ldi	r25, 0x01	; 1
    19b2:	0e 94 46 08 	call	0x108c	; 0x108c <lcd_puts>
        setHandler(MSG_KEY_PRESS, &Key_id);
    19b6:	65 ea       	ldi	r22, 0xA5	; 165
    19b8:	71 e1       	ldi	r23, 0x11	; 17
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	0e 94 b4 11 	call	0x2368	; 0x2368 <setHandler>
        break;
    19c0:	0b c0       	rjmp	.+22     	; 0x19d8 <selectMenu+0x1ee>
	}
	case MENU_ACT :
	{
        setHandler(MSG_KEY_PRESS, &Key_active);
    19c2:	6c e0       	ldi	r22, 0x0C	; 12
    19c4:	71 e1       	ldi	r23, 0x11	; 17
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	0e 94 b4 11 	call	0x2368	; 0x2368 <setHandler>
        nevent = 0;
    19cc:	10 92 06 02 	sts	0x0206, r1
        sendMessage(MSG_KEY_PRESS, 0);
    19d0:	60 e0       	ldi	r22, 0x00	; 0
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	0e 94 6f 12 	call	0x24de	; 0x24de <sendMessage>
        break;
	}
	}
	return 1;
}
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	61 96       	adiw	r28, 0x11	; 17
    19dc:	0f b6       	in	r0, 0x3f	; 63
    19de:	f8 94       	cli
    19e0:	de bf       	out	0x3e, r29	; 62
    19e2:	0f be       	out	0x3f, r0	; 63
    19e4:	cd bf       	out	0x3d, r28	; 61
    19e6:	df 91       	pop	r29
    19e8:	cf 91       	pop	r28
    19ea:	1f 91       	pop	r17
    19ec:	0f 91       	pop	r16
    19ee:	08 95       	ret

000019f0 <menuChange>:


/* Функция перехода к другому пункту меню, если пункт есть - то переходит, иначе - остается */
void menuChange(menuItem* NewMenu)
{
	if ((menuItem*)NewMenu == (menuItem*)&NULL_ENTRY)
    19f0:	21 e0       	ldi	r18, 0x01	; 1
    19f2:	8f 37       	cpi	r24, 0x7F	; 127
    19f4:	92 07       	cpc	r25, r18
    19f6:	21 f0       	breq	.+8      	; 0x1a00 <menuChange+0x10>
	  return;

	selectedMenuItem = NewMenu;
    19f8:	90 93 93 02 	sts	0x0293, r25
    19fc:	80 93 92 02 	sts	0x0292, r24
    1a00:	08 95       	ret

00001a02 <stopMenu>:
}


/* выход из меню */
uint8_t stopMenu(void) {
	killHandlersNum(MSG_KEY_PRESS);
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	0e 94 25 12 	call	0x244a	; 0x244a <killHandlersNum>
	killTimer(MSG_CLOCK_REF);
    1a08:	87 e0       	ldi	r24, 0x07	; 7
    1a0a:	0e 94 39 13 	call	0x2672	; 0x2672 <killTimer>
	killHandler(MSG_DISP_REFRESH, &dispMenu);
    1a0e:	62 ee       	ldi	r22, 0xE2	; 226
    1a10:	7b e0       	ldi	r23, 0x0B	; 11
    1a12:	84 e0       	ldi	r24, 0x04	; 4
    1a14:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <killHandler>
	return (0);
}
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	08 95       	ret

00001a1c <menuKey>:
	return (1);
}


/* Переход к другому пункту меню по нажатой кнопке */
uint8_t menuKey(msg_par par) {
    1a1c:	cf 93       	push	r28
    1a1e:	df 93       	push	r29
    1a20:	1f 92       	push	r1
    1a22:	cd b7       	in	r28, 0x3d	; 61
    1a24:	de b7       	in	r29, 0x3e	; 62
	switch (par) {
    1a26:	82 30       	cpi	r24, 0x02	; 2
    1a28:	f1 f0       	breq	.+60     	; 0x1a66 <menuKey+0x4a>
    1a2a:	60 f4       	brcc	.+24     	; 0x1a44 <menuKey+0x28>
    1a2c:	88 23       	and	r24, r24
    1a2e:	09 f4       	brne	.+2      	; 0x1a32 <menuKey+0x16>
    1a30:	42 c0       	rjmp	.+132    	; 0x1ab6 <menuKey+0x9a>
    1a32:	81 30       	cpi	r24, 0x01	; 1
    1a34:	09 f0       	breq	.+2      	; 0x1a38 <menuKey+0x1c>
    1a36:	3c c0       	rjmp	.+120    	; 0x1ab0 <menuKey+0x94>
				menuChange(CHILD);
			}
			break;
		}
	case KEY_UP: { // отмена выбора (возврат)
		menuChange(PARENT);
    1a38:	e0 91 92 02 	lds	r30, 0x0292
    1a3c:	f0 91 93 02 	lds	r31, 0x0293
    1a40:	34 96       	adiw	r30, 0x04	; 4
    1a42:	32 c0       	rjmp	.+100    	; 0x1aa8 <menuKey+0x8c>
}


/* Переход к другому пункту меню по нажатой кнопке */
uint8_t menuKey(msg_par par) {
	switch (par) {
    1a44:	84 30       	cpi	r24, 0x04	; 4
    1a46:	21 f0       	breq	.+8      	; 0x1a50 <menuKey+0x34>
    1a48:	48 f0       	brcs	.+18     	; 0x1a5c <menuKey+0x40>
    1a4a:	85 30       	cpi	r24, 0x05	; 5
    1a4c:	d1 f0       	breq	.+52     	; 0x1a82 <menuKey+0x66>
    1a4e:	30 c0       	rjmp	.+96     	; 0x1ab0 <menuKey+0x94>
	case 0: {
		return 1;
        }
	case KEY_LEFT: {
		menuChange(PREVIOUS);
    1a50:	e0 91 92 02 	lds	r30, 0x0292
    1a54:	f0 91 93 02 	lds	r31, 0x0293
    1a58:	32 96       	adiw	r30, 0x02	; 2
    1a5a:	26 c0       	rjmp	.+76     	; 0x1aa8 <menuKey+0x8c>
		break;
        }
	case KEY_RIGHT: {
		menuChange(NEXT);
    1a5c:	e0 91 92 02 	lds	r30, 0x0292
    1a60:	f0 91 93 02 	lds	r31, 0x0293
    1a64:	21 c0       	rjmp	.+66     	; 0x1aa8 <menuKey+0x8c>
		break;
        }
	case KEY_DOWN : {
            stopMenu();
    1a66:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <stopMenu>
            setHandler(MSG_KEY_PRESS, &Key_active);
    1a6a:	6c e0       	ldi	r22, 0x0C	; 12
    1a6c:	71 e1       	ldi	r23, 0x11	; 17
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	0e 94 b4 11 	call	0x2368	; 0x2368 <setHandler>
            nevent = 0;
    1a74:	10 92 06 02 	sts	0x0206, r1
            sendMessage(MSG_KEY_PRESS, 0);
    1a78:	60 e0       	ldi	r22, 0x00	; 0
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	0e 94 6f 12 	call	0x24de	; 0x24de <sendMessage>
            break;
    1a80:	17 c0       	rjmp	.+46     	; 0x1ab0 <menuKey+0x94>
        }
	case KEY_OK:
		{ // выбор пункта
			uint8_t sel;
			sel = SELECT;
    1a82:	80 91 92 02 	lds	r24, 0x0292
    1a86:	90 91 93 02 	lds	r25, 0x0293
    1a8a:	fc 01       	movw	r30, r24
    1a8c:	38 96       	adiw	r30, 0x08	; 8
    1a8e:	64 91       	lpm	r22, Z
			if (sel != 0)
    1a90:	66 23       	and	r22, r22
    1a92:	41 f0       	breq	.+16     	; 0x1aa4 <menuKey+0x88>
			{
                stopMenu();
    1a94:	69 83       	std	Y+1, r22	; 0x01
    1a96:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <stopMenu>
				sendMessage(MSG_MENU_SELECT, sel);
    1a9a:	69 81       	ldd	r22, Y+1	; 0x01
    1a9c:	86 e0       	ldi	r24, 0x06	; 6
    1a9e:	0e 94 6f 12 	call	0x24de	; 0x24de <sendMessage>
				return (1);
    1aa2:	09 c0       	rjmp	.+18     	; 0x1ab6 <menuKey+0x9a>
			}
			else
			{
				menuChange(CHILD);
    1aa4:	fc 01       	movw	r30, r24
    1aa6:	36 96       	adiw	r30, 0x06	; 6
			}
			break;
		}
	case KEY_UP: { // отмена выбора (возврат)
		menuChange(PARENT);
    1aa8:	85 91       	lpm	r24, Z+
    1aaa:	94 91       	lpm	r25, Z
    1aac:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <menuChange>
        }
	}
    dispMenu(0);
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <dispMenu>

	return (1);
}
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	0f 90       	pop	r0
    1aba:	df 91       	pop	r29
    1abc:	cf 91       	pop	r28
    1abe:	08 95       	ret

00001ac0 <startMenu>:
}


/* вход в меню */
uint8_t startMenu(void) {
	lcd_init(LCD_DISP_ON);
    1ac0:	8c e0       	ldi	r24, 0x0C	; 12
    1ac2:	0e 94 74 08 	call	0x10e8	; 0x10e8 <lcd_init>
	dispMenu(0);
    1ac6:	80 e0       	ldi	r24, 0x00	; 0
    1ac8:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <dispMenu>

	setHandler(MSG_KEY_PRESS, &menuKey);
    1acc:	6e e0       	ldi	r22, 0x0E	; 14
    1ace:	7d e0       	ldi	r23, 0x0D	; 13
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	0e 94 b4 11 	call	0x2368	; 0x2368 <setHandler>
	setHandler(MSG_DISP_REFRESH, &dispMenu);
    1ad6:	62 ee       	ldi	r22, 0xE2	; 226
    1ad8:	7b e0       	ldi	r23, 0x0B	; 11
    1ada:	84 e0       	ldi	r24, 0x04	; 4
    1adc:	0e 94 b4 11 	call	0x2368	; 0x2368 <setHandler>
    setTimer(MSG_CLOCK_REF, 0, 800);
    1ae0:	40 e2       	ldi	r20, 0x20	; 32
    1ae2:	53 e0       	ldi	r21, 0x03	; 3
    1ae4:	60 e0       	ldi	r22, 0x00	; 0
    1ae6:	87 e0       	ldi	r24, 0x07	; 7
    1ae8:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <setTimer>
    sendMessage(MSG_CLOCK_REF, 0);
    1aec:	60 e0       	ldi	r22, 0x00	; 0
    1aee:	87 e0       	ldi	r24, 0x07	; 7
    1af0:	0e 94 6f 12 	call	0x24de	; 0x24de <sendMessage>

    if(n_active_calls) display_call();
    1af4:	80 91 02 02 	lds	r24, 0x0202
    1af8:	90 91 03 02 	lds	r25, 0x0203
    1afc:	89 2b       	or	r24, r25
    1afe:	11 f0       	breq	.+4      	; 0x1b04 <startMenu+0x44>
    1b00:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <display_call>

    return (0);
}
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	08 95       	ret

00001b08 <startMenuNull>:


/* вход в меню с нулевого пункта*/
uint8_t startMenuNull(void) {
	selectedMenuItem = (menuItem*)&m_s1i1;
    1b08:	85 e7       	ldi	r24, 0x75	; 117
    1b0a:	91 e0       	ldi	r25, 0x01	; 1
    1b0c:	90 93 93 02 	sts	0x0293, r25
    1b10:	80 93 92 02 	sts	0x0292, r24
    startMenu();
    1b14:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <startMenu>
    return (0);
}
    1b18:	80 e0       	ldi	r24, 0x00	; 0
    1b1a:	08 95       	ret

00001b1c <checkMenu>:


uint8_t checkMenu(void) {
    if(	selectedMenuItem == (menuItem*)&m_s1i1 ) return 1;
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	20 91 92 02 	lds	r18, 0x0292
    1b22:	30 91 93 02 	lds	r19, 0x0293
    1b26:	25 57       	subi	r18, 0x75	; 117
    1b28:	31 40       	sbci	r19, 0x01	; 1
    1b2a:	09 f0       	breq	.+2      	; 0x1b2e <checkMenu+0x12>
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    else                                         return 0;
}
    1b2e:	08 95       	ret

00001b30 <Key_time>:
extern volatile uint16_t n_active_calls, seep_pointer, nbuttons, snd_duration;


uint8_t Key_time(msg_par par)
{
	switch (par)
    1b30:	83 30       	cpi	r24, 0x03	; 3
    1b32:	29 f1       	breq	.+74     	; 0x1b7e <Key_time+0x4e>
    1b34:	30 f4       	brcc	.+12     	; 0x1b42 <Key_time+0x12>
    1b36:	81 30       	cpi	r24, 0x01	; 1
    1b38:	09 f4       	brne	.+2      	; 0x1b3c <Key_time+0xc>
    1b3a:	6b c0       	rjmp	.+214    	; 0x1c12 <Key_time+0xe2>
    1b3c:	82 30       	cpi	r24, 0x02	; 2
    1b3e:	61 f1       	breq	.+88     	; 0x1b98 <Key_time+0x68>
    1b40:	a8 c0       	rjmp	.+336    	; 0x1c92 <Key_time+0x162>
    1b42:	84 30       	cpi	r24, 0x04	; 4
    1b44:	b1 f0       	breq	.+44     	; 0x1b72 <Key_time+0x42>
    1b46:	85 30       	cpi	r24, 0x05	; 5
    1b48:	09 f0       	breq	.+2      	; 0x1b4c <Key_time+0x1c>
    1b4a:	a3 c0       	rjmp	.+326    	; 0x1c92 <Key_time+0x162>
            break;
        }

        case KEY_OK:
        {
            time[0] = time[3] = 0x00;
    1b4c:	10 92 8e 02 	sts	0x028E, r1
    1b50:	10 92 8b 02 	sts	0x028B, r1
            ds_set_time(time);
    1b54:	8b e8       	ldi	r24, 0x8B	; 139
    1b56:	92 e0       	ldi	r25, 0x02	; 2
    1b58:	0e 94 8e 05 	call	0xb1c	; 0xb1c <ds_set_time>

            lcd_init(LCD_DISP_ON);
    1b5c:	8c e0       	ldi	r24, 0x0C	; 12
    1b5e:	0e 94 74 08 	call	0x10e8	; 0x10e8 <lcd_init>
            killHandler(MSG_KEY_PRESS, &Key_time);
    1b62:	68 e9       	ldi	r22, 0x98	; 152
    1b64:	7d e0       	ldi	r23, 0x0D	; 13
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <killHandler>
            startMenu();
    1b6c:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <startMenu>
            break;
    1b70:	c5 c0       	rjmp	.+394    	; 0x1cfc <Key_time+0x1cc>
uint8_t Key_time(msg_par par)
{
	switch (par)
	{
        case KEY_LEFT : {
            if (menu_x>0)    menu_x -= 3;
    1b72:	80 91 08 02 	lds	r24, 0x0208
    1b76:	88 23       	and	r24, r24
    1b78:	49 f0       	breq	.+18     	; 0x1b8c <Key_time+0x5c>
    1b7a:	83 50       	subi	r24, 0x03	; 3
    1b7c:	05 c0       	rjmp	.+10     	; 0x1b88 <Key_time+0x58>
            lcd_gotoxy(menu_x,1);
            break;
        }

        case KEY_RIGHT : {
            if (menu_x<12)    menu_x += 3;
    1b7e:	80 91 08 02 	lds	r24, 0x0208
    1b82:	8c 30       	cpi	r24, 0x0C	; 12
    1b84:	18 f4       	brcc	.+6      	; 0x1b8c <Key_time+0x5c>
    1b86:	8d 5f       	subi	r24, 0xFD	; 253
    1b88:	80 93 08 02 	sts	0x0208, r24
            lcd_gotoxy(menu_x,1);
    1b8c:	61 e0       	ldi	r22, 0x01	; 1
    1b8e:	80 91 08 02 	lds	r24, 0x0208
    1b92:	0e 94 14 08 	call	0x1028	; 0x1028 <lcd_gotoxy>
            break;
    1b96:	b2 c0       	rjmp	.+356    	; 0x1cfc <Key_time+0x1cc>
        }

        case KEY_DOWN : {
            switch (menu_x)
    1b98:	80 91 08 02 	lds	r24, 0x0208
    1b9c:	86 30       	cpi	r24, 0x06	; 6
    1b9e:	f9 f0       	breq	.+62     	; 0x1bde <Key_time+0xae>
    1ba0:	28 f4       	brcc	.+10     	; 0x1bac <Key_time+0x7c>
    1ba2:	88 23       	and	r24, r24
    1ba4:	41 f0       	breq	.+16     	; 0x1bb6 <Key_time+0x86>
    1ba6:	83 30       	cpi	r24, 0x03	; 3
    1ba8:	81 f0       	breq	.+32     	; 0x1bca <Key_time+0x9a>
    1baa:	75 c0       	rjmp	.+234    	; 0x1c96 <Key_time+0x166>
    1bac:	89 30       	cpi	r24, 0x09	; 9
    1bae:	09 f1       	breq	.+66     	; 0x1bf2 <Key_time+0xc2>
    1bb0:	8c 30       	cpi	r24, 0x0C	; 12
    1bb2:	39 f1       	breq	.+78     	; 0x1c02 <Key_time+0xd2>
    1bb4:	70 c0       	rjmp	.+224    	; 0x1c96 <Key_time+0x166>
            {
                case 0:
                    if (time[4]>0)  --time[4];
    1bb6:	80 91 8f 02 	lds	r24, 0x028F
    1bba:	88 23       	and	r24, r24
    1bbc:	11 f0       	breq	.+4      	; 0x1bc2 <Key_time+0x92>
    1bbe:	81 50       	subi	r24, 0x01	; 1
    1bc0:	01 c0       	rjmp	.+2      	; 0x1bc4 <Key_time+0x94>
                    else            time[4] = 31;
    1bc2:	8f e1       	ldi	r24, 0x1F	; 31
    1bc4:	80 93 8f 02 	sts	0x028F, r24
    1bc8:	66 c0       	rjmp	.+204    	; 0x1c96 <Key_time+0x166>
                    break;
                case 3:
                    if (time[5]>0)  --time[5];
    1bca:	80 91 90 02 	lds	r24, 0x0290
    1bce:	88 23       	and	r24, r24
    1bd0:	11 f0       	breq	.+4      	; 0x1bd6 <Key_time+0xa6>
    1bd2:	81 50       	subi	r24, 0x01	; 1
    1bd4:	01 c0       	rjmp	.+2      	; 0x1bd8 <Key_time+0xa8>
                    else            time[5] = 12;
    1bd6:	8c e0       	ldi	r24, 0x0C	; 12
    1bd8:	80 93 90 02 	sts	0x0290, r24
    1bdc:	5c c0       	rjmp	.+184    	; 0x1c96 <Key_time+0x166>
                    break;
                case 6:
                    if (time[6]>0)  --time[6];
    1bde:	80 91 91 02 	lds	r24, 0x0291
    1be2:	88 23       	and	r24, r24
    1be4:	11 f0       	breq	.+4      	; 0x1bea <Key_time+0xba>
    1be6:	81 50       	subi	r24, 0x01	; 1
    1be8:	01 c0       	rjmp	.+2      	; 0x1bec <Key_time+0xbc>
                    else            time[6] = 99;
    1bea:	83 e6       	ldi	r24, 0x63	; 99
    1bec:	80 93 91 02 	sts	0x0291, r24
    1bf0:	52 c0       	rjmp	.+164    	; 0x1c96 <Key_time+0x166>
                    break;
                case 9:
                    if (time[2]>0)    --time[2];
    1bf2:	80 91 8d 02 	lds	r24, 0x028D
    1bf6:	88 23       	and	r24, r24
    1bf8:	11 f0       	breq	.+4      	; 0x1bfe <Key_time+0xce>
    1bfa:	81 50       	subi	r24, 0x01	; 1
    1bfc:	39 c0       	rjmp	.+114    	; 0x1c70 <Key_time+0x140>
                    else              time[2] = 23;
    1bfe:	87 e1       	ldi	r24, 0x17	; 23
    1c00:	37 c0       	rjmp	.+110    	; 0x1c70 <Key_time+0x140>
                    break;
                case 12:
                    if (time[1]>0)    --time[1];
    1c02:	80 91 8c 02 	lds	r24, 0x028C
    1c06:	88 23       	and	r24, r24
    1c08:	11 f0       	breq	.+4      	; 0x1c0e <Key_time+0xde>
    1c0a:	81 50       	subi	r24, 0x01	; 1
    1c0c:	3c c0       	rjmp	.+120    	; 0x1c86 <Key_time+0x156>
                    else              time[1] = 59;
    1c0e:	8b e3       	ldi	r24, 0x3B	; 59
    1c10:	3a c0       	rjmp	.+116    	; 0x1c86 <Key_time+0x156>
            }
            break;
        }

        case KEY_UP : {
            switch (menu_x)
    1c12:	80 91 08 02 	lds	r24, 0x0208
    1c16:	86 30       	cpi	r24, 0x06	; 6
    1c18:	e9 f0       	breq	.+58     	; 0x1c54 <Key_time+0x124>
    1c1a:	28 f4       	brcc	.+10     	; 0x1c26 <Key_time+0xf6>
    1c1c:	88 23       	and	r24, r24
    1c1e:	41 f0       	breq	.+16     	; 0x1c30 <Key_time+0x100>
    1c20:	83 30       	cpi	r24, 0x03	; 3
    1c22:	79 f0       	breq	.+30     	; 0x1c42 <Key_time+0x112>
    1c24:	38 c0       	rjmp	.+112    	; 0x1c96 <Key_time+0x166>
    1c26:	89 30       	cpi	r24, 0x09	; 9
    1c28:	f1 f0       	breq	.+60     	; 0x1c66 <Key_time+0x136>
    1c2a:	8c 30       	cpi	r24, 0x0C	; 12
    1c2c:	39 f1       	breq	.+78     	; 0x1c7c <Key_time+0x14c>
    1c2e:	33 c0       	rjmp	.+102    	; 0x1c96 <Key_time+0x166>
            {
                case 0:
                    if (time[4]<31)  ++time[4];
    1c30:	80 91 8f 02 	lds	r24, 0x028F
    1c34:	8f 31       	cpi	r24, 0x1F	; 31
    1c36:	10 f4       	brcc	.+4      	; 0x1c3c <Key_time+0x10c>
    1c38:	8f 5f       	subi	r24, 0xFF	; 255
    1c3a:	c4 cf       	rjmp	.-120    	; 0x1bc4 <Key_time+0x94>
                    else             time[4] = 0;
    1c3c:	10 92 8f 02 	sts	0x028F, r1
    1c40:	2a c0       	rjmp	.+84     	; 0x1c96 <Key_time+0x166>
                    break;
                case 3:
                    if (time[5]<12)  ++time[5];
    1c42:	80 91 90 02 	lds	r24, 0x0290
    1c46:	8c 30       	cpi	r24, 0x0C	; 12
    1c48:	10 f4       	brcc	.+4      	; 0x1c4e <Key_time+0x11e>
    1c4a:	8f 5f       	subi	r24, 0xFF	; 255
    1c4c:	c5 cf       	rjmp	.-118    	; 0x1bd8 <Key_time+0xa8>
                    else             time[5] = 0;
    1c4e:	10 92 90 02 	sts	0x0290, r1
    1c52:	21 c0       	rjmp	.+66     	; 0x1c96 <Key_time+0x166>
                    break;
                case 6:
                    if (time[6]<99)  ++time[6];
    1c54:	80 91 91 02 	lds	r24, 0x0291
    1c58:	83 36       	cpi	r24, 0x63	; 99
    1c5a:	10 f4       	brcc	.+4      	; 0x1c60 <Key_time+0x130>
    1c5c:	8f 5f       	subi	r24, 0xFF	; 255
    1c5e:	c6 cf       	rjmp	.-116    	; 0x1bec <Key_time+0xbc>
                    else             time[6] = 0;
    1c60:	10 92 91 02 	sts	0x0291, r1
    1c64:	18 c0       	rjmp	.+48     	; 0x1c96 <Key_time+0x166>
                    break;
                case 9:
                    if (time[2]<23)  ++time[2];
    1c66:	80 91 8d 02 	lds	r24, 0x028D
    1c6a:	87 31       	cpi	r24, 0x17	; 23
    1c6c:	20 f4       	brcc	.+8      	; 0x1c76 <Key_time+0x146>
    1c6e:	8f 5f       	subi	r24, 0xFF	; 255
    1c70:	80 93 8d 02 	sts	0x028D, r24
    1c74:	10 c0       	rjmp	.+32     	; 0x1c96 <Key_time+0x166>
                    else             time[2] = 0;
    1c76:	10 92 8d 02 	sts	0x028D, r1
    1c7a:	0d c0       	rjmp	.+26     	; 0x1c96 <Key_time+0x166>
                    break;
                case 12:
                    if (time[1]<59)  ++time[1];
    1c7c:	80 91 8c 02 	lds	r24, 0x028C
    1c80:	8b 33       	cpi	r24, 0x3B	; 59
    1c82:	20 f4       	brcc	.+8      	; 0x1c8c <Key_time+0x15c>
    1c84:	8f 5f       	subi	r24, 0xFF	; 255
    1c86:	80 93 8c 02 	sts	0x028C, r24
    1c8a:	05 c0       	rjmp	.+10     	; 0x1c96 <Key_time+0x166>
                    else             time[1] = 0;
    1c8c:	10 92 8c 02 	sts	0x028C, r1
    1c90:	02 c0       	rjmp	.+4      	; 0x1c96 <Key_time+0x166>
            startMenu();
            break;
        }
	}

    if ( (par == KEY_UP) | (par == KEY_DOWN) | (par == 0) )
    1c92:	83 30       	cpi	r24, 0x03	; 3
    1c94:	98 f5       	brcc	.+102    	; 0x1cfc <Key_time+0x1cc>
    {
        sprintf(lcd_buffer, "%02d.%02d.%02d %02d:%02d", time[4], time[5], time[6], time[2], time[1]);
    1c96:	80 91 8c 02 	lds	r24, 0x028C
    1c9a:	1f 92       	push	r1
    1c9c:	8f 93       	push	r24
    1c9e:	80 91 8d 02 	lds	r24, 0x028D
    1ca2:	1f 92       	push	r1
    1ca4:	8f 93       	push	r24
    1ca6:	80 91 91 02 	lds	r24, 0x0291
    1caa:	1f 92       	push	r1
    1cac:	8f 93       	push	r24
    1cae:	80 91 90 02 	lds	r24, 0x0290
    1cb2:	1f 92       	push	r1
    1cb4:	8f 93       	push	r24
    1cb6:	80 91 8f 02 	lds	r24, 0x028F
    1cba:	1f 92       	push	r1
    1cbc:	8f 93       	push	r24
    1cbe:	88 e5       	ldi	r24, 0x58	; 88
    1cc0:	91 e0       	ldi	r25, 0x01	; 1
    1cc2:	9f 93       	push	r25
    1cc4:	8f 93       	push	r24
    1cc6:	85 e4       	ldi	r24, 0x45	; 69
    1cc8:	92 e0       	ldi	r25, 0x02	; 2
    1cca:	9f 93       	push	r25
    1ccc:	8f 93       	push	r24
    1cce:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <sprintf>
        lcd_gotoxy(0,1);
    1cd2:	61 e0       	ldi	r22, 0x01	; 1
    1cd4:	80 e0       	ldi	r24, 0x00	; 0
    1cd6:	0e 94 14 08 	call	0x1028	; 0x1028 <lcd_gotoxy>
        lcd_puts(lcd_buffer);
    1cda:	85 e4       	ldi	r24, 0x45	; 69
    1cdc:	92 e0       	ldi	r25, 0x02	; 2
    1cde:	0e 94 46 08 	call	0x108c	; 0x108c <lcd_puts>
        lcd_gotoxy(menu_x,1);
    1ce2:	61 e0       	ldi	r22, 0x01	; 1
    1ce4:	80 91 08 02 	lds	r24, 0x0208
    1ce8:	0e 94 14 08 	call	0x1028	; 0x1028 <lcd_gotoxy>
    1cec:	8d b7       	in	r24, 0x3d	; 61
    1cee:	9e b7       	in	r25, 0x3e	; 62
    1cf0:	0e 96       	adiw	r24, 0x0e	; 14
    1cf2:	0f b6       	in	r0, 0x3f	; 63
    1cf4:	f8 94       	cli
    1cf6:	9e bf       	out	0x3e, r25	; 62
    1cf8:	0f be       	out	0x3f, r0	; 63
    1cfa:	8d bf       	out	0x3d, r24	; 61
    }

	return (1);
}
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	08 95       	ret

00001d00 <Key_snd>:



uint8_t Key_snd(msg_par par)
{
	switch (par)
    1d00:	83 30       	cpi	r24, 0x03	; 3
    1d02:	61 f0       	breq	.+24     	; 0x1d1c <Key_snd+0x1c>
    1d04:	28 f4       	brcc	.+10     	; 0x1d10 <Key_snd+0x10>
    1d06:	81 30       	cpi	r24, 0x01	; 1
    1d08:	91 f1       	breq	.+100    	; 0x1d6e <Key_snd+0x6e>
    1d0a:	82 30       	cpi	r24, 0x02	; 2
    1d0c:	91 f0       	breq	.+36     	; 0x1d32 <Key_snd+0x32>
    1d0e:	7b c0       	rjmp	.+246    	; 0x1e06 <Key_snd+0x106>
    1d10:	84 30       	cpi	r24, 0x04	; 4
    1d12:	21 f0       	breq	.+8      	; 0x1d1c <Key_snd+0x1c>
    1d14:	85 30       	cpi	r24, 0x05	; 5
    1d16:	09 f4       	brne	.+2      	; 0x1d1a <Key_snd+0x1a>
    1d18:	50 c0       	rjmp	.+160    	; 0x1dba <Key_snd+0xba>
    1d1a:	75 c0       	rjmp	.+234    	; 0x1e06 <Key_snd+0x106>
	{
        case KEY_LEFT : {
            if (menu_x)    menu_x = 0;
    1d1c:	90 91 08 02 	lds	r25, 0x0208
    1d20:	99 23       	and	r25, r25
    1d22:	19 f0       	breq	.+6      	; 0x1d2a <Key_snd+0x2a>
    1d24:	10 92 08 02 	sts	0x0208, r1
    1d28:	6e c0       	rjmp	.+220    	; 0x1e06 <Key_snd+0x106>
            else           menu_x = 1;
    1d2a:	91 e0       	ldi	r25, 0x01	; 1
    1d2c:	90 93 08 02 	sts	0x0208, r25
    1d30:	6a c0       	rjmp	.+212    	; 0x1e06 <Key_snd+0x106>
            else           menu_x = 1;
            break;
        }

        case KEY_DOWN : {
            switch (menu_x)
    1d32:	80 91 08 02 	lds	r24, 0x0208
    1d36:	88 23       	and	r24, r24
    1d38:	19 f0       	breq	.+6      	; 0x1d40 <Key_snd+0x40>
    1d3a:	81 30       	cpi	r24, 0x01	; 1
    1d3c:	39 f0       	breq	.+14     	; 0x1d4c <Key_snd+0x4c>
    1d3e:	66 c0       	rjmp	.+204    	; 0x1e0c <Key_snd+0x10c>
            {
                case 0:
                    if (snd_on)    snd_on = 0;
    1d40:	80 91 41 02 	lds	r24, 0x0241
    1d44:	81 11       	cpse	r24, r1
    1d46:	1e c0       	rjmp	.+60     	; 0x1d84 <Key_snd+0x84>
                    else           snd_on = 1;
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	1f c0       	rjmp	.+62     	; 0x1d8a <Key_snd+0x8a>
                    break;
                case 1:
                    if (snd_duration>160)  snd_duration -= 160;
    1d4c:	80 91 42 02 	lds	r24, 0x0242
    1d50:	90 91 43 02 	lds	r25, 0x0243
    1d54:	81 3a       	cpi	r24, 0xA1	; 161
    1d56:	91 05       	cpc	r25, r1
    1d58:	38 f0       	brcs	.+14     	; 0x1d68 <Key_snd+0x68>
    1d5a:	80 91 42 02 	lds	r24, 0x0242
    1d5e:	90 91 43 02 	lds	r25, 0x0243
    1d62:	80 5a       	subi	r24, 0xA0	; 160
    1d64:	91 09       	sbc	r25, r1
    1d66:	24 c0       	rjmp	.+72     	; 0x1db0 <Key_snd+0xb0>
                    else                 snd_duration = 1600;
    1d68:	80 e4       	ldi	r24, 0x40	; 64
    1d6a:	96 e0       	ldi	r25, 0x06	; 6
    1d6c:	21 c0       	rjmp	.+66     	; 0x1db0 <Key_snd+0xb0>
            }
            break;
        }

        case KEY_UP : {
            switch (menu_x)
    1d6e:	90 91 08 02 	lds	r25, 0x0208
    1d72:	99 23       	and	r25, r25
    1d74:	19 f0       	breq	.+6      	; 0x1d7c <Key_snd+0x7c>
    1d76:	91 30       	cpi	r25, 0x01	; 1
    1d78:	59 f0       	breq	.+22     	; 0x1d90 <Key_snd+0x90>
    1d7a:	48 c0       	rjmp	.+144    	; 0x1e0c <Key_snd+0x10c>
            {
                case 0:
                    if (snd_on)    snd_on = 0;
    1d7c:	90 91 41 02 	lds	r25, 0x0241
    1d80:	99 23       	and	r25, r25
    1d82:	19 f0       	breq	.+6      	; 0x1d8a <Key_snd+0x8a>
    1d84:	10 92 41 02 	sts	0x0241, r1
    1d88:	41 c0       	rjmp	.+130    	; 0x1e0c <Key_snd+0x10c>
                    else           snd_on = 1;
    1d8a:	80 93 41 02 	sts	0x0241, r24
    1d8e:	3e c0       	rjmp	.+124    	; 0x1e0c <Key_snd+0x10c>
                    break;
                case 1:
                    if (snd_duration<1600)  snd_duration += 160;
    1d90:	80 91 42 02 	lds	r24, 0x0242
    1d94:	90 91 43 02 	lds	r25, 0x0243
    1d98:	80 34       	cpi	r24, 0x40	; 64
    1d9a:	96 40       	sbci	r25, 0x06	; 6
    1d9c:	38 f4       	brcc	.+14     	; 0x1dac <Key_snd+0xac>
    1d9e:	80 91 42 02 	lds	r24, 0x0242
    1da2:	90 91 43 02 	lds	r25, 0x0243
    1da6:	80 56       	subi	r24, 0x60	; 96
    1da8:	9f 4f       	sbci	r25, 0xFF	; 255
    1daa:	02 c0       	rjmp	.+4      	; 0x1db0 <Key_snd+0xb0>
                    else                     snd_duration = 160;
    1dac:	80 ea       	ldi	r24, 0xA0	; 160
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	90 93 43 02 	sts	0x0243, r25
    1db4:	80 93 42 02 	sts	0x0242, r24
    1db8:	29 c0       	rjmp	.+82     	; 0x1e0c <Key_snd+0x10c>
            break;
        }

        case KEY_OK:
        {
            ds_write_byte(SND_ON_POINTER, snd_on);
    1dba:	60 91 41 02 	lds	r22, 0x0241
    1dbe:	89 e0       	ldi	r24, 0x09	; 9
    1dc0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <ds_write_byte>
            ds_write_byte(SND_DURATION_HPOINTER, (uint8_t)(snd_duration>>8));
    1dc4:	80 91 42 02 	lds	r24, 0x0242
    1dc8:	90 91 43 02 	lds	r25, 0x0243
    1dcc:	69 2f       	mov	r22, r25
    1dce:	8a e0       	ldi	r24, 0x0A	; 10
    1dd0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <ds_write_byte>
            ds_write_byte(SND_DURATION_LPOINTER, (uint8_t)snd_duration);
    1dd4:	60 91 42 02 	lds	r22, 0x0242
    1dd8:	70 91 43 02 	lds	r23, 0x0243
    1ddc:	8b e0       	ldi	r24, 0x0B	; 11
    1dde:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <ds_write_byte>

            if(!snd_on) killTimer(MSG_BEEP_REP);
    1de2:	80 91 41 02 	lds	r24, 0x0241
    1de6:	81 11       	cpse	r24, r1
    1de8:	03 c0       	rjmp	.+6      	; 0x1df0 <Key_snd+0xf0>
    1dea:	8a e0       	ldi	r24, 0x0A	; 10
    1dec:	0e 94 39 13 	call	0x2672	; 0x2672 <killTimer>

            lcd_init(LCD_DISP_ON);
    1df0:	8c e0       	ldi	r24, 0x0C	; 12
    1df2:	0e 94 74 08 	call	0x10e8	; 0x10e8 <lcd_init>
            killHandler(MSG_KEY_PRESS, &Key_snd);
    1df6:	60 e8       	ldi	r22, 0x80	; 128
    1df8:	7e e0       	ldi	r23, 0x0E	; 14
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <killHandler>
            startMenu();
    1e00:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <startMenu>
    1e04:	47 c0       	rjmp	.+142    	; 0x1e94 <Key_snd+0x194>
            break;
        }
	}

    if ( (par == KEY_UP) | (par == KEY_DOWN) | (par == 0) )
    1e06:	83 30       	cpi	r24, 0x03	; 3
    1e08:	08 f0       	brcs	.+2      	; 0x1e0c <Key_snd+0x10c>
    1e0a:	44 c0       	rjmp	.+136    	; 0x1e94 <Key_snd+0x194>
    {
        lcd_gotoxy(7,0);
    1e0c:	60 e0       	ldi	r22, 0x00	; 0
    1e0e:	87 e0       	ldi	r24, 0x07	; 7
    1e10:	0e 94 14 08 	call	0x1028	; 0x1028 <lcd_gotoxy>
        if (snd_on) lcd_puts("\263\272\273\306\300e\275 ");
    1e14:	80 91 41 02 	lds	r24, 0x0241
    1e18:	88 23       	and	r24, r24
    1e1a:	19 f0       	breq	.+6      	; 0x1e22 <Key_snd+0x122>
    1e1c:	81 e7       	ldi	r24, 0x71	; 113
    1e1e:	91 e0       	ldi	r25, 0x01	; 1
    1e20:	02 c0       	rjmp	.+4      	; 0x1e26 <Key_snd+0x126>
        else        lcd_puts("\263\303\272\273\306\300e\275");
    1e22:	8a e7       	ldi	r24, 0x7A	; 122
    1e24:	91 e0       	ldi	r25, 0x01	; 1
    1e26:	0e 94 46 08 	call	0x108c	; 0x108c <lcd_puts>
        lcd_gotoxy(7,1);
    1e2a:	61 e0       	ldi	r22, 0x01	; 1
    1e2c:	87 e0       	ldi	r24, 0x07	; 7
    1e2e:	0e 94 14 08 	call	0x1028	; 0x1028 <lcd_gotoxy>
        if (snd_duration == 1600)   sprintf(lcd_buffer, "1.0");
    1e32:	80 91 42 02 	lds	r24, 0x0242
    1e36:	90 91 43 02 	lds	r25, 0x0243
    1e3a:	80 34       	cpi	r24, 0x40	; 64
    1e3c:	96 40       	sbci	r25, 0x06	; 6
    1e3e:	39 f4       	brne	.+14     	; 0x1e4e <Key_snd+0x14e>
    1e40:	63 e8       	ldi	r22, 0x83	; 131
    1e42:	71 e0       	ldi	r23, 0x01	; 1
    1e44:	85 e4       	ldi	r24, 0x45	; 69
    1e46:	92 e0       	ldi	r25, 0x02	; 2
    1e48:	0e 94 08 15 	call	0x2a10	; 0x2a10 <strcpy>
    1e4c:	1a c0       	rjmp	.+52     	; 0x1e82 <Key_snd+0x182>
        else                        sprintf(lcd_buffer, "0.%01d", snd_duration/160);
    1e4e:	80 91 42 02 	lds	r24, 0x0242
    1e52:	90 91 43 02 	lds	r25, 0x0243
    1e56:	60 ea       	ldi	r22, 0xA0	; 160
    1e58:	70 e0       	ldi	r23, 0x00	; 0
    1e5a:	0e 94 89 14 	call	0x2912	; 0x2912 <__udivmodhi4>
    1e5e:	7f 93       	push	r23
    1e60:	6f 93       	push	r22
    1e62:	87 e8       	ldi	r24, 0x87	; 135
    1e64:	91 e0       	ldi	r25, 0x01	; 1
    1e66:	9f 93       	push	r25
    1e68:	8f 93       	push	r24
    1e6a:	85 e4       	ldi	r24, 0x45	; 69
    1e6c:	92 e0       	ldi	r25, 0x02	; 2
    1e6e:	9f 93       	push	r25
    1e70:	8f 93       	push	r24
    1e72:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <sprintf>
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	0f 90       	pop	r0
    1e7e:	0f 90       	pop	r0
    1e80:	0f 90       	pop	r0
        lcd_puts(lcd_buffer);
    1e82:	85 e4       	ldi	r24, 0x45	; 69
    1e84:	92 e0       	ldi	r25, 0x02	; 2
    1e86:	0e 94 46 08 	call	0x108c	; 0x108c <lcd_puts>

        lcd_gotoxy(8,menu_x);
    1e8a:	60 91 08 02 	lds	r22, 0x0208
    1e8e:	88 e0       	ldi	r24, 0x08	; 8
    1e90:	0e 94 14 08 	call	0x1028	; 0x1028 <lcd_gotoxy>
    }

	return (1);
}
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	08 95       	ret

00001e98 <Key_button>:
}


uint8_t Key_button(msg_par par)
{
	switch (par)
    1e98:	82 30       	cpi	r24, 0x02	; 2
    1e9a:	49 f0       	breq	.+18     	; 0x1eae <Key_button+0x16>
    1e9c:	85 30       	cpi	r24, 0x05	; 5
    1e9e:	69 f0       	breq	.+26     	; 0x1eba <Key_button+0x22>
    1ea0:	81 30       	cpi	r24, 0x01	; 1
    1ea2:	09 f0       	breq	.+2      	; 0x1ea6 <Key_button+0xe>
    1ea4:	49 c0       	rjmp	.+146    	; 0x1f38 <Key_button+0xa0>
            break;
        }

        case KEY_UP:
        {
            ++id;
    1ea6:	80 91 07 02 	lds	r24, 0x0207
    1eaa:	8f 5f       	subi	r24, 0xFF	; 255
    1eac:	03 c0       	rjmp	.+6      	; 0x1eb4 <Key_button+0x1c>
{
	switch (par)
	{
        case KEY_DOWN:
        {
            --id;
    1eae:	80 91 07 02 	lds	r24, 0x0207
    1eb2:	81 50       	subi	r24, 0x01	; 1
            break;
        }

        case KEY_UP:
        {
            ++id;
    1eb4:	80 93 07 02 	sts	0x0207, r24
            break;
    1eb8:	41 c0       	rjmp	.+130    	; 0x1f3c <Key_button+0xa4>
        }

        case KEY_OK:
        {
            pack_buffer[0+HEADER_NBYTES] = BUTTON;
    1eba:	80 e5       	ldi	r24, 0x50	; 80
    1ebc:	80 93 25 02 	sts	0x0225, r24
            pack_buffer[1+HEADER_NBYTES] = ID_GET;
    1ec0:	89 e4       	ldi	r24, 0x49	; 73
    1ec2:	80 93 26 02 	sts	0x0226, r24
            pack_buffer[2+HEADER_NBYTES] = id;
    1ec6:	80 91 07 02 	lds	r24, 0x0207
    1eca:	80 93 27 02 	sts	0x0227, r24
            pack_buffer[3+HEADER_NBYTES] = channel;
    1ece:	80 91 5c 02 	lds	r24, 0x025C
    1ed2:	80 93 28 02 	sts	0x0228, r24

            rfm12_transmit_pack(4);
    1ed6:	84 e0       	ldi	r24, 0x04	; 4
    1ed8:	0e 94 db 08 	call	0x11b6	; 0x11b6 <rfm12_transmit_pack>

            if( verify_and_set_bit(id) )                     // если такой id раньше не добавлялся
    1edc:	80 91 07 02 	lds	r24, 0x0207
    1ee0:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <verify_and_set_bit>
    1ee4:	88 23       	and	r24, r24
    1ee6:	c1 f0       	breq	.+48     	; 0x1f18 <Key_button+0x80>
            {
                ++nbuttons;                                     // инкремент счетчика добавленых пультов
    1ee8:	80 91 5a 02 	lds	r24, 0x025A
    1eec:	90 91 5b 02 	lds	r25, 0x025B
    1ef0:	01 96       	adiw	r24, 0x01	; 1
    1ef2:	90 93 5b 02 	sts	0x025B, r25
    1ef6:	80 93 5a 02 	sts	0x025A, r24

                ds_write_byte(NBUTTONS_HPOINTER, (uint8_t)(nbuttons>>8));
    1efa:	80 91 5a 02 	lds	r24, 0x025A
    1efe:	90 91 5b 02 	lds	r25, 0x025B
    1f02:	69 2f       	mov	r22, r25
    1f04:	8c e0       	ldi	r24, 0x0C	; 12
    1f06:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <ds_write_byte>
                ds_write_byte(NBUTTONS_LPOINTER, (uint8_t)nbuttons);
    1f0a:	60 91 5a 02 	lds	r22, 0x025A
    1f0e:	70 91 5b 02 	lds	r23, 0x025B
    1f12:	8d e0       	ldi	r24, 0x0D	; 13
    1f14:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <ds_write_byte>
            }
            while(rfm_condition == TRANSMIT_PACK);
    1f18:	80 91 01 02 	lds	r24, 0x0201
    1f1c:	81 30       	cpi	r24, 0x01	; 1
    1f1e:	e1 f3       	breq	.-8      	; 0x1f18 <Key_button+0x80>
            rfm12_channel(channel);
    1f20:	80 91 5c 02 	lds	r24, 0x025C
    1f24:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <rfm12_channel>

            killHandler(MSG_KEY_PRESS, &Key_button);
    1f28:	6c e4       	ldi	r22, 0x4C	; 76
    1f2a:	7f e0       	ldi	r23, 0x0F	; 15
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <killHandler>
            startMenuNull();
    1f32:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <startMenuNull>
    1f36:	22 c0       	rjmp	.+68     	; 0x1f7c <Key_button+0xe4>
            break;
        }
	}

	if ( (par == KEY_UP) || (par == KEY_DOWN) || (par == 0) )
    1f38:	83 30       	cpi	r24, 0x03	; 3
    1f3a:	00 f5       	brcc	.+64     	; 0x1f7c <Key_button+0xe4>
    {
        lcd_gotoxy(0,1);
    1f3c:	61 e0       	ldi	r22, 0x01	; 1
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	0e 94 14 08 	call	0x1028	; 0x1028 <lcd_gotoxy>
        sprintf(lcd_buffer, "B\263e\343\270\277e ID: %3d", id);    // Введите ID: id
    1f44:	80 91 07 02 	lds	r24, 0x0207
    1f48:	1f 92       	push	r1
    1f4a:	8f 93       	push	r24
    1f4c:	8e e8       	ldi	r24, 0x8E	; 142
    1f4e:	91 e0       	ldi	r25, 0x01	; 1
    1f50:	9f 93       	push	r25
    1f52:	8f 93       	push	r24
    1f54:	85 e4       	ldi	r24, 0x45	; 69
    1f56:	92 e0       	ldi	r25, 0x02	; 2
    1f58:	9f 93       	push	r25
    1f5a:	8f 93       	push	r24
    1f5c:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <sprintf>
        lcd_puts(lcd_buffer);
    1f60:	85 e4       	ldi	r24, 0x45	; 69
    1f62:	92 e0       	ldi	r25, 0x02	; 2
    1f64:	0e 94 46 08 	call	0x108c	; 0x108c <lcd_puts>
        lcd_gotoxy(14,1);
    1f68:	61 e0       	ldi	r22, 0x01	; 1
    1f6a:	8e e0       	ldi	r24, 0x0E	; 14
    1f6c:	0e 94 14 08 	call	0x1028	; 0x1028 <lcd_gotoxy>
    1f70:	0f 90       	pop	r0
    1f72:	0f 90       	pop	r0
    1f74:	0f 90       	pop	r0
    1f76:	0f 90       	pop	r0
    1f78:	0f 90       	pop	r0
    1f7a:	0f 90       	pop	r0
	}

	return 1;
}
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	08 95       	ret

00001f80 <Key_ok>:



uint8_t Key_ok(msg_par par)
{
	if( par == KEY_OK )
    1f80:	85 30       	cpi	r24, 0x05	; 5
    1f82:	39 f4       	brne	.+14     	; 0x1f92 <Key_ok+0x12>
	{
        killHandler(MSG_KEY_PRESS, &Key_ok);
    1f84:	60 ec       	ldi	r22, 0xC0	; 192
    1f86:	7f e0       	ldi	r23, 0x0F	; 15
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <killHandler>
        startMenu();
    1f8e:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <startMenu>
	}
	return 1;
}
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	08 95       	ret

00001f96 <Key_scall>:


uint8_t Key_scall(msg_par par)
{

	switch (par)
    1f96:	82 30       	cpi	r24, 0x02	; 2
    1f98:	21 f0       	breq	.+8      	; 0x1fa2 <Key_scall+0xc>
    1f9a:	85 30       	cpi	r24, 0x05	; 5
    1f9c:	69 f0       	breq	.+26     	; 0x1fb8 <Key_scall+0x22>
    1f9e:	81 30       	cpi	r24, 0x01	; 1
    1fa0:	e1 f4       	brne	.+56     	; 0x1fda <Key_scall+0x44>
	{
        case KEY_DOWN:
        {
            if(nevent) nevent = 0;
    1fa2:	80 91 06 02 	lds	r24, 0x0206
    1fa6:	88 23       	and	r24, r24
    1fa8:	19 f0       	breq	.+6      	; 0x1fb0 <Key_scall+0x1a>
    1faa:	10 92 06 02 	sts	0x0206, r1
    1fae:	17 c0       	rjmp	.+46     	; 0x1fde <Key_scall+0x48>
            else       nevent = 1;
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	80 93 06 02 	sts	0x0206, r24
    1fb6:	13 c0       	rjmp	.+38     	; 0x1fde <Key_scall+0x48>
            break;
        }

        case KEY_OK:
        {
            second_call = nevent;
    1fb8:	80 91 06 02 	lds	r24, 0x0206
    1fbc:	80 93 5d 02 	sts	0x025D, r24
            ds_write_byte(SECOND_CALL_POINTER, second_call);
    1fc0:	60 91 5d 02 	lds	r22, 0x025D
    1fc4:	81 e1       	ldi	r24, 0x11	; 17
    1fc6:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <ds_write_byte>

            killHandler(MSG_KEY_PRESS, &Key_scall);
    1fca:	6b ec       	ldi	r22, 0xCB	; 203
    1fcc:	7f e0       	ldi	r23, 0x0F	; 15
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <killHandler>
            startMenu();
    1fd4:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <startMenu>
    1fd8:	15 c0       	rjmp	.+42     	; 0x2004 <Key_scall+0x6e>
            break;
        }
	}

	if ( (par == KEY_UP) || (par == KEY_DOWN) || (par == 0) )
    1fda:	83 30       	cpi	r24, 0x03	; 3
    1fdc:	98 f4       	brcc	.+38     	; 0x2004 <Key_scall+0x6e>
    {
        lcd_gotoxy(0,1);
    1fde:	61 e0       	ldi	r22, 0x01	; 1
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	0e 94 14 08 	call	0x1028	; 0x1028 <lcd_gotoxy>
        if(nevent) lcd_puts("   \276p\270\275\270\274a\277\304    ");
    1fe6:	80 91 06 02 	lds	r24, 0x0206
    1fea:	88 23       	and	r24, r24
    1fec:	19 f0       	breq	.+6      	; 0x1ff4 <Key_scall+0x5e>
    1fee:	8e e9       	ldi	r24, 0x9E	; 158
    1ff0:	91 e0       	ldi	r25, 0x01	; 1
    1ff2:	02 c0       	rjmp	.+4      	; 0x1ff8 <Key_scall+0x62>
        else       lcd_puts("  \270\264\275op\270po\263a\277\304  ");
    1ff4:	8f ea       	ldi	r24, 0xAF	; 175
    1ff6:	91 e0       	ldi	r25, 0x01	; 1
    1ff8:	0e 94 46 08 	call	0x108c	; 0x108c <lcd_puts>
        lcd_gotoxy(8,1);
    1ffc:	61 e0       	ldi	r22, 0x01	; 1
    1ffe:	88 e0       	ldi	r24, 0x08	; 8
    2000:	0e 94 14 08 	call	0x1028	; 0x1028 <lcd_gotoxy>
	}

	return 1;
}
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	08 95       	ret

00002008 <Key_channel>:
}


uint8_t Key_channel(msg_par par)
{
	switch (par)
    2008:	82 30       	cpi	r24, 0x02	; 2
    200a:	29 f0       	breq	.+10     	; 0x2016 <Key_channel+0xe>
    200c:	85 30       	cpi	r24, 0x05	; 5
    200e:	b9 f0       	breq	.+46     	; 0x203e <Key_channel+0x36>
    2010:	81 30       	cpi	r24, 0x01	; 1
    2012:	31 f5       	brne	.+76     	; 0x2060 <Key_channel+0x58>
    2014:	0a c0       	rjmp	.+20     	; 0x202a <Key_channel+0x22>
	{
        case KEY_DOWN:
        {
            if(channel > 1)  --channel;
    2016:	80 91 5c 02 	lds	r24, 0x025C
    201a:	82 30       	cpi	r24, 0x02	; 2
    201c:	20 f0       	brcs	.+8      	; 0x2026 <Key_channel+0x1e>
    201e:	80 91 5c 02 	lds	r24, 0x025C
    2022:	81 50       	subi	r24, 0x01	; 1
    2024:	09 c0       	rjmp	.+18     	; 0x2038 <Key_channel+0x30>
            else             channel = 14;
    2026:	8e e0       	ldi	r24, 0x0E	; 14
    2028:	07 c0       	rjmp	.+14     	; 0x2038 <Key_channel+0x30>
            break;
        }

        case KEY_UP:
        {
            if(channel < 14) ++channel;
    202a:	90 91 5c 02 	lds	r25, 0x025C
    202e:	9e 30       	cpi	r25, 0x0E	; 14
    2030:	18 f4       	brcc	.+6      	; 0x2038 <Key_channel+0x30>
    2032:	80 91 5c 02 	lds	r24, 0x025C
    2036:	8f 5f       	subi	r24, 0xFF	; 255
            else             channel = 1;
    2038:	80 93 5c 02 	sts	0x025C, r24
    203c:	13 c0       	rjmp	.+38     	; 0x2064 <Key_channel+0x5c>
            break;
        }

        case KEY_OK:
        {
            ds_write_byte(CHANNEL_POINTER, channel);
    203e:	60 91 5c 02 	lds	r22, 0x025C
    2042:	8e e0       	ldi	r24, 0x0E	; 14
    2044:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <ds_write_byte>

            rfm12_channel(channel);
    2048:	80 91 5c 02 	lds	r24, 0x025C
    204c:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <rfm12_channel>

            killHandler(MSG_KEY_PRESS, &Key_channel);
    2050:	64 e0       	ldi	r22, 0x04	; 4
    2052:	70 e1       	ldi	r23, 0x10	; 16
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <killHandler>
            startMenu();
    205a:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <startMenu>
    205e:	22 c0       	rjmp	.+68     	; 0x20a4 <Key_channel+0x9c>
            break;
        }
	}

	if ( (par == KEY_UP) || (par == KEY_DOWN) || (par == 0) )
    2060:	83 30       	cpi	r24, 0x03	; 3
    2062:	00 f5       	brcc	.+64     	; 0x20a4 <Key_channel+0x9c>
    {
        lcd_gotoxy(0,1);
    2064:	61 e0       	ldi	r22, 0x01	; 1
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	0e 94 14 08 	call	0x1028	; 0x1028 <lcd_gotoxy>
        sprintf(lcd_buffer, "Ka\275a\273: %2d", channel);    // Канал: channel
    206c:	80 91 5c 02 	lds	r24, 0x025C
    2070:	1f 92       	push	r1
    2072:	8f 93       	push	r24
    2074:	80 ec       	ldi	r24, 0xC0	; 192
    2076:	91 e0       	ldi	r25, 0x01	; 1
    2078:	9f 93       	push	r25
    207a:	8f 93       	push	r24
    207c:	85 e4       	ldi	r24, 0x45	; 69
    207e:	92 e0       	ldi	r25, 0x02	; 2
    2080:	9f 93       	push	r25
    2082:	8f 93       	push	r24
    2084:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <sprintf>
        lcd_puts(lcd_buffer);
    2088:	85 e4       	ldi	r24, 0x45	; 69
    208a:	92 e0       	ldi	r25, 0x02	; 2
    208c:	0e 94 46 08 	call	0x108c	; 0x108c <lcd_puts>
        lcd_gotoxy(8,1);
    2090:	61 e0       	ldi	r22, 0x01	; 1
    2092:	88 e0       	ldi	r24, 0x08	; 8
    2094:	0e 94 14 08 	call	0x1028	; 0x1028 <lcd_gotoxy>
    2098:	0f 90       	pop	r0
    209a:	0f 90       	pop	r0
    209c:	0f 90       	pop	r0
    209e:	0f 90       	pop	r0
    20a0:	0f 90       	pop	r0
    20a2:	0f 90       	pop	r0
	}
    return 1;
}
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	08 95       	ret

000020a8 <Key_event>:
}



uint8_t Key_event(msg_par par)
{
    20a8:	cf 93       	push	r28
    20aa:	df 93       	push	r29
    20ac:	cd b7       	in	r28, 0x3d	; 61
    20ae:	de b7       	in	r29, 0x3e	; 62
    20b0:	28 97       	sbiw	r28, 0x08	; 8
    20b2:	0f b6       	in	r0, 0x3f	; 63
    20b4:	f8 94       	cli
    20b6:	de bf       	out	0x3e, r29	; 62
    20b8:	0f be       	out	0x3f, r0	; 63
    20ba:	cd bf       	out	0x3d, r28	; 61
    uint8_t event_buffer[RECORD_SIZE];

	switch (par)
    20bc:	82 30       	cpi	r24, 0x02	; 2
    20be:	29 f0       	breq	.+10     	; 0x20ca <Key_event+0x22>
    20c0:	85 30       	cpi	r24, 0x05	; 5
    20c2:	01 f1       	breq	.+64     	; 0x2104 <Key_event+0x5c>
    20c4:	81 30       	cpi	r24, 0x01	; 1
    20c6:	31 f5       	brne	.+76     	; 0x2114 <Key_event+0x6c>
    20c8:	15 c0       	rjmp	.+42     	; 0x20f4 <Key_event+0x4c>
	{
        case KEY_DOWN :
        {
            if( nevent < ((seep_pointer>>3)-2) )
    20ca:	40 91 06 02 	lds	r20, 0x0206
    20ce:	80 91 58 02 	lds	r24, 0x0258
    20d2:	90 91 59 02 	lds	r25, 0x0259
    20d6:	24 2f       	mov	r18, r20
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	63 e0       	ldi	r22, 0x03	; 3
    20dc:	96 95       	lsr	r25
    20de:	87 95       	ror	r24
    20e0:	6a 95       	dec	r22
    20e2:	e1 f7       	brne	.-8      	; 0x20dc <Key_event+0x34>
    20e4:	02 97       	sbiw	r24, 0x02	; 2
    20e6:	28 17       	cp	r18, r24
    20e8:	39 07       	cpc	r19, r25
    20ea:	b8 f4       	brcc	.+46     	; 0x211a <Key_event+0x72>
                ++nevent;
    20ec:	4f 5f       	subi	r20, 0xFF	; 255
    20ee:	40 93 06 02 	sts	0x0206, r20
    20f2:	13 c0       	rjmp	.+38     	; 0x211a <Key_event+0x72>
            break;
        }

        case KEY_UP :
        {
            if (nevent > 0)
    20f4:	80 91 06 02 	lds	r24, 0x0206
    20f8:	88 23       	and	r24, r24
    20fa:	79 f0       	breq	.+30     	; 0x211a <Key_event+0x72>
                --nevent;
    20fc:	81 50       	subi	r24, 0x01	; 1
    20fe:	80 93 06 02 	sts	0x0206, r24
    2102:	0b c0       	rjmp	.+22     	; 0x211a <Key_event+0x72>
            break;
        }

        case KEY_OK:
        {
            killHandler(MSG_KEY_PRESS, &Key_event);
    2104:	64 e5       	ldi	r22, 0x54	; 84
    2106:	70 e1       	ldi	r23, 0x10	; 16
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <killHandler>
            startMenu();
    210e:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <startMenu>
    2112:	78 c0       	rjmp	.+240    	; 0x2204 <Key_event+0x15c>
            break;
        }
	}

	if ( (par == KEY_UP) || (par == KEY_DOWN) || (par == 0) )
    2114:	83 30       	cpi	r24, 0x03	; 3
    2116:	08 f0       	brcs	.+2      	; 0x211a <Key_event+0x72>
    2118:	75 c0       	rjmp	.+234    	; 0x2204 <Key_event+0x15c>
    {
        cli();
    211a:	f8 94       	cli
        seep_read(seep_pointer - ((nevent+1)<<3), event_buffer, RECORD_SIZE);
    211c:	80 91 58 02 	lds	r24, 0x0258
    2120:	90 91 59 02 	lds	r25, 0x0259
    2124:	20 91 06 02 	lds	r18, 0x0206
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	2f 5f       	subi	r18, 0xFF	; 255
    212c:	3f 4f       	sbci	r19, 0xFF	; 255
    212e:	43 e0       	ldi	r20, 0x03	; 3
    2130:	22 0f       	add	r18, r18
    2132:	33 1f       	adc	r19, r19
    2134:	4a 95       	dec	r20
    2136:	e1 f7       	brne	.-8      	; 0x2130 <Key_event+0x88>
    2138:	48 e0       	ldi	r20, 0x08	; 8
    213a:	be 01       	movw	r22, r28
    213c:	6f 5f       	subi	r22, 0xFF	; 255
    213e:	7f 4f       	sbci	r23, 0xFF	; 255
    2140:	82 1b       	sub	r24, r18
    2142:	93 0b       	sbc	r25, r19
    2144:	0e 94 07 04 	call	0x80e	; 0x80e <seep_read>
        lcd_gotoxy(0,0);
    2148:	60 e0       	ldi	r22, 0x00	; 0
    214a:	80 e0       	ldi	r24, 0x00	; 0
    214c:	0e 94 14 08 	call	0x1028	; 0x1028 <lcd_gotoxy>
        sprintf(lcd_buffer, "\xcc%04d #%03d ", (seep_pointer>>3) - nevent-1, event_buffer[1]);    // №xxxx #xxx
    2150:	80 91 58 02 	lds	r24, 0x0258
    2154:	90 91 59 02 	lds	r25, 0x0259
    2158:	2a 81       	ldd	r18, Y+2	; 0x02
    215a:	1f 92       	push	r1
    215c:	2f 93       	push	r18
    215e:	53 e0       	ldi	r21, 0x03	; 3
    2160:	96 95       	lsr	r25
    2162:	87 95       	ror	r24
    2164:	5a 95       	dec	r21
    2166:	e1 f7       	brne	.-8      	; 0x2160 <Key_event+0xb8>
    2168:	01 97       	sbiw	r24, 0x01	; 1
    216a:	20 91 06 02 	lds	r18, 0x0206
    216e:	82 1b       	sub	r24, r18
    2170:	91 09       	sbc	r25, r1
    2172:	9f 93       	push	r25
    2174:	8f 93       	push	r24
    2176:	8b ec       	ldi	r24, 0xCB	; 203
    2178:	91 e0       	ldi	r25, 0x01	; 1
    217a:	9f 93       	push	r25
    217c:	8f 93       	push	r24
    217e:	85 e4       	ldi	r24, 0x45	; 69
    2180:	92 e0       	ldi	r25, 0x02	; 2
    2182:	9f 93       	push	r25
    2184:	8f 93       	push	r24
    2186:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <sprintf>
        lcd_puts(lcd_buffer);
    218a:	85 e4       	ldi	r24, 0x45	; 69
    218c:	92 e0       	ldi	r25, 0x02	; 2
    218e:	0e 94 46 08 	call	0x108c	; 0x108c <lcd_puts>
        if(event_buffer[0] == CALL)    lcd_puts("\263\303\267.");
    2192:	0f b6       	in	r0, 0x3f	; 63
    2194:	f8 94       	cli
    2196:	de bf       	out	0x3e, r29	; 62
    2198:	0f be       	out	0x3f, r0	; 63
    219a:	cd bf       	out	0x3d, r28	; 61
    219c:	89 81       	ldd	r24, Y+1	; 0x01
    219e:	81 30       	cpi	r24, 0x01	; 1
    21a0:	19 f4       	brne	.+6      	; 0x21a8 <Key_event+0x100>
    21a2:	88 ed       	ldi	r24, 0xD8	; 216
    21a4:	91 e0       	ldi	r25, 0x01	; 1
    21a6:	02 c0       	rjmp	.+4      	; 0x21ac <Key_event+0x104>
        else                           lcd_puts("o\277\274.");
    21a8:	8d ed       	ldi	r24, 0xDD	; 221
    21aa:	91 e0       	ldi	r25, 0x01	; 1
    21ac:	0e 94 46 08 	call	0x108c	; 0x108c <lcd_puts>
        lcd_gotoxy(0,1);
    21b0:	61 e0       	ldi	r22, 0x01	; 1
    21b2:	80 e0       	ldi	r24, 0x00	; 0
    21b4:	0e 94 14 08 	call	0x1028	; 0x1028 <lcd_gotoxy>
        sprintf(lcd_buffer, "%02d.%02d %02d:%02d:%02d  ", event_buffer[4], event_buffer[3], event_buffer[5], event_buffer[6], event_buffer[7]);
    21b8:	88 85       	ldd	r24, Y+8	; 0x08
    21ba:	1f 92       	push	r1
    21bc:	8f 93       	push	r24
    21be:	8f 81       	ldd	r24, Y+7	; 0x07
    21c0:	1f 92       	push	r1
    21c2:	8f 93       	push	r24
    21c4:	8e 81       	ldd	r24, Y+6	; 0x06
    21c6:	1f 92       	push	r1
    21c8:	8f 93       	push	r24
    21ca:	8c 81       	ldd	r24, Y+4	; 0x04
    21cc:	1f 92       	push	r1
    21ce:	8f 93       	push	r24
    21d0:	8d 81       	ldd	r24, Y+5	; 0x05
    21d2:	1f 92       	push	r1
    21d4:	8f 93       	push	r24
    21d6:	82 ee       	ldi	r24, 0xE2	; 226
    21d8:	91 e0       	ldi	r25, 0x01	; 1
    21da:	9f 93       	push	r25
    21dc:	8f 93       	push	r24
    21de:	85 e4       	ldi	r24, 0x45	; 69
    21e0:	92 e0       	ldi	r25, 0x02	; 2
    21e2:	9f 93       	push	r25
    21e4:	8f 93       	push	r24
    21e6:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <sprintf>
        lcd_puts(lcd_buffer);
    21ea:	85 e4       	ldi	r24, 0x45	; 69
    21ec:	92 e0       	ldi	r25, 0x02	; 2
    21ee:	0e 94 46 08 	call	0x108c	; 0x108c <lcd_puts>
        killTimer(MSG_KEY_REPEAT);
    21f2:	82 e0       	ldi	r24, 0x02	; 2
    21f4:	0e 94 39 13 	call	0x2672	; 0x2672 <killTimer>
        sei();
    21f8:	78 94       	sei
    21fa:	0f b6       	in	r0, 0x3f	; 63
    21fc:	f8 94       	cli
    21fe:	de bf       	out	0x3e, r29	; 62
    2200:	0f be       	out	0x3f, r0	; 63
    2202:	cd bf       	out	0x3d, r28	; 61
    }

	return 1;
}
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	28 96       	adiw	r28, 0x08	; 8
    2208:	0f b6       	in	r0, 0x3f	; 63
    220a:	f8 94       	cli
    220c:	de bf       	out	0x3e, r29	; 62
    220e:	0f be       	out	0x3f, r0	; 63
    2210:	cd bf       	out	0x3d, r28	; 61
    2212:	df 91       	pop	r29
    2214:	cf 91       	pop	r28
    2216:	08 95       	ret

00002218 <Key_active>:
	return 1;
}


uint8_t Key_active(msg_par par)
{
    2218:	ff 92       	push	r15
    221a:	0f 93       	push	r16
    221c:	1f 93       	push	r17
    221e:	cf 93       	push	r28
    2220:	df 93       	push	r29
    uint8_t i;

    active_on = 1;
    2222:	91 e0       	ldi	r25, 0x01	; 1
    2224:	90 93 04 02 	sts	0x0204, r25

	switch (par)
    2228:	82 30       	cpi	r24, 0x02	; 2
    222a:	29 f0       	breq	.+10     	; 0x2236 <Key_active+0x1e>
    222c:	85 30       	cpi	r24, 0x05	; 5
    222e:	d9 f0       	breq	.+54     	; 0x2266 <Key_active+0x4e>
    2230:	81 30       	cpi	r24, 0x01	; 1
    2232:	19 f5       	brne	.+70     	; 0x227a <Key_active+0x62>
    2234:	10 c0       	rjmp	.+32     	; 0x2256 <Key_active+0x3e>
	{
        case KEY_DOWN:
        {
            if ( (nevent+8) < (n_active_calls) )
    2236:	40 91 06 02 	lds	r20, 0x0206
    223a:	20 91 02 02 	lds	r18, 0x0202
    223e:	30 91 03 02 	lds	r19, 0x0203
    2242:	84 2f       	mov	r24, r20
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	08 96       	adiw	r24, 0x08	; 8
    2248:	82 17       	cp	r24, r18
    224a:	93 07       	cpc	r25, r19
    224c:	c8 f4       	brcc	.+50     	; 0x2280 <Key_active+0x68>
                nevent += 8;
    224e:	48 5f       	subi	r20, 0xF8	; 248
    2250:	40 93 06 02 	sts	0x0206, r20
    2254:	15 c0       	rjmp	.+42     	; 0x2280 <Key_active+0x68>
            break;
        }

        case KEY_UP:
        {
            if( nevent > 7 )
    2256:	80 91 06 02 	lds	r24, 0x0206
    225a:	88 30       	cpi	r24, 0x08	; 8
    225c:	88 f0       	brcs	.+34     	; 0x2280 <Key_active+0x68>
                nevent -= 8;
    225e:	88 50       	subi	r24, 0x08	; 8
    2260:	80 93 06 02 	sts	0x0206, r24
    2264:	0d c0       	rjmp	.+26     	; 0x2280 <Key_active+0x68>
            break;
        }

        case KEY_OK:
        {
            active_on = 0;
    2266:	10 92 04 02 	sts	0x0204, r1
            killHandler(MSG_KEY_PRESS, &Key_active);
    226a:	6c e0       	ldi	r22, 0x0C	; 12
    226c:	71 e1       	ldi	r23, 0x11	; 17
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <killHandler>
            startMenu();
    2274:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <startMenu>
    2278:	61 c0       	rjmp	.+194    	; 0x233c <Key_active+0x124>
            break;
        }
	}

	if ( (par == KEY_UP) || (par == KEY_DOWN) || (par == 0) )
    227a:	83 30       	cpi	r24, 0x03	; 3
    227c:	08 f0       	brcs	.+2      	; 0x2280 <Key_active+0x68>
    227e:	5e c0       	rjmp	.+188    	; 0x233c <Key_active+0x124>
    {
        lcd_clrscr();
    2280:	0e 94 1f 08 	call	0x103e	; 0x103e <lcd_clrscr>

        if(n_active_calls)
    2284:	80 91 02 02 	lds	r24, 0x0202
    2288:	90 91 03 02 	lds	r25, 0x0203
    228c:	89 2b       	or	r24, r25
    228e:	09 f4       	brne	.+2      	; 0x2292 <Key_active+0x7a>
    2290:	4d c0       	rjmp	.+154    	; 0x232c <Key_active+0x114>
        {

            for ( i=nevent ; (i < (nevent + 8)) && (i < n_active_calls) ; ++i )
    2292:	f0 90 06 02 	lds	r15, 0x0206
            {
                sprintf(lcd_buffer, "%03d ", active_call_id[i]);
    2296:	c2 ed       	ldi	r28, 0xD2	; 210
    2298:	d1 e0       	ldi	r29, 0x01	; 1
    229a:	05 e4       	ldi	r16, 0x45	; 69
    229c:	12 e0       	ldi	r17, 0x02	; 2
        lcd_clrscr();

        if(n_active_calls)
        {

            for ( i=nevent ; (i < (nevent + 8)) && (i < n_active_calls) ; ++i )
    229e:	40 91 06 02 	lds	r20, 0x0206
    22a2:	8f 2d       	mov	r24, r15
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	24 2f       	mov	r18, r20
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	29 5f       	subi	r18, 0xF9	; 249
    22ac:	3f 4f       	sbci	r19, 0xFF	; 255
    22ae:	28 17       	cp	r18, r24
    22b0:	39 07       	cpc	r19, r25
    22b2:	54 f4       	brge	.+20     	; 0x22c8 <Key_active+0xb0>
            {
                sprintf(lcd_buffer, "%03d ", active_call_id[i]);
                lcd_puts(lcd_buffer);
            }
            if(nevent > 1) {
    22b4:	42 30       	cpi	r20, 0x02	; 2
    22b6:	38 f1       	brcs	.+78     	; 0x2306 <Key_active+0xee>
                lcd_gotoxy(15,0);
    22b8:	60 e0       	ldi	r22, 0x00	; 0
    22ba:	8f e0       	ldi	r24, 0x0F	; 15
    22bc:	0e 94 14 08 	call	0x1028	; 0x1028 <lcd_gotoxy>
                lcd_putc(0xd9);
    22c0:	89 ed       	ldi	r24, 0xD9	; 217
    22c2:	0e 94 25 08 	call	0x104a	; 0x104a <lcd_putc>
    22c6:	1f c0       	rjmp	.+62     	; 0x2306 <Key_active+0xee>
        lcd_clrscr();

        if(n_active_calls)
        {

            for ( i=nevent ; (i < (nevent + 8)) && (i < n_active_calls) ; ++i )
    22c8:	20 91 02 02 	lds	r18, 0x0202
    22cc:	30 91 03 02 	lds	r19, 0x0203
    22d0:	82 17       	cp	r24, r18
    22d2:	93 07       	cpc	r25, r19
    22d4:	78 f7       	brcc	.-34     	; 0x22b4 <Key_active+0x9c>
            {
                sprintf(lcd_buffer, "%03d ", active_call_id[i]);
    22d6:	fc 01       	movw	r30, r24
    22d8:	e2 5a       	subi	r30, 0xA2	; 162
    22da:	fd 4f       	sbci	r31, 0xFD	; 253
    22dc:	80 81       	ld	r24, Z
    22de:	1f 92       	push	r1
    22e0:	8f 93       	push	r24
    22e2:	df 93       	push	r29
    22e4:	cf 93       	push	r28
    22e6:	1f 93       	push	r17
    22e8:	0f 93       	push	r16
    22ea:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <sprintf>
                lcd_puts(lcd_buffer);
    22ee:	85 e4       	ldi	r24, 0x45	; 69
    22f0:	92 e0       	ldi	r25, 0x02	; 2
    22f2:	0e 94 46 08 	call	0x108c	; 0x108c <lcd_puts>
        lcd_clrscr();

        if(n_active_calls)
        {

            for ( i=nevent ; (i < (nevent + 8)) && (i < n_active_calls) ; ++i )
    22f6:	f3 94       	inc	r15
    22f8:	0f 90       	pop	r0
    22fa:	0f 90       	pop	r0
    22fc:	0f 90       	pop	r0
    22fe:	0f 90       	pop	r0
    2300:	0f 90       	pop	r0
    2302:	0f 90       	pop	r0
    2304:	cc cf       	rjmp	.-104    	; 0x229e <Key_active+0x86>
            }
            if(nevent > 1) {
                lcd_gotoxy(15,0);
                lcd_putc(0xd9);
            }
            if(n_active_calls > (nevent+8)) {
    2306:	20 91 02 02 	lds	r18, 0x0202
    230a:	30 91 03 02 	lds	r19, 0x0203
    230e:	80 91 06 02 	lds	r24, 0x0206
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	08 96       	adiw	r24, 0x08	; 8
    2316:	82 17       	cp	r24, r18
    2318:	93 07       	cpc	r25, r19
    231a:	80 f4       	brcc	.+32     	; 0x233c <Key_active+0x124>
                lcd_gotoxy(15,1);
    231c:	61 e0       	ldi	r22, 0x01	; 1
    231e:	8f e0       	ldi	r24, 0x0F	; 15
    2320:	0e 94 14 08 	call	0x1028	; 0x1028 <lcd_gotoxy>
                lcd_putc(0xda);
    2324:	8a ed       	ldi	r24, 0xDA	; 218
    2326:	0e 94 25 08 	call	0x104a	; 0x104a <lcd_putc>
    232a:	08 c0       	rjmp	.+16     	; 0x233c <Key_active+0x124>
            }
        }
        else
        {
            lcd_gotoxy(2,1);
    232c:	61 e0       	ldi	r22, 0x01	; 1
    232e:	82 e0       	ldi	r24, 0x02	; 2
    2330:	0e 94 14 08 	call	0x1028	; 0x1028 <lcd_gotoxy>
            lcd_puts("He\277 \263\303\267o\263o\263");
    2334:	82 e3       	ldi	r24, 0x32	; 50
    2336:	91 e0       	ldi	r25, 0x01	; 1
    2338:	0e 94 46 08 	call	0x108c	; 0x108c <lcd_puts>
        }
    }

	return 1;
}
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	df 91       	pop	r29
    2340:	cf 91       	pop	r28
    2342:	1f 91       	pop	r17
    2344:	0f 91       	pop	r16
    2346:	ff 90       	pop	r15
    2348:	08 95       	ret

0000234a <Key_id>:
}


uint8_t Key_id(msg_par par)
{
	if( par == KEY_OK )
    234a:	85 30       	cpi	r24, 0x05	; 5
    234c:	59 f4       	brne	.+22     	; 0x2364 <Key_id+0x1a>
	{
        rfm12_channel(channel);
    234e:	80 91 5c 02 	lds	r24, 0x025C
    2352:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <rfm12_channel>
        killHandler(MSG_KEY_PRESS, &Key_ok);
    2356:	60 ec       	ldi	r22, 0xC0	; 192
    2358:	7f e0       	ldi	r23, 0x0F	; 15
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <killHandler>
        startMenu();
    2360:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <startMenu>
	}
	return 1;
}
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	08 95       	ret

00002368 <setHandler>:
volatile uint16_t lMesPointer, hMesPointer; // указатели на начало и конец буфера

// установка обработчика события
// вызывается: setHandler(MSG_KEY_PRESS, &checkKey);
void setHandler(msg_num msg, handler hnd) {
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2368:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    236a:	f8 94       	cli
		if (numHandlers < maxHandlers) {
    236c:	20 91 98 02 	lds	r18, 0x0298
    2370:	20 31       	cpi	r18, 0x10	; 16
    2372:	e0 f4       	brcc	.+56     	; 0x23ac <setHandler+0x44>
			lHandler[numHandlers].hnd = hnd; // и регистрирем обработчик
    2374:	20 91 98 02 	lds	r18, 0x0298
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	f9 01       	movw	r30, r18
    237c:	ee 0f       	add	r30, r30
    237e:	ff 1f       	adc	r31, r31
    2380:	e2 0f       	add	r30, r18
    2382:	f3 1f       	adc	r31, r19
    2384:	e7 56       	subi	r30, 0x67	; 103
    2386:	fd 4f       	sbci	r31, 0xFD	; 253
    2388:	72 83       	std	Z+2, r23	; 0x02
    238a:	61 83       	std	Z+1, r22	; 0x01
			lHandler[numHandlers].msg = msg;
    238c:	20 91 98 02 	lds	r18, 0x0298
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	f9 01       	movw	r30, r18
    2394:	ee 0f       	add	r30, r30
    2396:	ff 1f       	adc	r31, r31
    2398:	e2 0f       	add	r30, r18
    239a:	f3 1f       	adc	r31, r19
    239c:	e7 56       	subi	r30, 0x67	; 103
    239e:	fd 4f       	sbci	r31, 0xFD	; 253
    23a0:	80 83       	st	Z, r24
			numHandlers++;
    23a2:	80 91 98 02 	lds	r24, 0x0298
    23a6:	8f 5f       	subi	r24, 0xFF	; 255
    23a8:	80 93 98 02 	sts	0x0298, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    23ac:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    23ae:	08 95       	ret

000023b0 <killHandler>:

// снятие обработчика события
// вызывается: killHandler(MSG_KEY_PRESS, &checkKey);
// удаляет один последний обработчик.
void killHandler(msg_num msg, handler hnd) {
	if (numHandlers==0)
    23b0:	90 91 98 02 	lds	r25, 0x0298
    23b4:	99 23       	and	r25, r25
    23b6:	09 f4       	brne	.+2      	; 0x23ba <killHandler+0xa>
    23b8:	47 c0       	rjmp	.+142    	; 0x2448 <killHandler+0x98>
		return;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    23ba:	5f b7       	in	r21, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    23bc:	f8 94       	cli
		int8_t i, j;
		j = 0;
		for (i = numHandlers-1; i >= 0; i--) {
    23be:	40 91 98 02 	lds	r20, 0x0298
    23c2:	41 50       	subi	r20, 0x01	; 1
    23c4:	47 fd       	sbrc	r20, 7
    23c6:	3f c0       	rjmp	.+126    	; 0x2446 <killHandler+0x96>

			if ((lHandler[i].msg == msg) && (lHandler[i].hnd == hnd)) {
    23c8:	24 2f       	mov	r18, r20
    23ca:	33 27       	eor	r19, r19
    23cc:	27 fd       	sbrc	r18, 7
    23ce:	30 95       	com	r19
    23d0:	f9 01       	movw	r30, r18
    23d2:	ee 0f       	add	r30, r30
    23d4:	ff 1f       	adc	r31, r31
    23d6:	e2 0f       	add	r30, r18
    23d8:	f3 1f       	adc	r31, r19
    23da:	e7 56       	subi	r30, 0x67	; 103
    23dc:	fd 4f       	sbci	r31, 0xFD	; 253
    23de:	90 81       	ld	r25, Z
    23e0:	98 13       	cpse	r25, r24
    23e2:	ef cf       	rjmp	.-34     	; 0x23c2 <killHandler+0x12>
    23e4:	21 81       	ldd	r18, Z+1	; 0x01
    23e6:	32 81       	ldd	r19, Z+2	; 0x02
    23e8:	26 17       	cp	r18, r22
    23ea:	37 07       	cpc	r19, r23
    23ec:	51 f7       	brne	.-44     	; 0x23c2 <killHandler+0x12>

				// сдвигаем все записи к началу списка, чтобы дырок не было
				for (j = i; j < numHandlers-1 ; j++) {
    23ee:	84 2f       	mov	r24, r20
    23f0:	99 27       	eor	r25, r25
    23f2:	87 fd       	sbrc	r24, 7
    23f4:	90 95       	com	r25
    23f6:	20 91 98 02 	lds	r18, 0x0298
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	21 50       	subi	r18, 0x01	; 1
    23fe:	31 09       	sbc	r19, r1
    2400:	82 17       	cp	r24, r18
    2402:	93 07       	cpc	r25, r19
    2404:	dc f4       	brge	.+54     	; 0x243c <killHandler+0x8c>
					lHandler[j].msg = lHandler[j + 1].msg;
    2406:	9c 01       	movw	r18, r24
    2408:	2f 5f       	subi	r18, 0xFF	; 255
    240a:	3f 4f       	sbci	r19, 0xFF	; 255
    240c:	d9 01       	movw	r26, r18
    240e:	aa 0f       	add	r26, r26
    2410:	bb 1f       	adc	r27, r27
    2412:	a2 0f       	add	r26, r18
    2414:	b3 1f       	adc	r27, r19
    2416:	a7 56       	subi	r26, 0x67	; 103
    2418:	bd 4f       	sbci	r27, 0xFD	; 253
    241a:	2c 91       	ld	r18, X
    241c:	fc 01       	movw	r30, r24
    241e:	ee 0f       	add	r30, r30
    2420:	ff 1f       	adc	r31, r31
    2422:	e8 0f       	add	r30, r24
    2424:	f9 1f       	adc	r31, r25
    2426:	e7 56       	subi	r30, 0x67	; 103
    2428:	fd 4f       	sbci	r31, 0xFD	; 253
    242a:	20 83       	st	Z, r18
					lHandler[j].hnd = lHandler[j + 1].hnd;
    242c:	11 96       	adiw	r26, 0x01	; 1
    242e:	8d 91       	ld	r24, X+
    2430:	9c 91       	ld	r25, X
    2432:	12 97       	sbiw	r26, 0x02	; 2
    2434:	92 83       	std	Z+2, r25	; 0x02
    2436:	81 83       	std	Z+1, r24	; 0x01
    2438:	4f 5f       	subi	r20, 0xFF	; 255
    243a:	d9 cf       	rjmp	.-78     	; 0x23ee <killHandler+0x3e>
				}
				numHandlers--;
    243c:	80 91 98 02 	lds	r24, 0x0298
    2440:	81 50       	subi	r24, 0x01	; 1
    2442:	80 93 98 02 	sts	0x0298, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2446:	5f bf       	out	0x3f, r21	; 63
    __asm__ volatile ("" ::: "memory");
    2448:	08 95       	ret

0000244a <killHandlersNum>:
	}
}


void killHandlersNum(msg_num msg) {
	if (numHandlers==0)
    244a:	90 91 98 02 	lds	r25, 0x0298
    244e:	99 23       	and	r25, r25
    2450:	09 f4       	brne	.+2      	; 0x2454 <killHandlersNum+0xa>
    2452:	44 c0       	rjmp	.+136    	; 0x24dc <killHandlersNum+0x92>
		return;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2454:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2456:	f8 94       	cli
		int8_t i, j;
		j = 0;
		for (i = numHandlers-1; i >= 0; i--) {
    2458:	90 91 98 02 	lds	r25, 0x0298
    245c:	91 50       	subi	r25, 0x01	; 1
    245e:	97 fd       	sbrc	r25, 7
    2460:	3c c0       	rjmp	.+120    	; 0x24da <killHandlersNum+0x90>

			if (lHandler[i].msg == msg) {
    2462:	29 2f       	mov	r18, r25
    2464:	33 27       	eor	r19, r19
    2466:	27 fd       	sbrc	r18, 7
    2468:	30 95       	com	r19
    246a:	f9 01       	movw	r30, r18
    246c:	ee 0f       	add	r30, r30
    246e:	ff 1f       	adc	r31, r31
    2470:	e2 0f       	add	r30, r18
    2472:	f3 1f       	adc	r31, r19
    2474:	e7 56       	subi	r30, 0x67	; 103
    2476:	fd 4f       	sbci	r31, 0xFD	; 253
    2478:	20 81       	ld	r18, Z
    247a:	28 13       	cpse	r18, r24
    247c:	ef cf       	rjmp	.-34     	; 0x245c <killHandlersNum+0x12>
    247e:	69 2f       	mov	r22, r25

				// сдвигаем все записи к началу списка, чтобы дырок не было
				for (j = i; j < numHandlers-1 ; j++) {
    2480:	26 2f       	mov	r18, r22
    2482:	33 27       	eor	r19, r19
    2484:	27 fd       	sbrc	r18, 7
    2486:	30 95       	com	r19
    2488:	40 91 98 02 	lds	r20, 0x0298
    248c:	50 e0       	ldi	r21, 0x00	; 0
    248e:	41 50       	subi	r20, 0x01	; 1
    2490:	51 09       	sbc	r21, r1
    2492:	24 17       	cp	r18, r20
    2494:	35 07       	cpc	r19, r21
    2496:	dc f4       	brge	.+54     	; 0x24ce <killHandlersNum+0x84>
					lHandler[j].msg = lHandler[j + 1].msg;
    2498:	a9 01       	movw	r20, r18
    249a:	4f 5f       	subi	r20, 0xFF	; 255
    249c:	5f 4f       	sbci	r21, 0xFF	; 255
    249e:	da 01       	movw	r26, r20
    24a0:	aa 0f       	add	r26, r26
    24a2:	bb 1f       	adc	r27, r27
    24a4:	a4 0f       	add	r26, r20
    24a6:	b5 1f       	adc	r27, r21
    24a8:	a7 56       	subi	r26, 0x67	; 103
    24aa:	bd 4f       	sbci	r27, 0xFD	; 253
    24ac:	4c 91       	ld	r20, X
    24ae:	f9 01       	movw	r30, r18
    24b0:	ee 0f       	add	r30, r30
    24b2:	ff 1f       	adc	r31, r31
    24b4:	e2 0f       	add	r30, r18
    24b6:	f3 1f       	adc	r31, r19
    24b8:	e7 56       	subi	r30, 0x67	; 103
    24ba:	fd 4f       	sbci	r31, 0xFD	; 253
    24bc:	40 83       	st	Z, r20
					lHandler[j].hnd = lHandler[j + 1].hnd;
    24be:	11 96       	adiw	r26, 0x01	; 1
    24c0:	2d 91       	ld	r18, X+
    24c2:	3c 91       	ld	r19, X
    24c4:	12 97       	sbiw	r26, 0x02	; 2
    24c6:	32 83       	std	Z+2, r19	; 0x02
    24c8:	21 83       	std	Z+1, r18	; 0x01
    24ca:	6f 5f       	subi	r22, 0xFF	; 255
    24cc:	d9 cf       	rjmp	.-78     	; 0x2480 <killHandlersNum+0x36>
				}
				numHandlers--;
    24ce:	20 91 98 02 	lds	r18, 0x0298
    24d2:	21 50       	subi	r18, 0x01	; 1
    24d4:	20 93 98 02 	sts	0x0298, r18
    24d8:	c1 cf       	rjmp	.-126    	; 0x245c <killHandlersNum+0x12>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    24da:	7f bf       	out	0x3f, r23	; 63
    __asm__ volatile ("" ::: "memory");
    24dc:	08 95       	ret

000024de <sendMessage>:

// занести событие в очередь
// пример вызова: sendMessage(MSG_KEY_PRESS, KEY_MENU)
void sendMessage(msg_num msg, msg_par par) {

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    24de:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    24e0:	f8 94       	cli
		hMesPointer = (hMesPointer + 1) & (maxMessages - 1); // сдвигаем указатель головы
    24e2:	20 91 94 02 	lds	r18, 0x0294
    24e6:	30 91 95 02 	lds	r19, 0x0295
    24ea:	2f 5f       	subi	r18, 0xFF	; 255
    24ec:	3f 4f       	sbci	r19, 0xFF	; 255
    24ee:	2f 70       	andi	r18, 0x0F	; 15
    24f0:	33 27       	eor	r19, r19
    24f2:	30 93 95 02 	sts	0x0295, r19
    24f6:	20 93 94 02 	sts	0x0294, r18

		lMessage[hMesPointer].msg = msg; // заносим событие и параметр
    24fa:	e0 91 94 02 	lds	r30, 0x0294
    24fe:	f0 91 95 02 	lds	r31, 0x0295
    2502:	ee 0f       	add	r30, r30
    2504:	ff 1f       	adc	r31, r31
    2506:	e6 50       	subi	r30, 0x06	; 6
    2508:	fd 4f       	sbci	r31, 0xFD	; 253
    250a:	80 83       	st	Z, r24
		lMessage[hMesPointer].par = par;
    250c:	e0 91 94 02 	lds	r30, 0x0294
    2510:	f0 91 95 02 	lds	r31, 0x0295
    2514:	ee 0f       	add	r30, r30
    2516:	ff 1f       	adc	r31, r31
    2518:	e6 50       	subi	r30, 0x06	; 6
    251a:	fd 4f       	sbci	r31, 0xFD	; 253
    251c:	61 83       	std	Z+1, r22	; 0x01
		if (hMesPointer == lMesPointer) { // догнали начало очереди, убиваем необработанное сообытие
    251e:	20 91 94 02 	lds	r18, 0x0294
    2522:	30 91 95 02 	lds	r19, 0x0295
    2526:	80 91 96 02 	lds	r24, 0x0296
    252a:	90 91 97 02 	lds	r25, 0x0297
    252e:	28 17       	cp	r18, r24
    2530:	39 07       	cpc	r19, r25
    2532:	11 f0       	breq	.+4      	; 0x2538 <sendMessage+0x5a>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2534:	4f bf       	out	0x3f, r20	; 63
    __asm__ volatile ("" ::: "memory");
    2536:	08 95       	ret
			lMesPointer = (lMesPointer + 1) & (maxMessages - 1);
    2538:	80 91 96 02 	lds	r24, 0x0296
    253c:	90 91 97 02 	lds	r25, 0x0297
    2540:	01 96       	adiw	r24, 0x01	; 1
    2542:	8f 70       	andi	r24, 0x0F	; 15
    2544:	99 27       	eor	r25, r25
    2546:	90 93 97 02 	sts	0x0297, r25
    254a:	80 93 96 02 	sts	0x0296, r24
    254e:	f2 cf       	rjmp	.-28     	; 0x2534 <sendMessage+0x56>

00002550 <dispatchMessage>:
	}
}
;

// обработка событий
void dispatchMessage(void) {
    2550:	1f 93       	push	r17
    2552:	cf 93       	push	r28
    2554:	df 93       	push	r29
	int8_t i;
	uint8_t res;
	msg_num msg;
	msg_par par;

	if (hMesPointer == lMesPointer) { // если пустая очередь - возврат
    2556:	20 91 94 02 	lds	r18, 0x0294
    255a:	30 91 95 02 	lds	r19, 0x0295
    255e:	80 91 96 02 	lds	r24, 0x0296
    2562:	90 91 97 02 	lds	r25, 0x0297
    2566:	28 17       	cp	r18, r24
    2568:	39 07       	cpc	r19, r25
    256a:	09 f4       	brne	.+2      	; 0x256e <dispatchMessage+0x1e>
    256c:	40 c0       	rjmp	.+128    	; 0x25ee <dispatchMessage+0x9e>
		return;
	}

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    256e:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2570:	f8 94       	cli
		lMesPointer = (lMesPointer + 1) & (maxMessages - 1); // сдвинем указатель
    2572:	80 91 96 02 	lds	r24, 0x0296
    2576:	90 91 97 02 	lds	r25, 0x0297
    257a:	01 96       	adiw	r24, 0x01	; 1
    257c:	8f 70       	andi	r24, 0x0F	; 15
    257e:	99 27       	eor	r25, r25
    2580:	90 93 97 02 	sts	0x0297, r25
    2584:	80 93 96 02 	sts	0x0296, r24

		msg = lMessage[lMesPointer].msg;
    2588:	e0 91 96 02 	lds	r30, 0x0296
    258c:	f0 91 97 02 	lds	r31, 0x0297
    2590:	ee 0f       	add	r30, r30
    2592:	ff 1f       	adc	r31, r31
    2594:	e6 50       	subi	r30, 0x06	; 6
    2596:	fd 4f       	sbci	r31, 0xFD	; 253
    2598:	d0 81       	ld	r29, Z
		par = lMessage[lMesPointer].par;
    259a:	e0 91 96 02 	lds	r30, 0x0296
    259e:	f0 91 97 02 	lds	r31, 0x0297
    25a2:	ee 0f       	add	r30, r30
    25a4:	ff 1f       	adc	r31, r31
    25a6:	e6 50       	subi	r30, 0x06	; 6
    25a8:	fd 4f       	sbci	r31, 0xFD	; 253
    25aa:	11 81       	ldd	r17, Z+1	; 0x01
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    25ac:	2f bf       	out	0x3f, r18	; 63
	}

	if (msg != 0 && numHandlers > 0) {
    25ae:	dd 23       	and	r29, r29
    25b0:	f1 f0       	breq	.+60     	; 0x25ee <dispatchMessage+0x9e>
    25b2:	80 91 98 02 	lds	r24, 0x0298
    25b6:	88 23       	and	r24, r24
    25b8:	d1 f0       	breq	.+52     	; 0x25ee <dispatchMessage+0x9e>
		for (i = numHandlers - 1; i >= 0; i--) { // просматриваем обработчики с конца
    25ba:	c0 91 98 02 	lds	r28, 0x0298
    25be:	c1 50       	subi	r28, 0x01	; 1
    25c0:	c7 fd       	sbrc	r28, 7
    25c2:	15 c0       	rjmp	.+42     	; 0x25ee <dispatchMessage+0x9e>
			if (lHandler[i].msg == msg) { // последний занесенный имеет приоритет
    25c4:	2c 2f       	mov	r18, r28
    25c6:	33 27       	eor	r19, r19
    25c8:	27 fd       	sbrc	r18, 7
    25ca:	30 95       	com	r19
    25cc:	f9 01       	movw	r30, r18
    25ce:	ee 0f       	add	r30, r30
    25d0:	ff 1f       	adc	r31, r31
    25d2:	e2 0f       	add	r30, r18
    25d4:	f3 1f       	adc	r31, r19
    25d6:	e7 56       	subi	r30, 0x67	; 103
    25d8:	fd 4f       	sbci	r31, 0xFD	; 253
    25da:	80 81       	ld	r24, Z
    25dc:	8d 13       	cpse	r24, r29
    25de:	ef cf       	rjmp	.-34     	; 0x25be <dispatchMessage+0x6e>
				res = lHandler[i].hnd(par); // вызываем обработчик
    25e0:	01 80       	ldd	r0, Z+1	; 0x01
    25e2:	f2 81       	ldd	r31, Z+2	; 0x02
    25e4:	e0 2d       	mov	r30, r0
    25e6:	81 2f       	mov	r24, r17
    25e8:	09 95       	icall
				if (res) { // если обработчик вернул 1, перываем обработку события
    25ea:	88 23       	and	r24, r24
    25ec:	41 f3       	breq	.-48     	; 0x25be <dispatchMessage+0x6e>
					break;
				}
			}
		}
	}
}
    25ee:	df 91       	pop	r29
    25f0:	cf 91       	pop	r28
    25f2:	1f 91       	pop	r17
    25f4:	08 95       	ret

000025f6 <setTimer>:

// установить таймер
// пример вызова: setTimer(MSG_LCD_REFRESH, 0, 50);
void setTimer(msg_num msg, msg_par par, uint16_t time) {
	uint8_t i, firstFree;
	if (time == 0) {
    25f6:	41 15       	cp	r20, r1
    25f8:	51 05       	cpc	r21, r1
    25fa:	11 f4       	brne	.+4      	; 0x2600 <setTimer+0xa>
		sendMessage(msg, par);
    25fc:	0c 94 6f 12 	jmp	0x24de	; 0x24de <sendMessage>
	} else {

		ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2600:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2602:	f8 94       	cli
			firstFree = numTimers + 1;

			for (i = 0; i <= numTimers; i++) { // ищем установленный таймер
				if (lTimer[i].msg == 0) {
    2604:	26 e0       	ldi	r18, 0x06	; 6
	if (time == 0) {
		sendMessage(msg, par);
	} else {

		ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
			firstFree = numTimers + 1;
    2606:	90 91 f9 02 	lds	r25, 0x02F9
    260a:	9f 5f       	subi	r25, 0xFF	; 255

			for (i = 0; i <= numTimers; i++) { // ищем установленный таймер
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	e0 91 f9 02 	lds	r30, 0x02F9
    2612:	e3 17       	cp	r30, r19
    2614:	a0 f0       	brcs	.+40     	; 0x263e <setTimer+0x48>
				if (lTimer[i].msg == 0) {
    2616:	23 9f       	mul	r18, r19
    2618:	f0 01       	movw	r30, r0
    261a:	11 24       	eor	r1, r1
    261c:	e7 53       	subi	r30, 0x37	; 55
    261e:	fd 4f       	sbci	r31, 0xFD	; 253
    2620:	a0 81       	ld	r26, Z
    2622:	aa 23       	and	r26, r26
    2624:	49 f0       	breq	.+18     	; 0x2638 <setTimer+0x42>
					firstFree = i;
				} else { // если нашли - обновляем время
					//if ((lTimer[i].msg == msg) && (lTimer[i].par == par)) {
					if (lTimer[i].msg == msg) {
    2626:	a0 81       	ld	r26, Z
    2628:	a8 13       	cpse	r26, r24
    262a:	07 c0       	rjmp	.+14     	; 0x263a <setTimer+0x44>
						lTimer[i].time = time;
    262c:	53 83       	std	Z+3, r21	; 0x03
    262e:	42 83       	std	Z+2, r20	; 0x02
						lTimer[i].timeOrigin = time;
    2630:	55 83       	std	Z+5, r21	; 0x05
    2632:	44 83       	std	Z+4, r20	; 0x04
						lTimer[i].par = par;
    2634:	61 83       	std	Z+1, r22	; 0x01
    2636:	1b c0       	rjmp	.+54     	; 0x266e <setTimer+0x78>
    2638:	93 2f       	mov	r25, r19
	} else {

		ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
			firstFree = numTimers + 1;

			for (i = 0; i <= numTimers; i++) { // ищем установленный таймер
    263a:	3f 5f       	subi	r19, 0xFF	; 255
    263c:	e8 cf       	rjmp	.-48     	; 0x260e <setTimer+0x18>
						firstFree = maxTimers + 1;
						break;
					}
				}
			}
			if (firstFree <= maxTimers) { // иначе - просто добавляем новый
    263e:	99 30       	cpi	r25, 0x09	; 9
    2640:	b0 f4       	brcc	.+44     	; 0x266e <setTimer+0x78>
				lTimer[firstFree].msg = msg;
    2642:	29 9f       	mul	r18, r25
    2644:	90 01       	movw	r18, r0
    2646:	11 24       	eor	r1, r1
    2648:	27 53       	subi	r18, 0x37	; 55
    264a:	3d 4f       	sbci	r19, 0xFD	; 253
    264c:	f9 01       	movw	r30, r18
    264e:	81 93       	st	Z+, r24
				lTimer[firstFree].par = par;
    2650:	60 83       	st	Z, r22
				lTimer[firstFree].time = time;
    2652:	f9 01       	movw	r30, r18
    2654:	32 96       	adiw	r30, 0x02	; 2
    2656:	51 83       	std	Z+1, r21	; 0x01
    2658:	40 83       	st	Z, r20
				lTimer[firstFree].timeOrigin = time;
    265a:	f9 01       	movw	r30, r18
    265c:	34 96       	adiw	r30, 0x04	; 4
    265e:	51 83       	std	Z+1, r21	; 0x01
    2660:	40 83       	st	Z, r20

				if (firstFree > numTimers)
    2662:	80 91 f9 02 	lds	r24, 0x02F9
    2666:	89 17       	cp	r24, r25
    2668:	10 f4       	brcc	.+4      	; 0x266e <setTimer+0x78>
					numTimers = firstFree;
    266a:	90 93 f9 02 	sts	0x02F9, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    266e:	7f bf       	out	0x3f, r23	; 63
    __asm__ volatile ("" ::: "memory");
    2670:	08 95       	ret

00002672 <killTimer>:
// убить таймер
// особенность - убивает все установленные таймеры на данное событие,
// не зависимо от параметра события
void killTimer(msg_num msg) {
	uint8_t i;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2672:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2674:	f8 94       	cli
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	30 e0       	ldi	r19, 0x00	; 0
		for (i = 0; i < maxTimers; i++) {
			if (lTimer[i].msg == msg) {
    267a:	46 e0       	ldi	r20, 0x06	; 6
    267c:	42 9f       	mul	r20, r18
    267e:	f0 01       	movw	r30, r0
    2680:	43 9f       	mul	r20, r19
    2682:	f0 0d       	add	r31, r0
    2684:	11 24       	eor	r1, r1
    2686:	e7 53       	subi	r30, 0x37	; 55
    2688:	fd 4f       	sbci	r31, 0xFD	; 253
    268a:	50 81       	ld	r21, Z
    268c:	58 13       	cpse	r21, r24
    268e:	01 c0       	rjmp	.+2      	; 0x2692 <killTimer+0x20>
				lTimer[i].msg = 0;
    2690:	10 82       	st	Z, r1
    2692:	2f 5f       	subi	r18, 0xFF	; 255
    2694:	3f 4f       	sbci	r19, 0xFF	; 255
// особенность - убивает все установленные таймеры на данное событие,
// не зависимо от параметра события
void killTimer(msg_num msg) {
	uint8_t i;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		for (i = 0; i < maxTimers; i++) {
    2696:	28 30       	cpi	r18, 0x08	; 8
    2698:	31 05       	cpc	r19, r1
    269a:	81 f7       	brne	.-32     	; 0x267c <killTimer+0xa>
			if (lTimer[i].msg == msg) {
				lTimer[i].msg = 0;
			}
		}
		while ((lTimer[numTimers].msg == 0) && (numTimers > 0))
    269c:	26 e0       	ldi	r18, 0x06	; 6
    269e:	e0 91 f9 02 	lds	r30, 0x02F9
    26a2:	2e 9f       	mul	r18, r30
    26a4:	f0 01       	movw	r30, r0
    26a6:	11 24       	eor	r1, r1
    26a8:	e7 53       	subi	r30, 0x37	; 55
    26aa:	fd 4f       	sbci	r31, 0xFD	; 253
    26ac:	80 81       	ld	r24, Z
    26ae:	81 11       	cpse	r24, r1
    26b0:	0a c0       	rjmp	.+20     	; 0x26c6 <killTimer+0x54>
    26b2:	80 91 f9 02 	lds	r24, 0x02F9
    26b6:	88 23       	and	r24, r24
    26b8:	31 f0       	breq	.+12     	; 0x26c6 <killTimer+0x54>
			numTimers--;
    26ba:	80 91 f9 02 	lds	r24, 0x02F9
    26be:	81 50       	subi	r24, 0x01	; 1
    26c0:	80 93 f9 02 	sts	0x02F9, r24
    26c4:	ec cf       	rjmp	.-40     	; 0x269e <killTimer+0x2c>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    26c6:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    26c8:	08 95       	ret

000026ca <dispatchTimer>:
	}
}

// диспетчер таймеров

void dispatchTimer(void) {
    26ca:	0f 93       	push	r16
    26cc:	1f 93       	push	r17
    26ce:	cf 93       	push	r28
    26d0:	df 93       	push	r29
	uint8_t i;

	for (i = 0; i <= numTimers; i++) {
    26d2:	10 e0       	ldi	r17, 0x00	; 0
		if (lTimer[i].msg == 0)
    26d4:	06 e0       	ldi	r16, 0x06	; 6
// диспетчер таймеров

void dispatchTimer(void) {
	uint8_t i;

	for (i = 0; i <= numTimers; i++) {
    26d6:	80 91 f9 02 	lds	r24, 0x02F9
    26da:	81 17       	cp	r24, r17
    26dc:	d0 f0       	brcs	.+52     	; 0x2712 <dispatchTimer+0x48>
		if (lTimer[i].msg == 0)
    26de:	01 9f       	mul	r16, r17
    26e0:	e0 01       	movw	r28, r0
    26e2:	11 24       	eor	r1, r1
    26e4:	c7 53       	subi	r28, 0x37	; 55
    26e6:	dd 4f       	sbci	r29, 0xFD	; 253
    26e8:	88 81       	ld	r24, Y
    26ea:	88 23       	and	r24, r24
    26ec:	81 f0       	breq	.+32     	; 0x270e <dispatchTimer+0x44>
			continue;

		if (lTimer[i].time > 0) { // если не пришло время
    26ee:	8a 81       	ldd	r24, Y+2	; 0x02
    26f0:	9b 81       	ldd	r25, Y+3	; 0x03
    26f2:	89 2b       	or	r24, r25
    26f4:	21 f0       	breq	.+8      	; 0x26fe <dispatchTimer+0x34>
			lTimer[i].time--; // просто уменьшаем время
    26f6:	8a 81       	ldd	r24, Y+2	; 0x02
    26f8:	9b 81       	ldd	r25, Y+3	; 0x03
    26fa:	01 97       	sbiw	r24, 0x01	; 1
    26fc:	06 c0       	rjmp	.+12     	; 0x270a <dispatchTimer+0x40>
		} else {
			sendMessage(lTimer[i].msg, lTimer[i].par); // создаем событие
    26fe:	69 81       	ldd	r22, Y+1	; 0x01
    2700:	88 81       	ld	r24, Y
    2702:	0e 94 6f 12 	call	0x24de	; 0x24de <sendMessage>
			lTimer[i].time = lTimer[i].timeOrigin;
    2706:	8c 81       	ldd	r24, Y+4	; 0x04
    2708:	9d 81       	ldd	r25, Y+5	; 0x05
    270a:	9b 83       	std	Y+3, r25	; 0x03
    270c:	8a 83       	std	Y+2, r24	; 0x02
// диспетчер таймеров

void dispatchTimer(void) {
	uint8_t i;

	for (i = 0; i <= numTimers; i++) {
    270e:	1f 5f       	subi	r17, 0xFF	; 255
    2710:	e2 cf       	rjmp	.-60     	; 0x26d6 <dispatchTimer+0xc>
		} else {
			sendMessage(lTimer[i].msg, lTimer[i].par); // создаем событие
			lTimer[i].time = lTimer[i].timeOrigin;
		}
	}
}
    2712:	df 91       	pop	r29
    2714:	cf 91       	pop	r28
    2716:	1f 91       	pop	r17
    2718:	0f 91       	pop	r16
    271a:	08 95       	ret

0000271c <initMessages>:

void initMessages() {
	numHandlers = 0;
    271c:	10 92 98 02 	sts	0x0298, r1
	numTimers = 0;
    2720:	10 92 f9 02 	sts	0x02F9, r1
	lMesPointer = 0;
    2724:	10 92 97 02 	sts	0x0297, r1
    2728:	10 92 96 02 	sts	0x0296, r1
	hMesPointer = 0;
    272c:	10 92 95 02 	sts	0x0295, r1
    2730:	10 92 94 02 	sts	0x0294, r1

	// главный таймер
	TCCR2 = _BV(WGM21) | _BV(CS22) | _BV(CS20);     // делитель 128
    2734:	8d e0       	ldi	r24, 0x0D	; 13
    2736:	85 bd       	out	0x25, r24	; 37
	OCR2 = F_CPU / 204800; // период 600 мксек, вычисляется как 128/x
    2738:	8e e4       	ldi	r24, 0x4E	; 78
    273a:	83 bd       	out	0x23, r24	; 35
	TIMSK |= _BV(OCIE2);
    273c:	89 b7       	in	r24, 0x39	; 57
    273e:	80 68       	ori	r24, 0x80	; 128
    2740:	89 bf       	out	0x39, r24	; 57
    2742:	08 95       	ret

00002744 <__vector_4>:
    2744:	1f 92       	push	r1
    2746:	0f 92       	push	r0
    2748:	0f b6       	in	r0, 0x3f	; 63
    274a:	0f 92       	push	r0
    274c:	11 24       	eor	r1, r1
    274e:	2f 93       	push	r18
    2750:	3f 93       	push	r19
    2752:	4f 93       	push	r20
    2754:	5f 93       	push	r21
    2756:	6f 93       	push	r22
    2758:	7f 93       	push	r23
    275a:	8f 93       	push	r24
    275c:	9f 93       	push	r25
    275e:	af 93       	push	r26
    2760:	bf 93       	push	r27
    2762:	ef 93       	push	r30
    2764:	ff 93       	push	r31
    2766:	0e 94 65 13 	call	0x26ca	; 0x26ca <dispatchTimer>
    276a:	ff 91       	pop	r31
    276c:	ef 91       	pop	r30
    276e:	bf 91       	pop	r27
    2770:	af 91       	pop	r26
    2772:	9f 91       	pop	r25
    2774:	8f 91       	pop	r24
    2776:	7f 91       	pop	r23
    2778:	6f 91       	pop	r22
    277a:	5f 91       	pop	r21
    277c:	4f 91       	pop	r20
    277e:	3f 91       	pop	r19
    2780:	2f 91       	pop	r18
    2782:	0f 90       	pop	r0
    2784:	0f be       	out	0x3f, r0	; 63
    2786:	0f 90       	pop	r0
    2788:	1f 90       	pop	r1
    278a:	18 95       	reti

0000278c <main>:
    278c:	cf 93       	push	r28
    278e:	df 93       	push	r29
    2790:	cd b7       	in	r28, 0x3d	; 61
    2792:	de b7       	in	r29, 0x3e	; 62
    2794:	29 97       	sbiw	r28, 0x09	; 9
    2796:	0f b6       	in	r0, 0x3f	; 63
    2798:	f8 94       	cli
    279a:	de bf       	out	0x3e, r29	; 62
    279c:	0f be       	out	0x3f, r0	; 63
    279e:	cd bf       	out	0x3d, r28	; 61
    27a0:	80 e7       	ldi	r24, 0x70	; 112
    27a2:	97 e1       	ldi	r25, 0x17	; 23
    27a4:	20 e9       	ldi	r18, 0x90	; 144
    27a6:	31 e0       	ldi	r19, 0x01	; 1
    27a8:	f9 01       	movw	r30, r18
    27aa:	31 97       	sbiw	r30, 0x01	; 1
    27ac:	f1 f7       	brne	.-4      	; 0x27aa <main+0x1e>
    27ae:	01 97       	sbiw	r24, 0x01	; 1
    27b0:	00 97       	sbiw	r24, 0x00	; 0
    27b2:	d1 f7       	brne	.-12     	; 0x27a8 <main+0x1c>
    27b4:	89 e0       	ldi	r24, 0x09	; 9
    27b6:	e7 e6       	ldi	r30, 0x67	; 103
    27b8:	f0 e0       	ldi	r31, 0x00	; 0
    27ba:	de 01       	movw	r26, r28
    27bc:	11 96       	adiw	r26, 0x01	; 1
    27be:	01 90       	ld	r0, Z+
    27c0:	0d 92       	st	X+, r0
    27c2:	8a 95       	dec	r24
    27c4:	e1 f7       	brne	.-8      	; 0x27be <main+0x32>
    27c6:	8c e0       	ldi	r24, 0x0C	; 12
    27c8:	0e 94 74 08 	call	0x10e8	; 0x10e8 <lcd_init>
    27cc:	69 e0       	ldi	r22, 0x09	; 9
    27ce:	ce 01       	movw	r24, r28
    27d0:	01 96       	adiw	r24, 0x01	; 1
    27d2:	0e 94 bf 05 	call	0xb7e	; 0xb7e <ds_init>
    27d6:	0e 94 df 03 	call	0x7be	; 0x7be <seep_init>
    27da:	0e 94 3e 06 	call	0xc7c	; 0xc7c <uart_init>
    27de:	0e 94 59 09 	call	0x12b2	; 0x12b2 <rfm12_init>
    27e2:	b8 9a       	sbi	0x17, 0	; 23
    27e4:	49 e0       	ldi	r20, 0x09	; 9
    27e6:	be 01       	movw	r22, r28
    27e8:	6f 5f       	subi	r22, 0xFF	; 255
    27ea:	7f 4f       	sbci	r23, 0xFF	; 255
    27ec:	89 e0       	ldi	r24, 0x09	; 9
    27ee:	0e 94 52 05 	call	0xaa4	; 0xaa4 <ds_read>
    27f2:	89 81       	ldd	r24, Y+1	; 0x01
    27f4:	80 93 41 02 	sts	0x0241, r24
    27f8:	8a 81       	ldd	r24, Y+2	; 0x02
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	98 2f       	mov	r25, r24
    27fe:	88 27       	eor	r24, r24
    2800:	2b 81       	ldd	r18, Y+3	; 0x03
    2802:	82 0f       	add	r24, r18
    2804:	91 1d       	adc	r25, r1
    2806:	90 93 43 02 	sts	0x0243, r25
    280a:	80 93 42 02 	sts	0x0242, r24
    280e:	8c 81       	ldd	r24, Y+4	; 0x04
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	98 2f       	mov	r25, r24
    2814:	88 27       	eor	r24, r24
    2816:	2d 81       	ldd	r18, Y+5	; 0x05
    2818:	82 0f       	add	r24, r18
    281a:	91 1d       	adc	r25, r1
    281c:	90 93 5b 02 	sts	0x025B, r25
    2820:	80 93 5a 02 	sts	0x025A, r24
    2824:	8e 81       	ldd	r24, Y+6	; 0x06
    2826:	80 93 5c 02 	sts	0x025C, r24
    282a:	8f 81       	ldd	r24, Y+7	; 0x07
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	98 2f       	mov	r25, r24
    2830:	88 27       	eor	r24, r24
    2832:	28 85       	ldd	r18, Y+8	; 0x08
    2834:	82 0f       	add	r24, r18
    2836:	91 1d       	adc	r25, r1
    2838:	90 93 59 02 	sts	0x0259, r25
    283c:	80 93 58 02 	sts	0x0258, r24
    2840:	89 85       	ldd	r24, Y+9	; 0x09
    2842:	80 93 5d 02 	sts	0x025D, r24
    2846:	80 91 5c 02 	lds	r24, 0x025C
    284a:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <rfm12_channel>
    284e:	80 e2       	ldi	r24, 0x20	; 32
    2850:	80 93 44 02 	sts	0x0244, r24
    2854:	80 93 55 02 	sts	0x0255, r24
    2858:	0e 94 8e 13 	call	0x271c	; 0x271c <initMessages>
    285c:	0e 94 a1 07 	call	0xf42	; 0xf42 <KBD_init>
    2860:	6d e1       	ldi	r22, 0x1D	; 29
    2862:	7b e0       	ldi	r23, 0x0B	; 11
    2864:	85 e0       	ldi	r24, 0x05	; 5
    2866:	0e 94 b4 11 	call	0x2368	; 0x2368 <setHandler>
    286a:	41 e0       	ldi	r20, 0x01	; 1
    286c:	50 e0       	ldi	r21, 0x00	; 0
    286e:	60 e0       	ldi	r22, 0x00	; 0
    2870:	85 e0       	ldi	r24, 0x05	; 5
    2872:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <setTimer>
    2876:	6f eb       	ldi	r22, 0xBF	; 191
    2878:	7a e0       	ldi	r23, 0x0A	; 10
    287a:	87 e0       	ldi	r24, 0x07	; 7
    287c:	0e 94 b4 11 	call	0x2368	; 0x2368 <setHandler>
    2880:	40 e2       	ldi	r20, 0x20	; 32
    2882:	53 e0       	ldi	r21, 0x03	; 3
    2884:	60 e0       	ldi	r22, 0x00	; 0
    2886:	87 e0       	ldi	r24, 0x07	; 7
    2888:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <setTimer>
    288c:	60 e0       	ldi	r22, 0x00	; 0
    288e:	87 e0       	ldi	r24, 0x07	; 7
    2890:	0e 94 6f 12 	call	0x24de	; 0x24de <sendMessage>
    2894:	65 ef       	ldi	r22, 0xF5	; 245
    2896:	76 e0       	ldi	r23, 0x06	; 6
    2898:	88 e0       	ldi	r24, 0x08	; 8
    289a:	0e 94 b4 11 	call	0x2368	; 0x2368 <setHandler>
    289e:	44 e1       	ldi	r20, 0x14	; 20
    28a0:	50 e0       	ldi	r21, 0x00	; 0
    28a2:	60 e0       	ldi	r22, 0x00	; 0
    28a4:	88 e0       	ldi	r24, 0x08	; 8
    28a6:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <setTimer>
    28aa:	65 eb       	ldi	r22, 0xB5	; 181
    28ac:	7a e0       	ldi	r23, 0x0A	; 10
    28ae:	8a e0       	ldi	r24, 0x0A	; 10
    28b0:	0e 94 b4 11 	call	0x2368	; 0x2368 <setHandler>
    28b4:	69 e0       	ldi	r22, 0x09	; 9
    28b6:	7b e0       	ldi	r23, 0x0B	; 11
    28b8:	89 e0       	ldi	r24, 0x09	; 9
    28ba:	0e 94 b4 11 	call	0x2368	; 0x2368 <setHandler>
    28be:	65 ef       	ldi	r22, 0xF5	; 245
    28c0:	7b e0       	ldi	r23, 0x0B	; 11
    28c2:	86 e0       	ldi	r24, 0x06	; 6
    28c4:	0e 94 b4 11 	call	0x2368	; 0x2368 <setHandler>
    28c8:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <startMenuNull>
    28cc:	80 91 58 02 	lds	r24, 0x0258
    28d0:	90 91 59 02 	lds	r25, 0x0259
    28d4:	08 96       	adiw	r24, 0x08	; 8
    28d6:	8f 3f       	cpi	r24, 0xFF	; 255
    28d8:	99 4f       	sbci	r25, 0xF9	; 249
    28da:	58 f0       	brcs	.+22     	; 0x28f2 <main+0x166>
    28dc:	61 e0       	ldi	r22, 0x01	; 1
    28de:	80 e0       	ldi	r24, 0x00	; 0
    28e0:	0e 94 14 08 	call	0x1028	; 0x1028 <lcd_gotoxy>
    28e4:	8a ea       	ldi	r24, 0xAA	; 170
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	0e 94 46 08 	call	0x108c	; 0x108c <lcd_puts>
    28ec:	81 e2       	ldi	r24, 0x21	; 33
    28ee:	80 93 55 02 	sts	0x0255, r24
    28f2:	78 94       	sei
    28f4:	0e 94 a8 12 	call	0x2550	; 0x2550 <dispatchMessage>
    28f8:	fd cf       	rjmp	.-6      	; 0x28f4 <main+0x168>

000028fa <__udivmodqi4>:
    28fa:	99 1b       	sub	r25, r25
    28fc:	79 e0       	ldi	r23, 0x09	; 9
    28fe:	04 c0       	rjmp	.+8      	; 0x2908 <__udivmodqi4_ep>

00002900 <__udivmodqi4_loop>:
    2900:	99 1f       	adc	r25, r25
    2902:	96 17       	cp	r25, r22
    2904:	08 f0       	brcs	.+2      	; 0x2908 <__udivmodqi4_ep>
    2906:	96 1b       	sub	r25, r22

00002908 <__udivmodqi4_ep>:
    2908:	88 1f       	adc	r24, r24
    290a:	7a 95       	dec	r23
    290c:	c9 f7       	brne	.-14     	; 0x2900 <__udivmodqi4_loop>
    290e:	80 95       	com	r24
    2910:	08 95       	ret

00002912 <__udivmodhi4>:
    2912:	aa 1b       	sub	r26, r26
    2914:	bb 1b       	sub	r27, r27
    2916:	51 e1       	ldi	r21, 0x11	; 17
    2918:	07 c0       	rjmp	.+14     	; 0x2928 <__udivmodhi4_ep>

0000291a <__udivmodhi4_loop>:
    291a:	aa 1f       	adc	r26, r26
    291c:	bb 1f       	adc	r27, r27
    291e:	a6 17       	cp	r26, r22
    2920:	b7 07       	cpc	r27, r23
    2922:	10 f0       	brcs	.+4      	; 0x2928 <__udivmodhi4_ep>
    2924:	a6 1b       	sub	r26, r22
    2926:	b7 0b       	sbc	r27, r23

00002928 <__udivmodhi4_ep>:
    2928:	88 1f       	adc	r24, r24
    292a:	99 1f       	adc	r25, r25
    292c:	5a 95       	dec	r21
    292e:	a9 f7       	brne	.-22     	; 0x291a <__udivmodhi4_loop>
    2930:	80 95       	com	r24
    2932:	90 95       	com	r25
    2934:	bc 01       	movw	r22, r24
    2936:	cd 01       	movw	r24, r26
    2938:	08 95       	ret

0000293a <__tablejump2__>:
    293a:	ee 0f       	add	r30, r30
    293c:	ff 1f       	adc	r31, r31

0000293e <__tablejump__>:
    293e:	05 90       	lpm	r0, Z+
    2940:	f4 91       	lpm	r31, Z
    2942:	e0 2d       	mov	r30, r0
    2944:	09 94       	ijmp

00002946 <__cmpsf2>:
    2946:	40 d0       	rcall	.+128    	; 0x29c8 <__fp_cmp>
    2948:	08 f4       	brcc	.+2      	; 0x294c <__cmpsf2+0x6>
    294a:	81 e0       	ldi	r24, 0x01	; 1
    294c:	08 95       	ret

0000294e <__floatunsisf>:
    294e:	e8 94       	clt
    2950:	09 c0       	rjmp	.+18     	; 0x2964 <__floatsisf+0x12>

00002952 <__floatsisf>:
    2952:	97 fb       	bst	r25, 7
    2954:	3e f4       	brtc	.+14     	; 0x2964 <__floatsisf+0x12>
    2956:	90 95       	com	r25
    2958:	80 95       	com	r24
    295a:	70 95       	com	r23
    295c:	61 95       	neg	r22
    295e:	7f 4f       	sbci	r23, 0xFF	; 255
    2960:	8f 4f       	sbci	r24, 0xFF	; 255
    2962:	9f 4f       	sbci	r25, 0xFF	; 255
    2964:	99 23       	and	r25, r25
    2966:	a9 f0       	breq	.+42     	; 0x2992 <__floatsisf+0x40>
    2968:	f9 2f       	mov	r31, r25
    296a:	96 e9       	ldi	r25, 0x96	; 150
    296c:	bb 27       	eor	r27, r27
    296e:	93 95       	inc	r25
    2970:	f6 95       	lsr	r31
    2972:	87 95       	ror	r24
    2974:	77 95       	ror	r23
    2976:	67 95       	ror	r22
    2978:	b7 95       	ror	r27
    297a:	f1 11       	cpse	r31, r1
    297c:	f8 cf       	rjmp	.-16     	; 0x296e <__floatsisf+0x1c>
    297e:	fa f4       	brpl	.+62     	; 0x29be <__floatsisf+0x6c>
    2980:	bb 0f       	add	r27, r27
    2982:	11 f4       	brne	.+4      	; 0x2988 <__floatsisf+0x36>
    2984:	60 ff       	sbrs	r22, 0
    2986:	1b c0       	rjmp	.+54     	; 0x29be <__floatsisf+0x6c>
    2988:	6f 5f       	subi	r22, 0xFF	; 255
    298a:	7f 4f       	sbci	r23, 0xFF	; 255
    298c:	8f 4f       	sbci	r24, 0xFF	; 255
    298e:	9f 4f       	sbci	r25, 0xFF	; 255
    2990:	16 c0       	rjmp	.+44     	; 0x29be <__floatsisf+0x6c>
    2992:	88 23       	and	r24, r24
    2994:	11 f0       	breq	.+4      	; 0x299a <__floatsisf+0x48>
    2996:	96 e9       	ldi	r25, 0x96	; 150
    2998:	11 c0       	rjmp	.+34     	; 0x29bc <__floatsisf+0x6a>
    299a:	77 23       	and	r23, r23
    299c:	21 f0       	breq	.+8      	; 0x29a6 <__floatsisf+0x54>
    299e:	9e e8       	ldi	r25, 0x8E	; 142
    29a0:	87 2f       	mov	r24, r23
    29a2:	76 2f       	mov	r23, r22
    29a4:	05 c0       	rjmp	.+10     	; 0x29b0 <__floatsisf+0x5e>
    29a6:	66 23       	and	r22, r22
    29a8:	71 f0       	breq	.+28     	; 0x29c6 <__floatsisf+0x74>
    29aa:	96 e8       	ldi	r25, 0x86	; 134
    29ac:	86 2f       	mov	r24, r22
    29ae:	70 e0       	ldi	r23, 0x00	; 0
    29b0:	60 e0       	ldi	r22, 0x00	; 0
    29b2:	2a f0       	brmi	.+10     	; 0x29be <__floatsisf+0x6c>
    29b4:	9a 95       	dec	r25
    29b6:	66 0f       	add	r22, r22
    29b8:	77 1f       	adc	r23, r23
    29ba:	88 1f       	adc	r24, r24
    29bc:	da f7       	brpl	.-10     	; 0x29b4 <__floatsisf+0x62>
    29be:	88 0f       	add	r24, r24
    29c0:	96 95       	lsr	r25
    29c2:	87 95       	ror	r24
    29c4:	97 f9       	bld	r25, 7
    29c6:	08 95       	ret

000029c8 <__fp_cmp>:
    29c8:	99 0f       	add	r25, r25
    29ca:	00 08       	sbc	r0, r0
    29cc:	55 0f       	add	r21, r21
    29ce:	aa 0b       	sbc	r26, r26
    29d0:	e0 e8       	ldi	r30, 0x80	; 128
    29d2:	fe ef       	ldi	r31, 0xFE	; 254
    29d4:	16 16       	cp	r1, r22
    29d6:	17 06       	cpc	r1, r23
    29d8:	e8 07       	cpc	r30, r24
    29da:	f9 07       	cpc	r31, r25
    29dc:	c0 f0       	brcs	.+48     	; 0x2a0e <__fp_cmp+0x46>
    29de:	12 16       	cp	r1, r18
    29e0:	13 06       	cpc	r1, r19
    29e2:	e4 07       	cpc	r30, r20
    29e4:	f5 07       	cpc	r31, r21
    29e6:	98 f0       	brcs	.+38     	; 0x2a0e <__fp_cmp+0x46>
    29e8:	62 1b       	sub	r22, r18
    29ea:	73 0b       	sbc	r23, r19
    29ec:	84 0b       	sbc	r24, r20
    29ee:	95 0b       	sbc	r25, r21
    29f0:	39 f4       	brne	.+14     	; 0x2a00 <__fp_cmp+0x38>
    29f2:	0a 26       	eor	r0, r26
    29f4:	61 f0       	breq	.+24     	; 0x2a0e <__fp_cmp+0x46>
    29f6:	23 2b       	or	r18, r19
    29f8:	24 2b       	or	r18, r20
    29fa:	25 2b       	or	r18, r21
    29fc:	21 f4       	brne	.+8      	; 0x2a06 <__fp_cmp+0x3e>
    29fe:	08 95       	ret
    2a00:	0a 26       	eor	r0, r26
    2a02:	09 f4       	brne	.+2      	; 0x2a06 <__fp_cmp+0x3e>
    2a04:	a1 40       	sbci	r26, 0x01	; 1
    2a06:	a6 95       	lsr	r26
    2a08:	8f ef       	ldi	r24, 0xFF	; 255
    2a0a:	81 1d       	adc	r24, r1
    2a0c:	81 1d       	adc	r24, r1
    2a0e:	08 95       	ret

00002a10 <strcpy>:
    2a10:	fb 01       	movw	r30, r22
    2a12:	dc 01       	movw	r26, r24
    2a14:	01 90       	ld	r0, Z+
    2a16:	0d 92       	st	X+, r0
    2a18:	00 20       	and	r0, r0
    2a1a:	e1 f7       	brne	.-8      	; 0x2a14 <strcpy+0x4>
    2a1c:	08 95       	ret

00002a1e <sprintf>:
    2a1e:	ae e0       	ldi	r26, 0x0E	; 14
    2a20:	b0 e0       	ldi	r27, 0x00	; 0
    2a22:	e5 e1       	ldi	r30, 0x15	; 21
    2a24:	f5 e1       	ldi	r31, 0x15	; 21
    2a26:	0c 94 b7 17 	jmp	0x2f6e	; 0x2f6e <__prologue_saves__+0x1c>
    2a2a:	0d 89       	ldd	r16, Y+21	; 0x15
    2a2c:	1e 89       	ldd	r17, Y+22	; 0x16
    2a2e:	86 e0       	ldi	r24, 0x06	; 6
    2a30:	8c 83       	std	Y+4, r24	; 0x04
    2a32:	1a 83       	std	Y+2, r17	; 0x02
    2a34:	09 83       	std	Y+1, r16	; 0x01
    2a36:	8f ef       	ldi	r24, 0xFF	; 255
    2a38:	9f e7       	ldi	r25, 0x7F	; 127
    2a3a:	9e 83       	std	Y+6, r25	; 0x06
    2a3c:	8d 83       	std	Y+5, r24	; 0x05
    2a3e:	ae 01       	movw	r20, r28
    2a40:	47 5e       	subi	r20, 0xE7	; 231
    2a42:	5f 4f       	sbci	r21, 0xFF	; 255
    2a44:	6f 89       	ldd	r22, Y+23	; 0x17
    2a46:	78 8d       	ldd	r23, Y+24	; 0x18
    2a48:	ce 01       	movw	r24, r28
    2a4a:	01 96       	adiw	r24, 0x01	; 1
    2a4c:	0e 94 31 15 	call	0x2a62	; 0x2a62 <vfprintf>
    2a50:	ef 81       	ldd	r30, Y+7	; 0x07
    2a52:	f8 85       	ldd	r31, Y+8	; 0x08
    2a54:	e0 0f       	add	r30, r16
    2a56:	f1 1f       	adc	r31, r17
    2a58:	10 82       	st	Z, r1
    2a5a:	2e 96       	adiw	r28, 0x0e	; 14
    2a5c:	e4 e0       	ldi	r30, 0x04	; 4
    2a5e:	0c 94 d3 17 	jmp	0x2fa6	; 0x2fa6 <__epilogue_restores__+0x1c>

00002a62 <vfprintf>:
    2a62:	ac e0       	ldi	r26, 0x0C	; 12
    2a64:	b0 e0       	ldi	r27, 0x00	; 0
    2a66:	e7 e3       	ldi	r30, 0x37	; 55
    2a68:	f5 e1       	ldi	r31, 0x15	; 21
    2a6a:	0c 94 a9 17 	jmp	0x2f52	; 0x2f52 <__prologue_saves__>
    2a6e:	7c 01       	movw	r14, r24
    2a70:	6b 01       	movw	r12, r22
    2a72:	8a 01       	movw	r16, r20
    2a74:	fc 01       	movw	r30, r24
    2a76:	17 82       	std	Z+7, r1	; 0x07
    2a78:	16 82       	std	Z+6, r1	; 0x06
    2a7a:	83 81       	ldd	r24, Z+3	; 0x03
    2a7c:	81 ff       	sbrs	r24, 1
    2a7e:	bd c1       	rjmp	.+890    	; 0x2dfa <vfprintf+0x398>
    2a80:	ce 01       	movw	r24, r28
    2a82:	01 96       	adiw	r24, 0x01	; 1
    2a84:	4c 01       	movw	r8, r24
    2a86:	f7 01       	movw	r30, r14
    2a88:	93 81       	ldd	r25, Z+3	; 0x03
    2a8a:	f6 01       	movw	r30, r12
    2a8c:	93 fd       	sbrc	r25, 3
    2a8e:	85 91       	lpm	r24, Z+
    2a90:	93 ff       	sbrs	r25, 3
    2a92:	81 91       	ld	r24, Z+
    2a94:	6f 01       	movw	r12, r30
    2a96:	88 23       	and	r24, r24
    2a98:	09 f4       	brne	.+2      	; 0x2a9c <vfprintf+0x3a>
    2a9a:	ab c1       	rjmp	.+854    	; 0x2df2 <vfprintf+0x390>
    2a9c:	85 32       	cpi	r24, 0x25	; 37
    2a9e:	39 f4       	brne	.+14     	; 0x2aae <vfprintf+0x4c>
    2aa0:	93 fd       	sbrc	r25, 3
    2aa2:	85 91       	lpm	r24, Z+
    2aa4:	93 ff       	sbrs	r25, 3
    2aa6:	81 91       	ld	r24, Z+
    2aa8:	6f 01       	movw	r12, r30
    2aaa:	85 32       	cpi	r24, 0x25	; 37
    2aac:	29 f4       	brne	.+10     	; 0x2ab8 <vfprintf+0x56>
    2aae:	b7 01       	movw	r22, r14
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	0e 94 19 17 	call	0x2e32	; 0x2e32 <fputc>
    2ab6:	e7 cf       	rjmp	.-50     	; 0x2a86 <vfprintf+0x24>
    2ab8:	51 2c       	mov	r5, r1
    2aba:	31 2c       	mov	r3, r1
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	20 32       	cpi	r18, 0x20	; 32
    2ac0:	a0 f4       	brcc	.+40     	; 0x2aea <vfprintf+0x88>
    2ac2:	8b 32       	cpi	r24, 0x2B	; 43
    2ac4:	69 f0       	breq	.+26     	; 0x2ae0 <vfprintf+0x7e>
    2ac6:	30 f4       	brcc	.+12     	; 0x2ad4 <vfprintf+0x72>
    2ac8:	80 32       	cpi	r24, 0x20	; 32
    2aca:	59 f0       	breq	.+22     	; 0x2ae2 <vfprintf+0x80>
    2acc:	83 32       	cpi	r24, 0x23	; 35
    2ace:	69 f4       	brne	.+26     	; 0x2aea <vfprintf+0x88>
    2ad0:	20 61       	ori	r18, 0x10	; 16
    2ad2:	2c c0       	rjmp	.+88     	; 0x2b2c <vfprintf+0xca>
    2ad4:	8d 32       	cpi	r24, 0x2D	; 45
    2ad6:	39 f0       	breq	.+14     	; 0x2ae6 <vfprintf+0x84>
    2ad8:	80 33       	cpi	r24, 0x30	; 48
    2ada:	39 f4       	brne	.+14     	; 0x2aea <vfprintf+0x88>
    2adc:	21 60       	ori	r18, 0x01	; 1
    2ade:	26 c0       	rjmp	.+76     	; 0x2b2c <vfprintf+0xca>
    2ae0:	22 60       	ori	r18, 0x02	; 2
    2ae2:	24 60       	ori	r18, 0x04	; 4
    2ae4:	23 c0       	rjmp	.+70     	; 0x2b2c <vfprintf+0xca>
    2ae6:	28 60       	ori	r18, 0x08	; 8
    2ae8:	21 c0       	rjmp	.+66     	; 0x2b2c <vfprintf+0xca>
    2aea:	27 fd       	sbrc	r18, 7
    2aec:	27 c0       	rjmp	.+78     	; 0x2b3c <vfprintf+0xda>
    2aee:	30 ed       	ldi	r19, 0xD0	; 208
    2af0:	38 0f       	add	r19, r24
    2af2:	3a 30       	cpi	r19, 0x0A	; 10
    2af4:	78 f4       	brcc	.+30     	; 0x2b14 <vfprintf+0xb2>
    2af6:	26 ff       	sbrs	r18, 6
    2af8:	06 c0       	rjmp	.+12     	; 0x2b06 <vfprintf+0xa4>
    2afa:	fa e0       	ldi	r31, 0x0A	; 10
    2afc:	5f 9e       	mul	r5, r31
    2afe:	30 0d       	add	r19, r0
    2b00:	11 24       	eor	r1, r1
    2b02:	53 2e       	mov	r5, r19
    2b04:	13 c0       	rjmp	.+38     	; 0x2b2c <vfprintf+0xca>
    2b06:	8a e0       	ldi	r24, 0x0A	; 10
    2b08:	38 9e       	mul	r3, r24
    2b0a:	30 0d       	add	r19, r0
    2b0c:	11 24       	eor	r1, r1
    2b0e:	33 2e       	mov	r3, r19
    2b10:	20 62       	ori	r18, 0x20	; 32
    2b12:	0c c0       	rjmp	.+24     	; 0x2b2c <vfprintf+0xca>
    2b14:	8e 32       	cpi	r24, 0x2E	; 46
    2b16:	21 f4       	brne	.+8      	; 0x2b20 <vfprintf+0xbe>
    2b18:	26 fd       	sbrc	r18, 6
    2b1a:	6b c1       	rjmp	.+726    	; 0x2df2 <vfprintf+0x390>
    2b1c:	20 64       	ori	r18, 0x40	; 64
    2b1e:	06 c0       	rjmp	.+12     	; 0x2b2c <vfprintf+0xca>
    2b20:	8c 36       	cpi	r24, 0x6C	; 108
    2b22:	11 f4       	brne	.+4      	; 0x2b28 <vfprintf+0xc6>
    2b24:	20 68       	ori	r18, 0x80	; 128
    2b26:	02 c0       	rjmp	.+4      	; 0x2b2c <vfprintf+0xca>
    2b28:	88 36       	cpi	r24, 0x68	; 104
    2b2a:	41 f4       	brne	.+16     	; 0x2b3c <vfprintf+0xda>
    2b2c:	f6 01       	movw	r30, r12
    2b2e:	93 fd       	sbrc	r25, 3
    2b30:	85 91       	lpm	r24, Z+
    2b32:	93 ff       	sbrs	r25, 3
    2b34:	81 91       	ld	r24, Z+
    2b36:	6f 01       	movw	r12, r30
    2b38:	81 11       	cpse	r24, r1
    2b3a:	c1 cf       	rjmp	.-126    	; 0x2abe <vfprintf+0x5c>
    2b3c:	98 2f       	mov	r25, r24
    2b3e:	9f 7d       	andi	r25, 0xDF	; 223
    2b40:	95 54       	subi	r25, 0x45	; 69
    2b42:	93 30       	cpi	r25, 0x03	; 3
    2b44:	28 f4       	brcc	.+10     	; 0x2b50 <vfprintf+0xee>
    2b46:	0c 5f       	subi	r16, 0xFC	; 252
    2b48:	1f 4f       	sbci	r17, 0xFF	; 255
    2b4a:	ff e3       	ldi	r31, 0x3F	; 63
    2b4c:	f9 83       	std	Y+1, r31	; 0x01
    2b4e:	0d c0       	rjmp	.+26     	; 0x2b6a <vfprintf+0x108>
    2b50:	83 36       	cpi	r24, 0x63	; 99
    2b52:	31 f0       	breq	.+12     	; 0x2b60 <vfprintf+0xfe>
    2b54:	83 37       	cpi	r24, 0x73	; 115
    2b56:	71 f0       	breq	.+28     	; 0x2b74 <vfprintf+0x112>
    2b58:	83 35       	cpi	r24, 0x53	; 83
    2b5a:	09 f0       	breq	.+2      	; 0x2b5e <vfprintf+0xfc>
    2b5c:	5b c0       	rjmp	.+182    	; 0x2c14 <vfprintf+0x1b2>
    2b5e:	22 c0       	rjmp	.+68     	; 0x2ba4 <vfprintf+0x142>
    2b60:	f8 01       	movw	r30, r16
    2b62:	80 81       	ld	r24, Z
    2b64:	89 83       	std	Y+1, r24	; 0x01
    2b66:	0e 5f       	subi	r16, 0xFE	; 254
    2b68:	1f 4f       	sbci	r17, 0xFF	; 255
    2b6a:	44 24       	eor	r4, r4
    2b6c:	43 94       	inc	r4
    2b6e:	51 2c       	mov	r5, r1
    2b70:	54 01       	movw	r10, r8
    2b72:	15 c0       	rjmp	.+42     	; 0x2b9e <vfprintf+0x13c>
    2b74:	38 01       	movw	r6, r16
    2b76:	f2 e0       	ldi	r31, 0x02	; 2
    2b78:	6f 0e       	add	r6, r31
    2b7a:	71 1c       	adc	r7, r1
    2b7c:	f8 01       	movw	r30, r16
    2b7e:	a0 80       	ld	r10, Z
    2b80:	b1 80       	ldd	r11, Z+1	; 0x01
    2b82:	26 ff       	sbrs	r18, 6
    2b84:	03 c0       	rjmp	.+6      	; 0x2b8c <vfprintf+0x12a>
    2b86:	65 2d       	mov	r22, r5
    2b88:	70 e0       	ldi	r23, 0x00	; 0
    2b8a:	02 c0       	rjmp	.+4      	; 0x2b90 <vfprintf+0x12e>
    2b8c:	6f ef       	ldi	r22, 0xFF	; 255
    2b8e:	7f ef       	ldi	r23, 0xFF	; 255
    2b90:	c5 01       	movw	r24, r10
    2b92:	2c 87       	std	Y+12, r18	; 0x0c
    2b94:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <strnlen>
    2b98:	2c 01       	movw	r4, r24
    2b9a:	83 01       	movw	r16, r6
    2b9c:	2c 85       	ldd	r18, Y+12	; 0x0c
    2b9e:	2f 77       	andi	r18, 0x7F	; 127
    2ba0:	22 2e       	mov	r2, r18
    2ba2:	17 c0       	rjmp	.+46     	; 0x2bd2 <vfprintf+0x170>
    2ba4:	38 01       	movw	r6, r16
    2ba6:	f2 e0       	ldi	r31, 0x02	; 2
    2ba8:	6f 0e       	add	r6, r31
    2baa:	71 1c       	adc	r7, r1
    2bac:	f8 01       	movw	r30, r16
    2bae:	a0 80       	ld	r10, Z
    2bb0:	b1 80       	ldd	r11, Z+1	; 0x01
    2bb2:	26 ff       	sbrs	r18, 6
    2bb4:	03 c0       	rjmp	.+6      	; 0x2bbc <vfprintf+0x15a>
    2bb6:	65 2d       	mov	r22, r5
    2bb8:	70 e0       	ldi	r23, 0x00	; 0
    2bba:	02 c0       	rjmp	.+4      	; 0x2bc0 <vfprintf+0x15e>
    2bbc:	6f ef       	ldi	r22, 0xFF	; 255
    2bbe:	7f ef       	ldi	r23, 0xFF	; 255
    2bc0:	c5 01       	movw	r24, r10
    2bc2:	2c 87       	std	Y+12, r18	; 0x0c
    2bc4:	0e 94 03 17 	call	0x2e06	; 0x2e06 <strnlen_P>
    2bc8:	2c 01       	movw	r4, r24
    2bca:	2c 85       	ldd	r18, Y+12	; 0x0c
    2bcc:	20 68       	ori	r18, 0x80	; 128
    2bce:	22 2e       	mov	r2, r18
    2bd0:	83 01       	movw	r16, r6
    2bd2:	23 fc       	sbrc	r2, 3
    2bd4:	1b c0       	rjmp	.+54     	; 0x2c0c <vfprintf+0x1aa>
    2bd6:	83 2d       	mov	r24, r3
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	48 16       	cp	r4, r24
    2bdc:	59 06       	cpc	r5, r25
    2bde:	b0 f4       	brcc	.+44     	; 0x2c0c <vfprintf+0x1aa>
    2be0:	b7 01       	movw	r22, r14
    2be2:	80 e2       	ldi	r24, 0x20	; 32
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	0e 94 19 17 	call	0x2e32	; 0x2e32 <fputc>
    2bea:	3a 94       	dec	r3
    2bec:	f4 cf       	rjmp	.-24     	; 0x2bd6 <vfprintf+0x174>
    2bee:	f5 01       	movw	r30, r10
    2bf0:	27 fc       	sbrc	r2, 7
    2bf2:	85 91       	lpm	r24, Z+
    2bf4:	27 fe       	sbrs	r2, 7
    2bf6:	81 91       	ld	r24, Z+
    2bf8:	5f 01       	movw	r10, r30
    2bfa:	b7 01       	movw	r22, r14
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	0e 94 19 17 	call	0x2e32	; 0x2e32 <fputc>
    2c02:	31 10       	cpse	r3, r1
    2c04:	3a 94       	dec	r3
    2c06:	f1 e0       	ldi	r31, 0x01	; 1
    2c08:	4f 1a       	sub	r4, r31
    2c0a:	51 08       	sbc	r5, r1
    2c0c:	41 14       	cp	r4, r1
    2c0e:	51 04       	cpc	r5, r1
    2c10:	71 f7       	brne	.-36     	; 0x2bee <vfprintf+0x18c>
    2c12:	e5 c0       	rjmp	.+458    	; 0x2dde <vfprintf+0x37c>
    2c14:	84 36       	cpi	r24, 0x64	; 100
    2c16:	11 f0       	breq	.+4      	; 0x2c1c <vfprintf+0x1ba>
    2c18:	89 36       	cpi	r24, 0x69	; 105
    2c1a:	39 f5       	brne	.+78     	; 0x2c6a <vfprintf+0x208>
    2c1c:	f8 01       	movw	r30, r16
    2c1e:	27 ff       	sbrs	r18, 7
    2c20:	07 c0       	rjmp	.+14     	; 0x2c30 <vfprintf+0x1ce>
    2c22:	60 81       	ld	r22, Z
    2c24:	71 81       	ldd	r23, Z+1	; 0x01
    2c26:	82 81       	ldd	r24, Z+2	; 0x02
    2c28:	93 81       	ldd	r25, Z+3	; 0x03
    2c2a:	0c 5f       	subi	r16, 0xFC	; 252
    2c2c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c2e:	08 c0       	rjmp	.+16     	; 0x2c40 <vfprintf+0x1de>
    2c30:	60 81       	ld	r22, Z
    2c32:	71 81       	ldd	r23, Z+1	; 0x01
    2c34:	88 27       	eor	r24, r24
    2c36:	77 fd       	sbrc	r23, 7
    2c38:	80 95       	com	r24
    2c3a:	98 2f       	mov	r25, r24
    2c3c:	0e 5f       	subi	r16, 0xFE	; 254
    2c3e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c40:	2f 76       	andi	r18, 0x6F	; 111
    2c42:	b2 2e       	mov	r11, r18
    2c44:	97 ff       	sbrs	r25, 7
    2c46:	09 c0       	rjmp	.+18     	; 0x2c5a <vfprintf+0x1f8>
    2c48:	90 95       	com	r25
    2c4a:	80 95       	com	r24
    2c4c:	70 95       	com	r23
    2c4e:	61 95       	neg	r22
    2c50:	7f 4f       	sbci	r23, 0xFF	; 255
    2c52:	8f 4f       	sbci	r24, 0xFF	; 255
    2c54:	9f 4f       	sbci	r25, 0xFF	; 255
    2c56:	20 68       	ori	r18, 0x80	; 128
    2c58:	b2 2e       	mov	r11, r18
    2c5a:	2a e0       	ldi	r18, 0x0A	; 10
    2c5c:	30 e0       	ldi	r19, 0x00	; 0
    2c5e:	a4 01       	movw	r20, r8
    2c60:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__ultoa_invert>
    2c64:	a8 2e       	mov	r10, r24
    2c66:	a8 18       	sub	r10, r8
    2c68:	44 c0       	rjmp	.+136    	; 0x2cf2 <vfprintf+0x290>
    2c6a:	85 37       	cpi	r24, 0x75	; 117
    2c6c:	29 f4       	brne	.+10     	; 0x2c78 <vfprintf+0x216>
    2c6e:	2f 7e       	andi	r18, 0xEF	; 239
    2c70:	b2 2e       	mov	r11, r18
    2c72:	2a e0       	ldi	r18, 0x0A	; 10
    2c74:	30 e0       	ldi	r19, 0x00	; 0
    2c76:	25 c0       	rjmp	.+74     	; 0x2cc2 <vfprintf+0x260>
    2c78:	f2 2f       	mov	r31, r18
    2c7a:	f9 7f       	andi	r31, 0xF9	; 249
    2c7c:	bf 2e       	mov	r11, r31
    2c7e:	8f 36       	cpi	r24, 0x6F	; 111
    2c80:	c1 f0       	breq	.+48     	; 0x2cb2 <vfprintf+0x250>
    2c82:	18 f4       	brcc	.+6      	; 0x2c8a <vfprintf+0x228>
    2c84:	88 35       	cpi	r24, 0x58	; 88
    2c86:	79 f0       	breq	.+30     	; 0x2ca6 <vfprintf+0x244>
    2c88:	b4 c0       	rjmp	.+360    	; 0x2df2 <vfprintf+0x390>
    2c8a:	80 37       	cpi	r24, 0x70	; 112
    2c8c:	19 f0       	breq	.+6      	; 0x2c94 <vfprintf+0x232>
    2c8e:	88 37       	cpi	r24, 0x78	; 120
    2c90:	21 f0       	breq	.+8      	; 0x2c9a <vfprintf+0x238>
    2c92:	af c0       	rjmp	.+350    	; 0x2df2 <vfprintf+0x390>
    2c94:	2f 2f       	mov	r18, r31
    2c96:	20 61       	ori	r18, 0x10	; 16
    2c98:	b2 2e       	mov	r11, r18
    2c9a:	b4 fe       	sbrs	r11, 4
    2c9c:	0d c0       	rjmp	.+26     	; 0x2cb8 <vfprintf+0x256>
    2c9e:	8b 2d       	mov	r24, r11
    2ca0:	84 60       	ori	r24, 0x04	; 4
    2ca2:	b8 2e       	mov	r11, r24
    2ca4:	09 c0       	rjmp	.+18     	; 0x2cb8 <vfprintf+0x256>
    2ca6:	24 ff       	sbrs	r18, 4
    2ca8:	0a c0       	rjmp	.+20     	; 0x2cbe <vfprintf+0x25c>
    2caa:	9f 2f       	mov	r25, r31
    2cac:	96 60       	ori	r25, 0x06	; 6
    2cae:	b9 2e       	mov	r11, r25
    2cb0:	06 c0       	rjmp	.+12     	; 0x2cbe <vfprintf+0x25c>
    2cb2:	28 e0       	ldi	r18, 0x08	; 8
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	05 c0       	rjmp	.+10     	; 0x2cc2 <vfprintf+0x260>
    2cb8:	20 e1       	ldi	r18, 0x10	; 16
    2cba:	30 e0       	ldi	r19, 0x00	; 0
    2cbc:	02 c0       	rjmp	.+4      	; 0x2cc2 <vfprintf+0x260>
    2cbe:	20 e1       	ldi	r18, 0x10	; 16
    2cc0:	32 e0       	ldi	r19, 0x02	; 2
    2cc2:	f8 01       	movw	r30, r16
    2cc4:	b7 fe       	sbrs	r11, 7
    2cc6:	07 c0       	rjmp	.+14     	; 0x2cd6 <vfprintf+0x274>
    2cc8:	60 81       	ld	r22, Z
    2cca:	71 81       	ldd	r23, Z+1	; 0x01
    2ccc:	82 81       	ldd	r24, Z+2	; 0x02
    2cce:	93 81       	ldd	r25, Z+3	; 0x03
    2cd0:	0c 5f       	subi	r16, 0xFC	; 252
    2cd2:	1f 4f       	sbci	r17, 0xFF	; 255
    2cd4:	06 c0       	rjmp	.+12     	; 0x2ce2 <vfprintf+0x280>
    2cd6:	60 81       	ld	r22, Z
    2cd8:	71 81       	ldd	r23, Z+1	; 0x01
    2cda:	80 e0       	ldi	r24, 0x00	; 0
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	0e 5f       	subi	r16, 0xFE	; 254
    2ce0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ce2:	a4 01       	movw	r20, r8
    2ce4:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__ultoa_invert>
    2ce8:	a8 2e       	mov	r10, r24
    2cea:	a8 18       	sub	r10, r8
    2cec:	fb 2d       	mov	r31, r11
    2cee:	ff 77       	andi	r31, 0x7F	; 127
    2cf0:	bf 2e       	mov	r11, r31
    2cf2:	b6 fe       	sbrs	r11, 6
    2cf4:	0b c0       	rjmp	.+22     	; 0x2d0c <vfprintf+0x2aa>
    2cf6:	2b 2d       	mov	r18, r11
    2cf8:	2e 7f       	andi	r18, 0xFE	; 254
    2cfa:	a5 14       	cp	r10, r5
    2cfc:	50 f4       	brcc	.+20     	; 0x2d12 <vfprintf+0x2b0>
    2cfe:	b4 fe       	sbrs	r11, 4
    2d00:	0a c0       	rjmp	.+20     	; 0x2d16 <vfprintf+0x2b4>
    2d02:	b2 fc       	sbrc	r11, 2
    2d04:	08 c0       	rjmp	.+16     	; 0x2d16 <vfprintf+0x2b4>
    2d06:	2b 2d       	mov	r18, r11
    2d08:	2e 7e       	andi	r18, 0xEE	; 238
    2d0a:	05 c0       	rjmp	.+10     	; 0x2d16 <vfprintf+0x2b4>
    2d0c:	7a 2c       	mov	r7, r10
    2d0e:	2b 2d       	mov	r18, r11
    2d10:	03 c0       	rjmp	.+6      	; 0x2d18 <vfprintf+0x2b6>
    2d12:	7a 2c       	mov	r7, r10
    2d14:	01 c0       	rjmp	.+2      	; 0x2d18 <vfprintf+0x2b6>
    2d16:	75 2c       	mov	r7, r5
    2d18:	24 ff       	sbrs	r18, 4
    2d1a:	0d c0       	rjmp	.+26     	; 0x2d36 <vfprintf+0x2d4>
    2d1c:	fe 01       	movw	r30, r28
    2d1e:	ea 0d       	add	r30, r10
    2d20:	f1 1d       	adc	r31, r1
    2d22:	80 81       	ld	r24, Z
    2d24:	80 33       	cpi	r24, 0x30	; 48
    2d26:	11 f4       	brne	.+4      	; 0x2d2c <vfprintf+0x2ca>
    2d28:	29 7e       	andi	r18, 0xE9	; 233
    2d2a:	09 c0       	rjmp	.+18     	; 0x2d3e <vfprintf+0x2dc>
    2d2c:	22 ff       	sbrs	r18, 2
    2d2e:	06 c0       	rjmp	.+12     	; 0x2d3c <vfprintf+0x2da>
    2d30:	73 94       	inc	r7
    2d32:	73 94       	inc	r7
    2d34:	04 c0       	rjmp	.+8      	; 0x2d3e <vfprintf+0x2dc>
    2d36:	82 2f       	mov	r24, r18
    2d38:	86 78       	andi	r24, 0x86	; 134
    2d3a:	09 f0       	breq	.+2      	; 0x2d3e <vfprintf+0x2dc>
    2d3c:	73 94       	inc	r7
    2d3e:	23 fd       	sbrc	r18, 3
    2d40:	13 c0       	rjmp	.+38     	; 0x2d68 <vfprintf+0x306>
    2d42:	20 ff       	sbrs	r18, 0
    2d44:	06 c0       	rjmp	.+12     	; 0x2d52 <vfprintf+0x2f0>
    2d46:	5a 2c       	mov	r5, r10
    2d48:	73 14       	cp	r7, r3
    2d4a:	18 f4       	brcc	.+6      	; 0x2d52 <vfprintf+0x2f0>
    2d4c:	53 0c       	add	r5, r3
    2d4e:	57 18       	sub	r5, r7
    2d50:	73 2c       	mov	r7, r3
    2d52:	73 14       	cp	r7, r3
    2d54:	68 f4       	brcc	.+26     	; 0x2d70 <vfprintf+0x30e>
    2d56:	b7 01       	movw	r22, r14
    2d58:	80 e2       	ldi	r24, 0x20	; 32
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	2c 87       	std	Y+12, r18	; 0x0c
    2d5e:	0e 94 19 17 	call	0x2e32	; 0x2e32 <fputc>
    2d62:	73 94       	inc	r7
    2d64:	2c 85       	ldd	r18, Y+12	; 0x0c
    2d66:	f5 cf       	rjmp	.-22     	; 0x2d52 <vfprintf+0x2f0>
    2d68:	73 14       	cp	r7, r3
    2d6a:	10 f4       	brcc	.+4      	; 0x2d70 <vfprintf+0x30e>
    2d6c:	37 18       	sub	r3, r7
    2d6e:	01 c0       	rjmp	.+2      	; 0x2d72 <vfprintf+0x310>
    2d70:	31 2c       	mov	r3, r1
    2d72:	24 ff       	sbrs	r18, 4
    2d74:	12 c0       	rjmp	.+36     	; 0x2d9a <vfprintf+0x338>
    2d76:	b7 01       	movw	r22, r14
    2d78:	80 e3       	ldi	r24, 0x30	; 48
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	2c 87       	std	Y+12, r18	; 0x0c
    2d7e:	0e 94 19 17 	call	0x2e32	; 0x2e32 <fputc>
    2d82:	2c 85       	ldd	r18, Y+12	; 0x0c
    2d84:	22 ff       	sbrs	r18, 2
    2d86:	17 c0       	rjmp	.+46     	; 0x2db6 <vfprintf+0x354>
    2d88:	21 ff       	sbrs	r18, 1
    2d8a:	03 c0       	rjmp	.+6      	; 0x2d92 <vfprintf+0x330>
    2d8c:	88 e5       	ldi	r24, 0x58	; 88
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	02 c0       	rjmp	.+4      	; 0x2d96 <vfprintf+0x334>
    2d92:	88 e7       	ldi	r24, 0x78	; 120
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	b7 01       	movw	r22, r14
    2d98:	0c c0       	rjmp	.+24     	; 0x2db2 <vfprintf+0x350>
    2d9a:	82 2f       	mov	r24, r18
    2d9c:	86 78       	andi	r24, 0x86	; 134
    2d9e:	59 f0       	breq	.+22     	; 0x2db6 <vfprintf+0x354>
    2da0:	21 fd       	sbrc	r18, 1
    2da2:	02 c0       	rjmp	.+4      	; 0x2da8 <vfprintf+0x346>
    2da4:	80 e2       	ldi	r24, 0x20	; 32
    2da6:	01 c0       	rjmp	.+2      	; 0x2daa <vfprintf+0x348>
    2da8:	8b e2       	ldi	r24, 0x2B	; 43
    2daa:	27 fd       	sbrc	r18, 7
    2dac:	8d e2       	ldi	r24, 0x2D	; 45
    2dae:	b7 01       	movw	r22, r14
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	0e 94 19 17 	call	0x2e32	; 0x2e32 <fputc>
    2db6:	a5 14       	cp	r10, r5
    2db8:	38 f4       	brcc	.+14     	; 0x2dc8 <vfprintf+0x366>
    2dba:	b7 01       	movw	r22, r14
    2dbc:	80 e3       	ldi	r24, 0x30	; 48
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	0e 94 19 17 	call	0x2e32	; 0x2e32 <fputc>
    2dc4:	5a 94       	dec	r5
    2dc6:	f7 cf       	rjmp	.-18     	; 0x2db6 <vfprintf+0x354>
    2dc8:	aa 94       	dec	r10
    2dca:	f4 01       	movw	r30, r8
    2dcc:	ea 0d       	add	r30, r10
    2dce:	f1 1d       	adc	r31, r1
    2dd0:	80 81       	ld	r24, Z
    2dd2:	b7 01       	movw	r22, r14
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	0e 94 19 17 	call	0x2e32	; 0x2e32 <fputc>
    2dda:	a1 10       	cpse	r10, r1
    2ddc:	f5 cf       	rjmp	.-22     	; 0x2dc8 <vfprintf+0x366>
    2dde:	33 20       	and	r3, r3
    2de0:	09 f4       	brne	.+2      	; 0x2de4 <vfprintf+0x382>
    2de2:	51 ce       	rjmp	.-862    	; 0x2a86 <vfprintf+0x24>
    2de4:	b7 01       	movw	r22, r14
    2de6:	80 e2       	ldi	r24, 0x20	; 32
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	0e 94 19 17 	call	0x2e32	; 0x2e32 <fputc>
    2dee:	3a 94       	dec	r3
    2df0:	f6 cf       	rjmp	.-20     	; 0x2dde <vfprintf+0x37c>
    2df2:	f7 01       	movw	r30, r14
    2df4:	86 81       	ldd	r24, Z+6	; 0x06
    2df6:	97 81       	ldd	r25, Z+7	; 0x07
    2df8:	02 c0       	rjmp	.+4      	; 0x2dfe <vfprintf+0x39c>
    2dfa:	8f ef       	ldi	r24, 0xFF	; 255
    2dfc:	9f ef       	ldi	r25, 0xFF	; 255
    2dfe:	2c 96       	adiw	r28, 0x0c	; 12
    2e00:	e2 e1       	ldi	r30, 0x12	; 18
    2e02:	0c 94 c5 17 	jmp	0x2f8a	; 0x2f8a <__epilogue_restores__>

00002e06 <strnlen_P>:
    2e06:	fc 01       	movw	r30, r24
    2e08:	05 90       	lpm	r0, Z+
    2e0a:	61 50       	subi	r22, 0x01	; 1
    2e0c:	70 40       	sbci	r23, 0x00	; 0
    2e0e:	01 10       	cpse	r0, r1
    2e10:	d8 f7       	brcc	.-10     	; 0x2e08 <strnlen_P+0x2>
    2e12:	80 95       	com	r24
    2e14:	90 95       	com	r25
    2e16:	8e 0f       	add	r24, r30
    2e18:	9f 1f       	adc	r25, r31
    2e1a:	08 95       	ret

00002e1c <strnlen>:
    2e1c:	fc 01       	movw	r30, r24
    2e1e:	61 50       	subi	r22, 0x01	; 1
    2e20:	70 40       	sbci	r23, 0x00	; 0
    2e22:	01 90       	ld	r0, Z+
    2e24:	01 10       	cpse	r0, r1
    2e26:	d8 f7       	brcc	.-10     	; 0x2e1e <strnlen+0x2>
    2e28:	80 95       	com	r24
    2e2a:	90 95       	com	r25
    2e2c:	8e 0f       	add	r24, r30
    2e2e:	9f 1f       	adc	r25, r31
    2e30:	08 95       	ret

00002e32 <fputc>:
    2e32:	0f 93       	push	r16
    2e34:	1f 93       	push	r17
    2e36:	cf 93       	push	r28
    2e38:	df 93       	push	r29
    2e3a:	18 2f       	mov	r17, r24
    2e3c:	09 2f       	mov	r16, r25
    2e3e:	eb 01       	movw	r28, r22
    2e40:	8b 81       	ldd	r24, Y+3	; 0x03
    2e42:	81 fd       	sbrc	r24, 1
    2e44:	03 c0       	rjmp	.+6      	; 0x2e4c <fputc+0x1a>
    2e46:	8f ef       	ldi	r24, 0xFF	; 255
    2e48:	9f ef       	ldi	r25, 0xFF	; 255
    2e4a:	20 c0       	rjmp	.+64     	; 0x2e8c <fputc+0x5a>
    2e4c:	82 ff       	sbrs	r24, 2
    2e4e:	10 c0       	rjmp	.+32     	; 0x2e70 <fputc+0x3e>
    2e50:	4e 81       	ldd	r20, Y+6	; 0x06
    2e52:	5f 81       	ldd	r21, Y+7	; 0x07
    2e54:	2c 81       	ldd	r18, Y+4	; 0x04
    2e56:	3d 81       	ldd	r19, Y+5	; 0x05
    2e58:	42 17       	cp	r20, r18
    2e5a:	53 07       	cpc	r21, r19
    2e5c:	7c f4       	brge	.+30     	; 0x2e7c <fputc+0x4a>
    2e5e:	e8 81       	ld	r30, Y
    2e60:	f9 81       	ldd	r31, Y+1	; 0x01
    2e62:	9f 01       	movw	r18, r30
    2e64:	2f 5f       	subi	r18, 0xFF	; 255
    2e66:	3f 4f       	sbci	r19, 0xFF	; 255
    2e68:	39 83       	std	Y+1, r19	; 0x01
    2e6a:	28 83       	st	Y, r18
    2e6c:	10 83       	st	Z, r17
    2e6e:	06 c0       	rjmp	.+12     	; 0x2e7c <fputc+0x4a>
    2e70:	e8 85       	ldd	r30, Y+8	; 0x08
    2e72:	f9 85       	ldd	r31, Y+9	; 0x09
    2e74:	81 2f       	mov	r24, r17
    2e76:	09 95       	icall
    2e78:	89 2b       	or	r24, r25
    2e7a:	29 f7       	brne	.-54     	; 0x2e46 <fputc+0x14>
    2e7c:	2e 81       	ldd	r18, Y+6	; 0x06
    2e7e:	3f 81       	ldd	r19, Y+7	; 0x07
    2e80:	2f 5f       	subi	r18, 0xFF	; 255
    2e82:	3f 4f       	sbci	r19, 0xFF	; 255
    2e84:	3f 83       	std	Y+7, r19	; 0x07
    2e86:	2e 83       	std	Y+6, r18	; 0x06
    2e88:	81 2f       	mov	r24, r17
    2e8a:	90 2f       	mov	r25, r16
    2e8c:	df 91       	pop	r29
    2e8e:	cf 91       	pop	r28
    2e90:	1f 91       	pop	r17
    2e92:	0f 91       	pop	r16
    2e94:	08 95       	ret

00002e96 <__ultoa_invert>:
    2e96:	fa 01       	movw	r30, r20
    2e98:	aa 27       	eor	r26, r26
    2e9a:	28 30       	cpi	r18, 0x08	; 8
    2e9c:	51 f1       	breq	.+84     	; 0x2ef2 <__ultoa_invert+0x5c>
    2e9e:	20 31       	cpi	r18, 0x10	; 16
    2ea0:	81 f1       	breq	.+96     	; 0x2f02 <__ultoa_invert+0x6c>
    2ea2:	e8 94       	clt
    2ea4:	6f 93       	push	r22
    2ea6:	6e 7f       	andi	r22, 0xFE	; 254
    2ea8:	6e 5f       	subi	r22, 0xFE	; 254
    2eaa:	7f 4f       	sbci	r23, 0xFF	; 255
    2eac:	8f 4f       	sbci	r24, 0xFF	; 255
    2eae:	9f 4f       	sbci	r25, 0xFF	; 255
    2eb0:	af 4f       	sbci	r26, 0xFF	; 255
    2eb2:	b1 e0       	ldi	r27, 0x01	; 1
    2eb4:	3e d0       	rcall	.+124    	; 0x2f32 <__ultoa_invert+0x9c>
    2eb6:	b4 e0       	ldi	r27, 0x04	; 4
    2eb8:	3c d0       	rcall	.+120    	; 0x2f32 <__ultoa_invert+0x9c>
    2eba:	67 0f       	add	r22, r23
    2ebc:	78 1f       	adc	r23, r24
    2ebe:	89 1f       	adc	r24, r25
    2ec0:	9a 1f       	adc	r25, r26
    2ec2:	a1 1d       	adc	r26, r1
    2ec4:	68 0f       	add	r22, r24
    2ec6:	79 1f       	adc	r23, r25
    2ec8:	8a 1f       	adc	r24, r26
    2eca:	91 1d       	adc	r25, r1
    2ecc:	a1 1d       	adc	r26, r1
    2ece:	6a 0f       	add	r22, r26
    2ed0:	71 1d       	adc	r23, r1
    2ed2:	81 1d       	adc	r24, r1
    2ed4:	91 1d       	adc	r25, r1
    2ed6:	a1 1d       	adc	r26, r1
    2ed8:	20 d0       	rcall	.+64     	; 0x2f1a <__ultoa_invert+0x84>
    2eda:	09 f4       	brne	.+2      	; 0x2ede <__ultoa_invert+0x48>
    2edc:	68 94       	set
    2ede:	3f 91       	pop	r19
    2ee0:	2a e0       	ldi	r18, 0x0A	; 10
    2ee2:	26 9f       	mul	r18, r22
    2ee4:	11 24       	eor	r1, r1
    2ee6:	30 19       	sub	r19, r0
    2ee8:	30 5d       	subi	r19, 0xD0	; 208
    2eea:	31 93       	st	Z+, r19
    2eec:	de f6       	brtc	.-74     	; 0x2ea4 <__ultoa_invert+0xe>
    2eee:	cf 01       	movw	r24, r30
    2ef0:	08 95       	ret
    2ef2:	46 2f       	mov	r20, r22
    2ef4:	47 70       	andi	r20, 0x07	; 7
    2ef6:	40 5d       	subi	r20, 0xD0	; 208
    2ef8:	41 93       	st	Z+, r20
    2efa:	b3 e0       	ldi	r27, 0x03	; 3
    2efc:	0f d0       	rcall	.+30     	; 0x2f1c <__ultoa_invert+0x86>
    2efe:	c9 f7       	brne	.-14     	; 0x2ef2 <__ultoa_invert+0x5c>
    2f00:	f6 cf       	rjmp	.-20     	; 0x2eee <__ultoa_invert+0x58>
    2f02:	46 2f       	mov	r20, r22
    2f04:	4f 70       	andi	r20, 0x0F	; 15
    2f06:	40 5d       	subi	r20, 0xD0	; 208
    2f08:	4a 33       	cpi	r20, 0x3A	; 58
    2f0a:	18 f0       	brcs	.+6      	; 0x2f12 <__ultoa_invert+0x7c>
    2f0c:	49 5d       	subi	r20, 0xD9	; 217
    2f0e:	31 fd       	sbrc	r19, 1
    2f10:	40 52       	subi	r20, 0x20	; 32
    2f12:	41 93       	st	Z+, r20
    2f14:	02 d0       	rcall	.+4      	; 0x2f1a <__ultoa_invert+0x84>
    2f16:	a9 f7       	brne	.-22     	; 0x2f02 <__ultoa_invert+0x6c>
    2f18:	ea cf       	rjmp	.-44     	; 0x2eee <__ultoa_invert+0x58>
    2f1a:	b4 e0       	ldi	r27, 0x04	; 4
    2f1c:	a6 95       	lsr	r26
    2f1e:	97 95       	ror	r25
    2f20:	87 95       	ror	r24
    2f22:	77 95       	ror	r23
    2f24:	67 95       	ror	r22
    2f26:	ba 95       	dec	r27
    2f28:	c9 f7       	brne	.-14     	; 0x2f1c <__ultoa_invert+0x86>
    2f2a:	00 97       	sbiw	r24, 0x00	; 0
    2f2c:	61 05       	cpc	r22, r1
    2f2e:	71 05       	cpc	r23, r1
    2f30:	08 95       	ret
    2f32:	9b 01       	movw	r18, r22
    2f34:	ac 01       	movw	r20, r24
    2f36:	0a 2e       	mov	r0, r26
    2f38:	06 94       	lsr	r0
    2f3a:	57 95       	ror	r21
    2f3c:	47 95       	ror	r20
    2f3e:	37 95       	ror	r19
    2f40:	27 95       	ror	r18
    2f42:	ba 95       	dec	r27
    2f44:	c9 f7       	brne	.-14     	; 0x2f38 <__ultoa_invert+0xa2>
    2f46:	62 0f       	add	r22, r18
    2f48:	73 1f       	adc	r23, r19
    2f4a:	84 1f       	adc	r24, r20
    2f4c:	95 1f       	adc	r25, r21
    2f4e:	a0 1d       	adc	r26, r0
    2f50:	08 95       	ret

00002f52 <__prologue_saves__>:
    2f52:	2f 92       	push	r2
    2f54:	3f 92       	push	r3
    2f56:	4f 92       	push	r4
    2f58:	5f 92       	push	r5
    2f5a:	6f 92       	push	r6
    2f5c:	7f 92       	push	r7
    2f5e:	8f 92       	push	r8
    2f60:	9f 92       	push	r9
    2f62:	af 92       	push	r10
    2f64:	bf 92       	push	r11
    2f66:	cf 92       	push	r12
    2f68:	df 92       	push	r13
    2f6a:	ef 92       	push	r14
    2f6c:	ff 92       	push	r15
    2f6e:	0f 93       	push	r16
    2f70:	1f 93       	push	r17
    2f72:	cf 93       	push	r28
    2f74:	df 93       	push	r29
    2f76:	cd b7       	in	r28, 0x3d	; 61
    2f78:	de b7       	in	r29, 0x3e	; 62
    2f7a:	ca 1b       	sub	r28, r26
    2f7c:	db 0b       	sbc	r29, r27
    2f7e:	0f b6       	in	r0, 0x3f	; 63
    2f80:	f8 94       	cli
    2f82:	de bf       	out	0x3e, r29	; 62
    2f84:	0f be       	out	0x3f, r0	; 63
    2f86:	cd bf       	out	0x3d, r28	; 61
    2f88:	09 94       	ijmp

00002f8a <__epilogue_restores__>:
    2f8a:	2a 88       	ldd	r2, Y+18	; 0x12
    2f8c:	39 88       	ldd	r3, Y+17	; 0x11
    2f8e:	48 88       	ldd	r4, Y+16	; 0x10
    2f90:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f92:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f94:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f96:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f98:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f9a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f9c:	b9 84       	ldd	r11, Y+9	; 0x09
    2f9e:	c8 84       	ldd	r12, Y+8	; 0x08
    2fa0:	df 80       	ldd	r13, Y+7	; 0x07
    2fa2:	ee 80       	ldd	r14, Y+6	; 0x06
    2fa4:	fd 80       	ldd	r15, Y+5	; 0x05
    2fa6:	0c 81       	ldd	r16, Y+4	; 0x04
    2fa8:	1b 81       	ldd	r17, Y+3	; 0x03
    2faa:	aa 81       	ldd	r26, Y+2	; 0x02
    2fac:	b9 81       	ldd	r27, Y+1	; 0x01
    2fae:	ce 0f       	add	r28, r30
    2fb0:	d1 1d       	adc	r29, r1
    2fb2:	0f b6       	in	r0, 0x3f	; 63
    2fb4:	f8 94       	cli
    2fb6:	de bf       	out	0x3e, r29	; 62
    2fb8:	0f be       	out	0x3f, r0	; 63
    2fba:	cd bf       	out	0x3d, r28	; 61
    2fbc:	ed 01       	movw	r28, r26
    2fbe:	08 95       	ret

00002fc0 <_exit>:
    2fc0:	f8 94       	cli

00002fc2 <__stop_program>:
    2fc2:	ff cf       	rjmp	.-2      	; 0x2fc2 <__stop_program>
