
bin/Debug/central_console.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000336c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001e0  00800060  0000336c  00003420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000130  00800240  00800240  00003600  2**0
                  ALLOC
  3 .fuse         00000002  00820000  00820000  00003600  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         0000bb74  00000000  00000000  00003604  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00003d7c  00000000  00000000  0000f178  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00012ef4  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__ctors_end>
       4:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
       8:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
       c:	0c 94 cc 09 	jmp	0x1398	; 0x1398 <__vector_3>
      10:	0c 94 66 15 	jmp	0x2acc	; 0x2acc <__vector_4>
      14:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      18:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      1c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      20:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      24:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      28:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      2c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      30:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      34:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      38:	0c 94 b5 06 	jmp	0xd6a	; 0xd6a <__vector_14>
      3c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      40:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      44:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      48:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      4c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      50:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__bad_interrupt>
      54:	be 0a       	sbc	r11, r30
      56:	c1 0a       	sbc	r12, r17
      58:	c4 0a       	sbc	r12, r20
      5a:	c7 0a       	sbc	r12, r23
      5c:	ca 0a       	sbc	r12, r26
      5e:	cd 0a       	sbc	r12, r29
      60:	d0 0a       	sbc	r13, r16
      62:	d3 0a       	sbc	r13, r19
      64:	d6 0a       	sbc	r13, r22
      66:	d9 0a       	sbc	r13, r25
      68:	dc 0a       	sbc	r13, r28
      6a:	df 0a       	sbc	r13, r31
      6c:	e2 0a       	sbc	r14, r18
      6e:	e5 0a       	sbc	r14, r21
      70:	1e 0d       	add	r17, r14
      72:	2e 0d       	add	r18, r14
      74:	42 0d       	add	r20, r2
      76:	5b 0d       	add	r21, r11
      78:	9c 0d       	add	r25, r12
      7a:	c4 0d       	add	r28, r4
      7c:	db 0d       	add	r29, r11
      7e:	ec 0d       	add	r30, r12
      80:	02 0d       	add	r16, r2
      82:	4c 0d       	add	r20, r12

00000084 <m_s2i6>:
      84:	ef 00 93 00 68 01 68 01 00 48 61 b7 61 e3 00        ....h.h..Ha.a..

00000093 <m_s2i5>:
      93:	84 00 ad 00 68 01 81 01 0b a8 6f b3 bf 6f 70 bd     ....h.....o..op.
      a3:	c3 65 20 b3 c3 b7 6f b3 c3 00                       .e ...o...

000000ad <m_s2i4>:
      ad:	93 00 c0 00 68 01 81 01 08 42 c3 e3 61 c0 61 20     ....h....B..a.a 
      bd:	49 44 00                                            ID.

000000c0 <m_s2i3>:
      c0:	ad 00 d6 00 68 01 81 01 04 42 c3 b2 6f 70 20 ba     ....h....B..op .
      d0:	61 bd 61 bb 61 00                                   a.a.a.

000000d6 <m_s2i2>:
      d6:	c0 00 ef 00 68 01 81 01 03 48 61 63 bf 70 6f b9     ....h....Hac.po.
      e6:	ba 61 20 b7 b3 79 ba 61 00                          .a ..y.a.

000000ef <m_s2i1>:
      ef:	d6 00 84 00 68 01 81 01 02 a9 63 bf 2e 20 b3 70     ....h.....c.. .p
      ff:	65 bc 65 bd b8 00                                   e.e...

00000105 <m_s1i7>:
     105:	68 01 1e 01 81 01 81 01 09 41 ba bf b8 b3 bd c3     h........A......
     115:	65 20 b3 c3 b7 6f b3 c3 00                          e ...o...

0000011e <m_s1i6>:
     11e:	05 01 2f 01 81 01 81 01 07 43 6f b2 c3 bf b8 c7     ../......Co.....
	...

0000012f <m_s1i5>:
     12f:	1e 01 3f 01 81 01 81 01 06 43 bf 61 bf 79 63 00     ..?......C.a.yc.

0000013f <m_s1i4>:
     13f:	2f 01 55 01 81 01 81 01 05 43 6f 63 bf 2e 20 be     /.U......Coc.. .
     14f:	61 bc c7 bf b8 00                                   a.....

00000155 <m_s1i3>:
     155:	3f 01 68 01 81 01 81 01 0a 48 61 63 bf 70 6f b9     ?.h......Hac.po.
     165:	ba b8 00                                            ...

00000168 <m_s1i2>:
     168:	55 01 05 01 81 01 77 01 00 42 c3 78 6f e3 00        U.....w..B.xo..

00000177 <m_s1i1>:
     177:	68 01 68 01 81 01 55 01 00 00                       h.h...U...

00000181 <Null_Menu>:
	...

0000018b <strNULL>:
	...

0000018c <__ctors_end>:
     18c:	11 24       	eor	r1, r1
     18e:	1f be       	out	0x3f, r1	; 63
     190:	cf e5       	ldi	r28, 0x5F	; 95
     192:	d8 e0       	ldi	r29, 0x08	; 8
     194:	de bf       	out	0x3e, r29	; 62
     196:	cd bf       	out	0x3d, r28	; 61

00000198 <__do_copy_data>:
     198:	12 e0       	ldi	r17, 0x02	; 2
     19a:	a0 e6       	ldi	r26, 0x60	; 96
     19c:	b0 e0       	ldi	r27, 0x00	; 0
     19e:	ec e6       	ldi	r30, 0x6C	; 108
     1a0:	f3 e3       	ldi	r31, 0x33	; 51
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <__do_copy_data+0x10>
     1a4:	05 90       	lpm	r0, Z+
     1a6:	0d 92       	st	X+, r0
     1a8:	a0 34       	cpi	r26, 0x40	; 64
     1aa:	b1 07       	cpc	r27, r17
     1ac:	d9 f7       	brne	.-10     	; 0x1a4 <__do_copy_data+0xc>

000001ae <__do_clear_bss>:
     1ae:	13 e0       	ldi	r17, 0x03	; 3
     1b0:	a0 e4       	ldi	r26, 0x40	; 64
     1b2:	b2 e0       	ldi	r27, 0x02	; 2
     1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <.do_clear_bss_start>

000001b6 <.do_clear_bss_loop>:
     1b6:	1d 92       	st	X+, r1

000001b8 <.do_clear_bss_start>:
     1b8:	a0 37       	cpi	r26, 0x70	; 112
     1ba:	b1 07       	cpc	r27, r17
     1bc:	e1 f7       	brne	.-8      	; 0x1b6 <.do_clear_bss_loop>
     1be:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <main>
     1c2:	0c 94 b4 19 	jmp	0x3368	; 0x3368 <_exit>

000001c6 <__bad_interrupt>:
     1c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ca <verify_and_set_bit>:
extern volatile uint8_t  channel, send_channel, id, status1, pack_buffer[PACKET_SIZE];
extern volatile uint16_t seep_pointer;


uint8_t verify_and_set_bit(uint8_t byte)
{
     1ca:	1f 93       	push	r17
     1cc:	cf 93       	push	r28
     1ce:	df 93       	push	r29
    const uint8_t index = (byte >> 3) + BITMASK_POINTER;
     1d0:	18 2f       	mov	r17, r24
     1d2:	16 95       	lsr	r17
     1d4:	16 95       	lsr	r17
     1d6:	16 95       	lsr	r17
     1d8:	1e 5e       	subi	r17, 0xEE	; 238
    const uint8_t bit_mask = 1 << (byte & 0x07);
     1da:	87 70       	andi	r24, 0x07	; 7
     1dc:	c1 e0       	ldi	r28, 0x01	; 1
     1de:	d0 e0       	ldi	r29, 0x00	; 0
     1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <verify_and_set_bit+0x1a>
     1e2:	cc 0f       	add	r28, r28
     1e4:	8a 95       	dec	r24
     1e6:	ea f7       	brpl	.-6      	; 0x1e2 <verify_and_set_bit+0x18>
    byte = ds_read_byte(index);
     1e8:	81 2f       	mov	r24, r17
     1ea:	0e 94 39 05 	call	0xa72	; 0xa72 <ds_read_byte>

    if ( byte & bit_mask )
     1ee:	9c 2f       	mov	r25, r28
     1f0:	98 23       	and	r25, r24
     1f2:	39 f4       	brne	.+14     	; 0x202 <verify_and_set_bit+0x38>
        return 0;
    else
    {
        ds_write_byte(index, byte | bit_mask);
     1f4:	6c 2f       	mov	r22, r28
     1f6:	68 2b       	or	r22, r24
     1f8:	81 2f       	mov	r24, r17
     1fa:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <ds_write_byte>
        return 1;
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	01 c0       	rjmp	.+2      	; 0x204 <verify_and_set_bit+0x3a>
    const uint8_t index = (byte >> 3) + BITMASK_POINTER;
    const uint8_t bit_mask = 1 << (byte & 0x07);
    byte = ds_read_byte(index);

    if ( byte & bit_mask )
        return 0;
     202:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
        ds_write_byte(index, byte | bit_mask);
        return 1;
    }
}
     204:	df 91       	pop	r29
     206:	cf 91       	pop	r28
     208:	1f 91       	pop	r17
     20a:	08 95       	ret

0000020c <add_active_call>:
/* Добавляет ID пульта в список активных вызовов, если его там нет */
uint8_t add_active_call(void)
{
    uint8_t find_index = 0, i;

    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     20c:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     20e:	f8 94       	cli
     210:	80 e0       	ldi	r24, 0x00	; 0
    {
// Проверка наличия ID пульта в списке, если есть - функция возвращает 0.
        while ( (active_call_id[find_index] != pack_buffer[2]) && (find_index < n_active_calls) )
     212:	e8 2f       	mov	r30, r24
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	ef 5a       	subi	r30, 0xAF	; 175
     218:	fd 4f       	sbci	r31, 0xFD	; 253
     21a:	20 81       	ld	r18, Z
     21c:	90 91 83 02 	lds	r25, 0x0283
     220:	29 13       	cpse	r18, r25
     222:	07 c0       	rjmp	.+14     	; 0x232 <add_active_call+0x26>
            ++find_index;

        if ( find_index != n_active_calls )
     224:	90 91 4e 02 	lds	r25, 0x024E
     228:	89 17       	cp	r24, r25
     22a:	49 f0       	breq	.+18     	; 0x23e <add_active_call+0x32>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     22c:	4f bf       	out	0x3f, r20	; 63
            return 0;
     22e:	80 e0       	ldi	r24, 0x00	; 0
     230:	08 95       	ret
    uint8_t find_index = 0, i;

    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    {
// Проверка наличия ID пульта в списке, если есть - функция возвращает 0.
        while ( (active_call_id[find_index] != pack_buffer[2]) && (find_index < n_active_calls) )
     232:	90 91 4e 02 	lds	r25, 0x024E
     236:	89 17       	cp	r24, r25
     238:	a8 f7       	brcc	.-22     	; 0x224 <add_active_call+0x18>
            ++find_index;
     23a:	8f 5f       	subi	r24, 0xFF	; 255
     23c:	ea cf       	rjmp	.-44     	; 0x212 <add_active_call+0x6>

        if ( find_index != n_active_calls )
            return 0;

// Добавляет ID пульта в список, если список переполнен - записывает по кругу.
        if( n_active_calls < N_ACTIVE_CALL_MAX )
     23e:	80 91 4e 02 	lds	r24, 0x024E
     242:	88 31       	cpi	r24, 0x18	; 24
     244:	68 f4       	brcc	.+26     	; 0x260 <add_active_call+0x54>
            active_call_id[n_active_calls++] = pack_buffer[2];
     246:	e0 91 4e 02 	lds	r30, 0x024E
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	8e 0f       	add	r24, r30
     24e:	80 93 4e 02 	sts	0x024E, r24
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	80 91 83 02 	lds	r24, 0x0283
     258:	ef 5a       	subi	r30, 0xAF	; 175
     25a:	fd 4f       	sbci	r31, 0xFD	; 253
     25c:	80 83       	st	Z, r24
     25e:	16 c0       	rjmp	.+44     	; 0x28c <add_active_call+0x80>

        if ( find_index != n_active_calls )
            return 0;

// Добавляет ID пульта в список, если список переполнен - записывает по кругу.
        if( n_active_calls < N_ACTIVE_CALL_MAX )
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	9c 01       	movw	r18, r24
     266:	2f 5f       	subi	r18, 0xFF	; 255
     268:	3f 4f       	sbci	r19, 0xFF	; 255
            active_call_id[n_active_calls++] = pack_buffer[2];
        else
        {
            for ( i=0 ; i<(N_ACTIVE_CALL_MAX-1) ; ++i )
                active_call_id[i] = active_call_id[i+1];
     26a:	f9 01       	movw	r30, r18
     26c:	ef 5a       	subi	r30, 0xAF	; 175
     26e:	fd 4f       	sbci	r31, 0xFD	; 253
     270:	50 81       	ld	r21, Z
     272:	fc 01       	movw	r30, r24
     274:	ef 5a       	subi	r30, 0xAF	; 175
     276:	fd 4f       	sbci	r31, 0xFD	; 253
     278:	50 83       	st	Z, r21
// Добавляет ID пульта в список, если список переполнен - записывает по кругу.
        if( n_active_calls < N_ACTIVE_CALL_MAX )
            active_call_id[n_active_calls++] = pack_buffer[2];
        else
        {
            for ( i=0 ; i<(N_ACTIVE_CALL_MAX-1) ; ++i )
     27a:	27 31       	cpi	r18, 0x17	; 23
     27c:	31 05       	cpc	r19, r1
     27e:	11 f0       	breq	.+4      	; 0x284 <add_active_call+0x78>
     280:	c9 01       	movw	r24, r18
     282:	f0 cf       	rjmp	.-32     	; 0x264 <add_active_call+0x58>
                active_call_id[i] = active_call_id[i+1];

            active_call_id[N_ACTIVE_CALL_MAX-1] = pack_buffer[2];
     284:	80 91 83 02 	lds	r24, 0x0283
     288:	80 93 68 02 	sts	0x0268, r24
     28c:	4f bf       	out	0x3f, r20	; 63
        }
    }
    return 1;
     28e:	81 e0       	ldi	r24, 0x01	; 1
}
     290:	08 95       	ret

00000292 <remove_active_call>:
/* Удалят ID из списка, сдвигая писок к началу */
uint8_t remove_active_call(void)
{
    uint8_t find_index = 0;

    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     292:	3f b7       	in	r19, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     294:	f8 94       	cli
     296:	20 e0       	ldi	r18, 0x00	; 0
    {
// Проверяет наличие ID в списке, если нету - возвращает 0.
        while ( (active_call_id[find_index] != pack_buffer[2]) && (find_index < n_active_calls) )
     298:	e2 2f       	mov	r30, r18
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	ef 5a       	subi	r30, 0xAF	; 175
     29e:	fd 4f       	sbci	r31, 0xFD	; 253
     2a0:	90 81       	ld	r25, Z
     2a2:	80 91 83 02 	lds	r24, 0x0283
     2a6:	98 13       	cpse	r25, r24
     2a8:	07 c0       	rjmp	.+14     	; 0x2b8 <remove_active_call+0x26>
            ++find_index;

        if (find_index == n_active_calls)
     2aa:	80 91 4e 02 	lds	r24, 0x024E
     2ae:	28 13       	cpse	r18, r24
     2b0:	09 c0       	rjmp	.+18     	; 0x2c4 <remove_active_call+0x32>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     2b2:	3f bf       	out	0x3f, r19	; 63
            return 0;
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	08 95       	ret
    uint8_t find_index = 0;

    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    {
// Проверяет наличие ID в списке, если нету - возвращает 0.
        while ( (active_call_id[find_index] != pack_buffer[2]) && (find_index < n_active_calls) )
     2b8:	80 91 4e 02 	lds	r24, 0x024E
     2bc:	28 17       	cp	r18, r24
     2be:	a8 f7       	brcc	.-22     	; 0x2aa <remove_active_call+0x18>
            ++find_index;
     2c0:	2f 5f       	subi	r18, 0xFF	; 255
     2c2:	ea cf       	rjmp	.-44     	; 0x298 <remove_active_call+0x6>

        if (find_index == n_active_calls)
            return 0;

// Если есть - удаляет его из списка, сдвигая список к началу. Возвращает 1.
        --n_active_calls;
     2c4:	80 91 4e 02 	lds	r24, 0x024E
     2c8:	81 50       	subi	r24, 0x01	; 1
     2ca:	80 93 4e 02 	sts	0x024E, r24

        for( ; find_index < n_active_calls ; ++find_index )
     2ce:	80 91 4e 02 	lds	r24, 0x024E
     2d2:	28 17       	cp	r18, r24
     2d4:	60 f4       	brcc	.+24     	; 0x2ee <remove_active_call+0x5c>
            active_call_id[find_index] = active_call_id[find_index+1];
     2d6:	82 2f       	mov	r24, r18
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	fc 01       	movw	r30, r24
     2dc:	ee 5a       	subi	r30, 0xAE	; 174
     2de:	fd 4f       	sbci	r31, 0xFD	; 253
     2e0:	40 81       	ld	r20, Z
     2e2:	fc 01       	movw	r30, r24
     2e4:	ef 5a       	subi	r30, 0xAF	; 175
     2e6:	fd 4f       	sbci	r31, 0xFD	; 253
     2e8:	40 83       	st	Z, r20
            return 0;

// Если есть - удаляет его из списка, сдвигая список к началу. Возвращает 1.
        --n_active_calls;

        for( ; find_index < n_active_calls ; ++find_index )
     2ea:	2f 5f       	subi	r18, 0xFF	; 255
     2ec:	f0 cf       	rjmp	.-32     	; 0x2ce <remove_active_call+0x3c>
     2ee:	3f bf       	out	0x3f, r19	; 63
            active_call_id[find_index] = active_call_id[find_index+1];
    }
    return 1;
     2f0:	81 e0       	ldi	r24, 0x01	; 1
}
     2f2:	08 95       	ret

000002f4 <seep_call_write>:


/* Записывает данные во внешнюю EEPROM. */
void seep_call_write(void)
{
     2f4:	1f 93       	push	r17
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
     2fa:	cd b7       	in	r28, 0x3d	; 61
     2fc:	de b7       	in	r29, 0x3e	; 62
     2fe:	2f 97       	sbiw	r28, 0x0f	; 15
     300:	0f b6       	in	r0, 0x3f	; 63
     302:	f8 94       	cli
     304:	de bf       	out	0x3e, r29	; 62
     306:	0f be       	out	0x3f, r0	; 63
     308:	cd bf       	out	0x3d, r28	; 61
    uint8_t i, event_buffer[RECORD_SIZE], time[7];

    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     30a:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     30c:	f8 94       	cli
    {
        if ( (seep_pointer + RECORD_SIZE) >= (SEEP_MAX_POINTER) ) {
     30e:	80 91 ba 02 	lds	r24, 0x02BA
     312:	90 91 bb 02 	lds	r25, 0x02BB
     316:	08 96       	adiw	r24, 0x08	; 8
     318:	8f 3f       	cpi	r24, 0xFF	; 255
     31a:	99 4f       	sbci	r25, 0xF9	; 249
     31c:	48 f0       	brcs	.+18     	; 0x330 <seep_call_write+0x3c>
            status1 = '!';
     31e:	81 e2       	ldi	r24, 0x21	; 33
     320:	80 93 b7 02 	sts	0x02B7, r24
            seep_pointer = 0x0008;
     324:	88 e0       	ldi	r24, 0x08	; 8
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	90 93 bb 02 	sts	0x02BB, r25
     32c:	80 93 ba 02 	sts	0x02BA, r24
        }

        event_buffer[0] = pack_buffer[1];      // вызов/отмена
     330:	80 91 82 02 	lds	r24, 0x0282
     334:	89 83       	std	Y+1, r24	; 0x01
        event_buffer[1] = pack_buffer[2];      // id пакета
     336:	80 91 83 02 	lds	r24, 0x0283
     33a:	8a 83       	std	Y+2, r24	; 0x02

        ds_read_time(time);
     33c:	ce 01       	movw	r24, r28
     33e:	09 96       	adiw	r24, 0x09	; 9
     340:	0e 94 29 06 	call	0xc52	; 0xc52 <ds_read_time>
        for ( i = 2 ; i < 5 ; ++i ) event_buffer[i] = time[8-i];
     344:	8f 85       	ldd	r24, Y+15	; 0x0f
     346:	8b 83       	std	Y+3, r24	; 0x03
     348:	8e 85       	ldd	r24, Y+14	; 0x0e
     34a:	8c 83       	std	Y+4, r24	; 0x04
     34c:	8d 85       	ldd	r24, Y+13	; 0x0d
     34e:	8d 83       	std	Y+5, r24	; 0x05
        for ( i = 5 ; i < 8 ; ++i ) event_buffer[i] = time[7-i];
     350:	8b 85       	ldd	r24, Y+11	; 0x0b
     352:	8e 83       	std	Y+6, r24	; 0x06
     354:	8a 85       	ldd	r24, Y+10	; 0x0a
     356:	8f 83       	std	Y+7, r24	; 0x07
     358:	89 85       	ldd	r24, Y+9	; 0x09
     35a:	88 87       	std	Y+8, r24	; 0x08

        seep_pointer += RECORD_SIZE;
     35c:	80 91 ba 02 	lds	r24, 0x02BA
     360:	90 91 bb 02 	lds	r25, 0x02BB
     364:	08 96       	adiw	r24, 0x08	; 8
     366:	90 93 bb 02 	sts	0x02BB, r25
     36a:	80 93 ba 02 	sts	0x02BA, r24

        ds_write_byte(SEEP_HPOINTER, (uint8_t)(seep_pointer>>8));
     36e:	80 91 ba 02 	lds	r24, 0x02BA
     372:	90 91 bb 02 	lds	r25, 0x02BB
     376:	69 2f       	mov	r22, r25
     378:	8f e0       	ldi	r24, 0x0F	; 15
     37a:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <ds_write_byte>
        ds_write_byte(SEEP_LPOINTER, (uint8_t)(seep_pointer&0x00ff));
     37e:	60 91 ba 02 	lds	r22, 0x02BA
     382:	70 91 bb 02 	lds	r23, 0x02BB
     386:	80 e1       	ldi	r24, 0x10	; 16
     388:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <ds_write_byte>

        seep_write(seep_pointer-RECORD_SIZE, event_buffer, 10);
     38c:	80 91 ba 02 	lds	r24, 0x02BA
     390:	90 91 bb 02 	lds	r25, 0x02BB
     394:	4a e0       	ldi	r20, 0x0A	; 10
     396:	be 01       	movw	r22, r28
     398:	6f 5f       	subi	r22, 0xFF	; 255
     39a:	7f 4f       	sbci	r23, 0xFF	; 255
     39c:	08 97       	sbiw	r24, 0x08	; 8
     39e:	0e 94 4f 03 	call	0x69e	; 0x69e <seep_write>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3a2:	1f bf       	out	0x3f, r17	; 63
    }
}
     3a4:	2f 96       	adiw	r28, 0x0f	; 15
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	f8 94       	cli
     3aa:	de bf       	out	0x3e, r29	; 62
     3ac:	0f be       	out	0x3f, r0	; 63
     3ae:	cd bf       	out	0x3d, r28	; 61
     3b0:	df 91       	pop	r29
     3b2:	cf 91       	pop	r28
     3b4:	1f 91       	pop	r17
     3b6:	08 95       	ret

000003b8 <display_call>:


/* Отображает событие на экран */
void display_call(void)
{
     3b8:	0f 93       	push	r16
     3ba:	1f 93       	push	r17
     3bc:	cf 93       	push	r28
     3be:	df 93       	push	r29
     3c0:	cd b7       	in	r28, 0x3d	; 61
     3c2:	de b7       	in	r29, 0x3e	; 62
     3c4:	60 97       	sbiw	r28, 0x10	; 16
     3c6:	0f b6       	in	r0, 0x3f	; 63
     3c8:	f8 94       	cli
     3ca:	de bf       	out	0x3e, r29	; 62
     3cc:	0f be       	out	0x3f, r0	; 63
     3ce:	cd bf       	out	0x3d, r28	; 61
    char lcd_buffer[16];

    if( n_active_calls > 1 )
     3d0:	80 91 4e 02 	lds	r24, 0x024E
     3d4:	8e 01       	movw	r16, r28
     3d6:	0f 5f       	subi	r16, 0xFF	; 255
     3d8:	1f 4f       	sbci	r17, 0xFF	; 255
     3da:	82 30       	cpi	r24, 0x02	; 2
     3dc:	38 f0       	brcs	.+14     	; 0x3ec <display_call+0x34>
        sprintf(lcd_buffer, "A\272\277\270\263\275\303x \xb3\xc3\xb7. %d", n_active_calls);
     3de:	80 91 4e 02 	lds	r24, 0x024E
     3e2:	1f 92       	push	r1
     3e4:	8f 93       	push	r24
     3e6:	84 e7       	ldi	r24, 0x74	; 116
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	0a c0       	rjmp	.+20     	; 0x400 <display_call+0x48>
    else if (n_active_calls == 1)
     3ec:	80 91 4e 02 	lds	r24, 0x024E
     3f0:	81 30       	cpi	r24, 0x01	; 1
     3f2:	99 f4       	brne	.+38     	; 0x41a <display_call+0x62>
        sprintf(lcd_buffer, "ID = %03d \263\303\267o\263", active_call_id[0]);
     3f4:	80 91 51 02 	lds	r24, 0x0251
     3f8:	1f 92       	push	r1
     3fa:	8f 93       	push	r24
     3fc:	85 e8       	ldi	r24, 0x85	; 133
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	9f 93       	push	r25
     402:	8f 93       	push	r24
     404:	1f 93       	push	r17
     406:	0f 93       	push	r16
     408:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <sprintf>
     40c:	0f 90       	pop	r0
     40e:	0f 90       	pop	r0
     410:	0f 90       	pop	r0
     412:	0f 90       	pop	r0
     414:	0f 90       	pop	r0
     416:	0f 90       	pop	r0
     418:	01 c0       	rjmp	.+2      	; 0x41c <display_call+0x64>
    else
        lcd_buffer[0] = '\0';
     41a:	19 82       	std	Y+1, r1	; 0x01

    lcd_cleanstr(1);
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	0e 94 70 08 	call	0x10e0	; 0x10e0 <lcd_cleanstr>
    lcd_puts(lcd_buffer);
     422:	c8 01       	movw	r24, r16
     424:	0e 94 55 08 	call	0x10aa	; 0x10aa <lcd_puts>
}
     428:	60 96       	adiw	r28, 0x10	; 16
     42a:	0f b6       	in	r0, 0x3f	; 63
     42c:	f8 94       	cli
     42e:	de bf       	out	0x3e, r29	; 62
     430:	0f be       	out	0x3f, r0	; 63
     432:	cd bf       	out	0x3d, r28	; 61
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	1f 91       	pop	r17
     43a:	0f 91       	pop	r16
     43c:	08 95       	ret

0000043e <send_ackn>:



void send_ackn(void)
{
    pack_buffer[0+HEADER_NBYTES] = BUTTON;
     43e:	80 e5       	ldi	r24, 0x50	; 80
     440:	80 93 85 02 	sts	0x0285, r24
    pack_buffer[1+HEADER_NBYTES] = ACKN;
     444:	83 e0       	ldi	r24, 0x03	; 3
     446:	80 93 86 02 	sts	0x0286, r24
    pack_buffer[2+HEADER_NBYTES] = pack_buffer[2];
     44a:	80 91 83 02 	lds	r24, 0x0283
     44e:	80 93 87 02 	sts	0x0287, r24

    rfm12_transmit_pack(3);
     452:	83 e0       	ldi	r24, 0x03	; 3
     454:	0c 94 ea 08 	jmp	0x11d4	; 0x11d4 <rfm12_transmit_pack>

00000458 <send_id>:
}


void send_id(void)
{
    pack_buffer[0+HEADER_NBYTES] = BUTTON;
     458:	80 e5       	ldi	r24, 0x50	; 80
     45a:	80 93 85 02 	sts	0x0285, r24
    pack_buffer[1+HEADER_NBYTES] = ID_GET;
     45e:	89 e4       	ldi	r24, 0x49	; 73
     460:	80 93 86 02 	sts	0x0286, r24
    pack_buffer[2+HEADER_NBYTES] = id;
     464:	80 91 61 00 	lds	r24, 0x0061
     468:	80 93 87 02 	sts	0x0287, r24
    pack_buffer[3+HEADER_NBYTES] = send_channel;
     46c:	80 91 62 00 	lds	r24, 0x0062
     470:	80 93 88 02 	sts	0x0288, r24

    if( verify_and_set_bit(id) )                     // если такой id раньше не добавлялся
     474:	80 91 61 00 	lds	r24, 0x0061
     478:	0e 94 e5 00 	call	0x1ca	; 0x1ca <verify_and_set_bit>
     47c:	88 23       	and	r24, r24
     47e:	c1 f0       	breq	.+48     	; 0x4b0 <send_id+0x58>
    {
        ++nbuttons;                                     // инкремент счетчика добавленых пультов
     480:	80 91 4f 02 	lds	r24, 0x024F
     484:	90 91 50 02 	lds	r25, 0x0250
     488:	01 96       	adiw	r24, 0x01	; 1
     48a:	90 93 50 02 	sts	0x0250, r25
     48e:	80 93 4f 02 	sts	0x024F, r24

        ds_write_byte(NBUTTONS_HPOINTER, (uint8_t)(nbuttons>>8));
     492:	80 91 4f 02 	lds	r24, 0x024F
     496:	90 91 50 02 	lds	r25, 0x0250
     49a:	69 2f       	mov	r22, r25
     49c:	8c e0       	ldi	r24, 0x0C	; 12
     49e:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <ds_write_byte>
        ds_write_byte(NBUTTONS_LPOINTER, (uint8_t)nbuttons);
     4a2:	60 91 4f 02 	lds	r22, 0x024F
     4a6:	70 91 50 02 	lds	r23, 0x0250
     4aa:	8d e0       	ldi	r24, 0x0D	; 13
     4ac:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <ds_write_byte>
    }

    rfm12_transmit_pack(4);
     4b0:	84 e0       	ldi	r24, 0x04	; 4
     4b2:	0c 94 ea 08 	jmp	0x11d4	; 0x11d4 <rfm12_transmit_pack>

000004b6 <send_active_call>:

void send_active_call(void)
{
    uint8_t i = HEADER_NBYTES;

    pack_buffer[i++] = PAGER;
     4b6:	83 e7       	ldi	r24, 0x73	; 115
     4b8:	80 93 85 02 	sts	0x0285, r24
    pack_buffer[i++] = EVENT;
     4bc:	8d e4       	ldi	r24, 0x4D	; 77
     4be:	80 93 86 02 	sts	0x0286, r24
     4c2:	46 e0       	ldi	r20, 0x06	; 6

    for ( ; i<(n_active_calls+HEADER_NBYTES+2) ; ++i )    pack_buffer[i] = active_call_id[i-2-HEADER_NBYTES];
     4c4:	20 91 4e 02 	lds	r18, 0x024E
     4c8:	84 2f       	mov	r24, r20
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	2b 5f       	subi	r18, 0xFB	; 251
     4d0:	3f 4f       	sbci	r19, 0xFF	; 255
     4d2:	28 17       	cp	r18, r24
     4d4:	39 07       	cpc	r19, r25
     4d6:	54 f0       	brlt	.+20     	; 0x4ec <send_active_call+0x36>
     4d8:	fc 01       	movw	r30, r24
     4da:	e5 5b       	subi	r30, 0xB5	; 181
     4dc:	fd 4f       	sbci	r31, 0xFD	; 253
     4de:	20 81       	ld	r18, Z
     4e0:	fc 01       	movw	r30, r24
     4e2:	ef 57       	subi	r30, 0x7F	; 127
     4e4:	fd 4f       	sbci	r31, 0xFD	; 253
     4e6:	20 83       	st	Z, r18
     4e8:	4f 5f       	subi	r20, 0xFF	; 255
     4ea:	ec cf       	rjmp	.-40     	; 0x4c4 <send_active_call+0xe>

    rfm12_transmit_pack(n_active_calls+2);
     4ec:	80 91 4e 02 	lds	r24, 0x024E
     4f0:	8e 5f       	subi	r24, 0xFE	; 254
     4f2:	0c 94 ea 08 	jmp	0x11d4	; 0x11d4 <rfm12_transmit_pack>

000004f6 <send_time>:
}


void send_time(void)
{
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	cd b7       	in	r28, 0x3d	; 61
     4fc:	de b7       	in	r29, 0x3e	; 62
     4fe:	27 97       	sbiw	r28, 0x07	; 7
     500:	0f b6       	in	r0, 0x3f	; 63
     502:	f8 94       	cli
     504:	de bf       	out	0x3e, r29	; 62
     506:	0f be       	out	0x3f, r0	; 63
     508:	cd bf       	out	0x3d, r28	; 61
    uint8_t time[7], i = HEADER_NBYTES;

    ds_read_time(time);
     50a:	ce 01       	movw	r24, r28
     50c:	01 96       	adiw	r24, 0x01	; 1
     50e:	0e 94 29 06 	call	0xc52	; 0xc52 <ds_read_time>

    pack_buffer[i++] = PAGER;
     512:	83 e7       	ldi	r24, 0x73	; 115
     514:	80 93 85 02 	sts	0x0285, r24
    pack_buffer[i++] = TIME;
     518:	83 e6       	ldi	r24, 0x63	; 99
     51a:	80 93 86 02 	sts	0x0286, r24
     51e:	fe 01       	movw	r30, r28
     520:	31 96       	adiw	r30, 0x01	; 1
     522:	86 e0       	ldi	r24, 0x06	; 6
     524:	90 e0       	ldi	r25, 0x00	; 0

    for ( ; i<(9+HEADER_NBYTES) ; ++i ) pack_buffer[i] = time[i-2-HEADER_NBYTES];
     526:	21 91       	ld	r18, Z+
     528:	dc 01       	movw	r26, r24
     52a:	af 57       	subi	r26, 0x7F	; 127
     52c:	bd 4f       	sbci	r27, 0xFD	; 253
     52e:	2c 93       	st	X, r18
     530:	01 96       	adiw	r24, 0x01	; 1
     532:	8d 30       	cpi	r24, 0x0D	; 13
     534:	91 05       	cpc	r25, r1
     536:	b9 f7       	brne	.-18     	; 0x526 <send_time+0x30>

    rfm12_transmit_pack(9);
     538:	89 e0       	ldi	r24, 0x09	; 9
     53a:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <rfm12_transmit_pack>
}
     53e:	27 96       	adiw	r28, 0x07	; 7
     540:	0f b6       	in	r0, 0x3f	; 63
     542:	f8 94       	cli
     544:	de bf       	out	0x3e, r29	; 62
     546:	0f be       	out	0x3f, r0	; 63
     548:	cd bf       	out	0x3d, r28	; 61
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
     54e:	08 95       	ret

00000550 <seep_i2c_init>:



void seep_i2c_init(void)
{
    SEEP_I2C_DDR |= (1<<SEEP_SCL) | (1<<SEEP_SDA);
     550:	8a b3       	in	r24, 0x1a	; 26
     552:	80 6c       	ori	r24, 0xC0	; 192
     554:	8a bb       	out	0x1a, r24	; 26
    SEEP_I2C_PORT |= (1<<SEEP_SCL) | (1<<SEEP_SDA);
     556:	8b b3       	in	r24, 0x1b	; 27
     558:	80 6c       	ori	r24, 0xC0	; 192
     55a:	8b bb       	out	0x1b, r24	; 27
     55c:	08 95       	ret

0000055e <seep_i2c_start>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	8a 95       	dec	r24
     562:	f1 f7       	brne	.-4      	; 0x560 <seep_i2c_start+0x2>


void seep_i2c_start(void)
{
    _delay_us(SEEP_I2C_TIME4);
    SEEP_I2C_PORT &= ~(1<<SEEP_SDA);
     564:	de 98       	cbi	0x1b, 6	; 27
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	8a 95       	dec	r24
     56a:	f1 f7       	brne	.-4      	; 0x568 <seep_i2c_start+0xa>
    _delay_us(SEEP_I2C_TIME4);
    SEEP_I2C_PORT &= ~(1<<SEEP_SCL);
     56c:	df 98       	cbi	0x1b, 7	; 27
     56e:	82 e0       	ldi	r24, 0x02	; 2
     570:	8a 95       	dec	r24
     572:	f1 f7       	brne	.-4      	; 0x570 <seep_i2c_start+0x12>
     574:	08 95       	ret

00000576 <seep_i2c_stop>:
}


void seep_i2c_stop(void)
{
    SEEP_I2C_PORT &= ~(1<<SEEP_SDA);
     576:	de 98       	cbi	0x1b, 6	; 27
     578:	82 e0       	ldi	r24, 0x02	; 2
     57a:	8a 95       	dec	r24
     57c:	f1 f7       	brne	.-4      	; 0x57a <seep_i2c_stop+0x4>
    _delay_us(SEEP_I2C_TIME2);
    SEEP_I2C_PORT |= (1<<SEEP_SCL);
     57e:	df 9a       	sbi	0x1b, 7	; 27
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	8a 95       	dec	r24
     584:	f1 f7       	brne	.-4      	; 0x582 <seep_i2c_stop+0xc>
    _delay_us(SEEP_I2C_TIME4);
    SEEP_I2C_PORT |= (1<<SEEP_SDA);
     586:	de 9a       	sbi	0x1b, 6	; 27
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	8a 95       	dec	r24
     58c:	f1 f7       	brne	.-4      	; 0x58a <seep_i2c_stop+0x14>
     58e:	08 95       	ret

00000590 <seep_i2c_write_ack>:
}


void seep_i2c_write_ack(void)
{
    SEEP_I2C_DDR |= (1<<SEEP_SDA);
     590:	d6 9a       	sbi	0x1a, 6	; 26
    SEEP_I2C_PORT &= ~(1<<SEEP_SDA);
     592:	de 98       	cbi	0x1b, 6	; 27
     594:	82 e0       	ldi	r24, 0x02	; 2
     596:	8a 95       	dec	r24
     598:	f1 f7       	brne	.-4      	; 0x596 <seep_i2c_write_ack+0x6>

    _delay_us(SEEP_I2C_TIME2);
    SEEP_I2C_PORT |= (1<<SEEP_SCL);
     59a:	df 9a       	sbi	0x1b, 7	; 27
     59c:	82 e0       	ldi	r24, 0x02	; 2
     59e:	8a 95       	dec	r24
     5a0:	f1 f7       	brne	.-4      	; 0x59e <seep_i2c_write_ack+0xe>
    _delay_us(SEEP_I2C_TIME2);
    SEEP_I2C_PORT &= ~(1<<SEEP_SCL);
     5a2:	df 98       	cbi	0x1b, 7	; 27
    SEEP_I2C_PORT |= (1<<SEEP_SDA);
     5a4:	de 9a       	sbi	0x1b, 6	; 27
     5a6:	08 95       	ret

000005a8 <seep_i2c_read_ack>:

uint8_t seep_i2c_read_ack(void)
{
    uint8_t ack;

    SEEP_I2C_DDR &= ~(1<<SEEP_SDA);
     5a8:	d6 98       	cbi	0x1a, 6	; 26
    SEEP_I2C_PORT |= (1<<SEEP_SDA);
     5aa:	de 9a       	sbi	0x1b, 6	; 27
     5ac:	82 e0       	ldi	r24, 0x02	; 2
     5ae:	8a 95       	dec	r24
     5b0:	f1 f7       	brne	.-4      	; 0x5ae <seep_i2c_read_ack+0x6>
    _delay_us(SEEP_I2C_TIME2);

    SEEP_I2C_PORT |= (1<<SEEP_SCL);
     5b2:	df 9a       	sbi	0x1b, 7	; 27
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	8a 95       	dec	r24
     5b8:	f1 f7       	brne	.-4      	; 0x5b6 <seep_i2c_read_ack+0xe>

    _delay_us(SEEP_I2C_TIME4);
    ack = SEEP_I2C_PIN & (1<<SEEP_SDA);
     5ba:	89 b3       	in	r24, 0x19	; 25
     5bc:	91 e0       	ldi	r25, 0x01	; 1
     5be:	9a 95       	dec	r25
     5c0:	f1 f7       	brne	.-4      	; 0x5be <seep_i2c_read_ack+0x16>
    _delay_us(SEEP_I2C_TIME4);

    SEEP_I2C_PORT &= ~(1<<SEEP_SCL);
     5c2:	df 98       	cbi	0x1b, 7	; 27
     5c4:	92 e0       	ldi	r25, 0x02	; 2
     5c6:	9a 95       	dec	r25
     5c8:	f1 f7       	brne	.-4      	; 0x5c6 <seep_i2c_read_ack+0x1e>
    _delay_us(SEEP_I2C_TIME2);
    SEEP_I2C_DDR |= (1<<SEEP_SDA);
     5ca:	d6 9a       	sbi	0x1a, 6	; 26

    if (ack)
        return 1;
    else
        return 0;
}
     5cc:	86 fb       	bst	r24, 6
     5ce:	88 27       	eor	r24, r24
     5d0:	80 f9       	bld	r24, 0
     5d2:	08 95       	ret

000005d4 <seep_i2c_write_byte>:


/* Отправляет один байт по I2C. */

void seep_i2c_write_byte( uint8_t byte )
{
     5d4:	28 e0       	ldi	r18, 0x08	; 8
     5d6:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t mask = 0x80;
     5d8:	90 e8       	ldi	r25, 0x80	; 128
     5da:	52 e0       	ldi	r21, 0x02	; 2

    while ( mask )
    {
        if (mask & byte)    SEEP_I2C_PORT |= (1<<SEEP_SDA);
     5dc:	49 2f       	mov	r20, r25
     5de:	48 23       	and	r20, r24
     5e0:	11 f0       	breq	.+4      	; 0x5e6 <seep_i2c_write_byte+0x12>
     5e2:	de 9a       	sbi	0x1b, 6	; 27
     5e4:	01 c0       	rjmp	.+2      	; 0x5e8 <seep_i2c_write_byte+0x14>
        else                SEEP_I2C_PORT &= ~(1<<SEEP_SDA);
     5e6:	de 98       	cbi	0x1b, 6	; 27
        mask >>= 1;
     5e8:	96 95       	lsr	r25
     5ea:	45 2f       	mov	r20, r21
     5ec:	4a 95       	dec	r20
     5ee:	f1 f7       	brne	.-4      	; 0x5ec <seep_i2c_write_byte+0x18>

        _delay_us(SEEP_I2C_TIME2);
        SEEP_I2C_PORT |= (1<<SEEP_SCL);
     5f0:	df 9a       	sbi	0x1b, 7	; 27
     5f2:	45 2f       	mov	r20, r21
     5f4:	4a 95       	dec	r20
     5f6:	f1 f7       	brne	.-4      	; 0x5f4 <seep_i2c_write_byte+0x20>
        _delay_us(SEEP_I2C_TIME2);
        SEEP_I2C_PORT &= ~(1<<SEEP_SCL);
     5f8:	df 98       	cbi	0x1b, 7	; 27
     5fa:	21 50       	subi	r18, 0x01	; 1
     5fc:	31 09       	sbc	r19, r1

void seep_i2c_write_byte( uint8_t byte )
{
    uint8_t mask = 0x80;

    while ( mask )
     5fe:	21 15       	cp	r18, r1
     600:	31 05       	cpc	r19, r1
     602:	61 f7       	brne	.-40     	; 0x5dc <seep_i2c_write_byte+0x8>
        _delay_us(SEEP_I2C_TIME2);
        SEEP_I2C_PORT |= (1<<SEEP_SCL);
        _delay_us(SEEP_I2C_TIME2);
        SEEP_I2C_PORT &= ~(1<<SEEP_SCL);
    }
}
     604:	08 95       	ret

00000606 <seep_i2c_read_byte>:

uint8_t seep_i2c_read_byte(void)
{
    uint8_t byte = 0, mask = 0x80;

    SEEP_I2C_DDR &= ~(1<<SEEP_SDA);
     606:	d6 98       	cbi	0x1a, 6	; 26
     608:	28 e0       	ldi	r18, 0x08	; 8
     60a:	30 e0       	ldi	r19, 0x00	; 0

/* функция чтения байта по I2C, возвращает прочитаный байт */

uint8_t seep_i2c_read_byte(void)
{
    uint8_t byte = 0, mask = 0x80;
     60c:	90 e8       	ldi	r25, 0x80	; 128
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	62 e0       	ldi	r22, 0x02	; 2
     612:	51 e0       	ldi	r21, 0x01	; 1
     614:	46 2f       	mov	r20, r22
     616:	4a 95       	dec	r20
     618:	f1 f7       	brne	.-4      	; 0x616 <seep_i2c_read_byte+0x10>
    SEEP_I2C_DDR &= ~(1<<SEEP_SDA);

    while ( mask )
    {
        _delay_us(SEEP_I2C_TIME2);
        SEEP_I2C_PORT |= (1<<SEEP_SCL);
     61a:	df 9a       	sbi	0x1b, 7	; 27
     61c:	45 2f       	mov	r20, r21
     61e:	4a 95       	dec	r20
     620:	f1 f7       	brne	.-4      	; 0x61e <seep_i2c_read_byte+0x18>
        _delay_us(SEEP_I2C_TIME4);

        if (SEEP_I2C_PIN & (1<<SEEP_SDA))
     622:	ce 99       	sbic	0x19, 6	; 25
            byte |= mask;
     624:	89 2b       	or	r24, r25
        mask >>= 1;
     626:	96 95       	lsr	r25
     628:	45 2f       	mov	r20, r21
     62a:	4a 95       	dec	r20
     62c:	f1 f7       	brne	.-4      	; 0x62a <seep_i2c_read_byte+0x24>

        _delay_us(SEEP_I2C_TIME4);
        SEEP_I2C_PORT &= ~(1<<SEEP_SCL);
     62e:	df 98       	cbi	0x1b, 7	; 27
     630:	21 50       	subi	r18, 0x01	; 1
     632:	31 09       	sbc	r19, r1
{
    uint8_t byte = 0, mask = 0x80;

    SEEP_I2C_DDR &= ~(1<<SEEP_SDA);

    while ( mask )
     634:	21 15       	cp	r18, r1
     636:	31 05       	cpc	r19, r1
     638:	69 f7       	brne	.-38     	; 0x614 <seep_i2c_read_byte+0xe>
        mask >>= 1;

        _delay_us(SEEP_I2C_TIME4);
        SEEP_I2C_PORT &= ~(1<<SEEP_SCL);
    }
    SEEP_I2C_DDR |= (1<<SEEP_SDA);
     63a:	d6 9a       	sbi	0x1a, 6	; 26

    return byte;
}
     63c:	08 95       	ret

0000063e <seep_write_byte>:


/* Запись нескольких одного байта по I2C. Возвращает значение > 0 если нет связи. */

uint8_t seep_write_byte( uint16_t address, uint8_t data )
{
     63e:	0f 93       	push	r16
     640:	1f 93       	push	r17
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	00 d0       	rcall	.+0      	; 0x648 <seep_write_byte+0xa>
     648:	cd b7       	in	r28, 0x3d	; 61
     64a:	de b7       	in	r29, 0x3e	; 62
     64c:	08 2f       	mov	r16, r24
    uint8_t ack = 0;

    seep_i2c_start();
     64e:	6a 83       	std	Y+2, r22	; 0x02
     650:	99 83       	std	Y+1, r25	; 0x01
     652:	0e 94 af 02 	call	0x55e	; 0x55e <seep_i2c_start>

    seep_i2c_write_byte(SEEP_ADDRESS_W);
     656:	80 ea       	ldi	r24, 0xA0	; 160
     658:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <seep_i2c_write_byte>
    ack += seep_i2c_read_ack();
     65c:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <seep_i2c_read_ack>
     660:	18 2f       	mov	r17, r24

    seep_i2c_write_byte((uint8_t)(address>>8));
     662:	99 81       	ldd	r25, Y+1	; 0x01
     664:	89 2f       	mov	r24, r25
     666:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <seep_i2c_write_byte>
    ack += seep_i2c_read_ack();
     66a:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <seep_i2c_read_ack>
     66e:	18 0f       	add	r17, r24

    seep_i2c_write_byte((uint8_t)address);
     670:	80 2f       	mov	r24, r16
     672:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <seep_i2c_write_byte>
    ack += seep_i2c_read_ack();
     676:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <seep_i2c_read_ack>
     67a:	18 0f       	add	r17, r24

    seep_i2c_write_byte(data);
     67c:	6a 81       	ldd	r22, Y+2	; 0x02
     67e:	86 2f       	mov	r24, r22
     680:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <seep_i2c_write_byte>
    ack += seep_i2c_read_ack();
     684:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <seep_i2c_read_ack>
     688:	18 0f       	add	r17, r24

    seep_i2c_stop();
     68a:	0e 94 bb 02 	call	0x576	; 0x576 <seep_i2c_stop>

    return ack;
}
     68e:	81 2f       	mov	r24, r17
     690:	0f 90       	pop	r0
     692:	0f 90       	pop	r0
     694:	df 91       	pop	r29
     696:	cf 91       	pop	r28
     698:	1f 91       	pop	r17
     69a:	0f 91       	pop	r16
     69c:	08 95       	ret

0000069e <seep_write>:


/* Запись нескольких байт по I2C. Возвращает значение > 0 если нет связи. */

uint8_t seep_write( uint16_t address, uint8_t *data, uint8_t ndata )
{
     69e:	cf 92       	push	r12
     6a0:	df 92       	push	r13
     6a2:	ff 92       	push	r15
     6a4:	0f 93       	push	r16
     6a6:	1f 93       	push	r17
     6a8:	cf 93       	push	r28
     6aa:	df 93       	push	r29
     6ac:	00 d0       	rcall	.+0      	; 0x6ae <seep_write+0x10>
     6ae:	1f 92       	push	r1
     6b0:	cd b7       	in	r28, 0x3d	; 61
     6b2:	de b7       	in	r29, 0x3e	; 62
     6b4:	f8 2e       	mov	r15, r24
     6b6:	04 2f       	mov	r16, r20
    uint8_t i, ack = 0;

    seep_i2c_start();
     6b8:	6a 83       	std	Y+2, r22	; 0x02
     6ba:	7b 83       	std	Y+3, r23	; 0x03
     6bc:	99 83       	std	Y+1, r25	; 0x01
     6be:	0e 94 af 02 	call	0x55e	; 0x55e <seep_i2c_start>

    seep_i2c_write_byte(SEEP_ADDRESS_W);
     6c2:	80 ea       	ldi	r24, 0xA0	; 160
     6c4:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <seep_i2c_write_byte>
    ack += seep_i2c_read_ack();
     6c8:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <seep_i2c_read_ack>
     6cc:	18 2f       	mov	r17, r24

    seep_i2c_write_byte((uint8_t)(address>>8));
     6ce:	99 81       	ldd	r25, Y+1	; 0x01
     6d0:	89 2f       	mov	r24, r25
     6d2:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <seep_i2c_write_byte>
    ack += seep_i2c_read_ack();
     6d6:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <seep_i2c_read_ack>
     6da:	18 0f       	add	r17, r24

    seep_i2c_write_byte((uint8_t)address);
     6dc:	8f 2d       	mov	r24, r15
     6de:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <seep_i2c_write_byte>
    ack += seep_i2c_read_ack();
     6e2:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <seep_i2c_read_ack>
     6e6:	18 0f       	add	r17, r24
     6e8:	6a 81       	ldd	r22, Y+2	; 0x02
     6ea:	f6 2e       	mov	r15, r22

    for (i=0 ; i<ndata ; ++i)
     6ec:	c6 2e       	mov	r12, r22
     6ee:	7b 81       	ldd	r23, Y+3	; 0x03
     6f0:	d7 2e       	mov	r13, r23
     6f2:	8c 2d       	mov	r24, r12
     6f4:	8f 19       	sub	r24, r15
     6f6:	80 17       	cp	r24, r16
     6f8:	48 f4       	brcc	.+18     	; 0x70c <seep_write+0x6e>
    {
        seep_i2c_write_byte(data[i]);
     6fa:	f6 01       	movw	r30, r12
     6fc:	81 91       	ld	r24, Z+
     6fe:	6f 01       	movw	r12, r30
     700:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <seep_i2c_write_byte>
        ack += seep_i2c_read_ack();
     704:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <seep_i2c_read_ack>
     708:	18 0f       	add	r17, r24
     70a:	f3 cf       	rjmp	.-26     	; 0x6f2 <seep_write+0x54>
    }

    seep_i2c_stop();
     70c:	0e 94 bb 02 	call	0x576	; 0x576 <seep_i2c_stop>

    return ack;
}
     710:	81 2f       	mov	r24, r17
     712:	0f 90       	pop	r0
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
     71c:	1f 91       	pop	r17
     71e:	0f 91       	pop	r16
     720:	ff 90       	pop	r15
     722:	df 90       	pop	r13
     724:	cf 90       	pop	r12
     726:	08 95       	ret

00000728 <seep_read_byte>:


/* Чтение одного байта по I2C. Возвращает считанное число, если успешно, иначе возвращает 0 */

uint8_t seep_read_byte( uint16_t address )
{
     728:	0f 93       	push	r16
     72a:	1f 93       	push	r17
     72c:	cf 93       	push	r28
     72e:	df 93       	push	r29
     730:	1f 92       	push	r1
     732:	cd b7       	in	r28, 0x3d	; 61
     734:	de b7       	in	r29, 0x3e	; 62
     736:	08 2f       	mov	r16, r24
    uint8_t ack = 0, data;

    seep_i2c_start();
     738:	99 83       	std	Y+1, r25	; 0x01
     73a:	0e 94 af 02 	call	0x55e	; 0x55e <seep_i2c_start>

    seep_i2c_write_byte(SEEP_ADDRESS_W);
     73e:	80 ea       	ldi	r24, 0xA0	; 160
     740:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <seep_i2c_write_byte>
    ack += seep_i2c_read_ack();
     744:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <seep_i2c_read_ack>
     748:	18 2f       	mov	r17, r24

    seep_i2c_write_byte((uint8_t)(address>>8));
     74a:	99 81       	ldd	r25, Y+1	; 0x01
     74c:	89 2f       	mov	r24, r25
     74e:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <seep_i2c_write_byte>
    ack += seep_i2c_read_ack();
     752:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <seep_i2c_read_ack>
     756:	18 0f       	add	r17, r24

    seep_i2c_write_byte((uint8_t)address);
     758:	80 2f       	mov	r24, r16
     75a:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <seep_i2c_write_byte>
    ack += seep_i2c_read_ack();
     75e:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <seep_i2c_read_ack>
     762:	18 0f       	add	r17, r24
    SEEP_I2C_PORT |= (1<<SEEP_SCL);
     764:	df 9a       	sbi	0x1b, 7	; 27
    seep_i2c_start();
     766:	0e 94 af 02 	call	0x55e	; 0x55e <seep_i2c_start>

    seep_i2c_write_byte(SEEP_ADDRESS_R);
     76a:	81 ea       	ldi	r24, 0xA1	; 161
     76c:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <seep_i2c_write_byte>
    seep_i2c_write_ack();
     770:	0e 94 c8 02 	call	0x590	; 0x590 <seep_i2c_write_ack>

    data = seep_i2c_read_byte();
     774:	0e 94 03 03 	call	0x606	; 0x606 <seep_i2c_read_byte>
     778:	92 e0       	ldi	r25, 0x02	; 2
     77a:	9a 95       	dec	r25
     77c:	f1 f7       	brne	.-4      	; 0x77a <seep_read_byte+0x52>
    _delay_us(SEEP_I2C_TIME2);
    SEEP_I2C_PORT |= (1<<SEEP_SDA) | (1<<SEEP_SCL);
     77e:	9b b3       	in	r25, 0x1b	; 27
     780:	90 6c       	ori	r25, 0xC0	; 192
     782:	9b bb       	out	0x1b, r25	; 27
     784:	92 e0       	ldi	r25, 0x02	; 2
     786:	9a 95       	dec	r25
     788:	f1 f7       	brne	.-4      	; 0x786 <seep_read_byte+0x5e>
    _delay_us(SEEP_I2C_TIME2);
    SEEP_I2C_PORT &= ~(1<<SEEP_SCL);
     78a:	df 98       	cbi	0x1b, 7	; 27

    seep_i2c_stop();
     78c:	89 83       	std	Y+1, r24	; 0x01
     78e:	0e 94 bb 02 	call	0x576	; 0x576 <seep_i2c_stop>

    if ( ack > 0 )
     792:	89 81       	ldd	r24, Y+1	; 0x01
     794:	11 11       	cpse	r17, r1
        return 0;
     796:	80 e0       	ldi	r24, 0x00	; 0
    else
        return data;
}
     798:	0f 90       	pop	r0
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	1f 91       	pop	r17
     7a0:	0f 91       	pop	r16
     7a2:	08 95       	ret

000007a4 <seep_wait>:
}


/* Ожидание пока eeprom не будет готова принять байт, или пока таймаут не пройдет */
void seep_wait(void)
{
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
    uint16_t timeout = 0;
     7a8:	c0 e0       	ldi	r28, 0x00	; 0
     7aa:	d0 e0       	ldi	r29, 0x00	; 0

    while( (seep_read_byte(0x0002) == 0) && (timeout < SEEP_TIMEOUT) )
     7ac:	82 e0       	ldi	r24, 0x02	; 2
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	0e 94 94 03 	call	0x728	; 0x728 <seep_read_byte>
     7b4:	81 11       	cpse	r24, r1
     7b6:	0f c0       	rjmp	.+30     	; 0x7d6 <seep_wait+0x32>
     7b8:	be 01       	movw	r22, r28
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <__floatunsisf>
     7c2:	22 e7       	ldi	r18, 0x72	; 114
     7c4:	3c e9       	ldi	r19, 0x9C	; 156
     7c6:	4d e2       	ldi	r20, 0x2D	; 45
     7c8:	55 e4       	ldi	r21, 0x45	; 69
     7ca:	0e 94 77 16 	call	0x2cee	; 0x2cee <__cmpsf2>
     7ce:	87 ff       	sbrs	r24, 7
     7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <seep_wait+0x32>
        ++timeout;
     7d2:	21 96       	adiw	r28, 0x01	; 1
     7d4:	eb cf       	rjmp	.-42     	; 0x7ac <seep_wait+0x8>
}
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	08 95       	ret

000007dc <seep_init>:
}



uint8_t seep_init(void)
{
     7dc:	cf 93       	push	r28
    uint8_t ack = 0;

    seep_i2c_init();
     7de:	0e 94 a8 02 	call	0x550	; 0x550 <seep_i2c_init>

    if ( seep_read_byte(0x0002) != 0xed )
     7e2:	82 e0       	ldi	r24, 0x02	; 2
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	0e 94 94 03 	call	0x728	; 0x728 <seep_read_byte>
     7ea:	8d 3e       	cpi	r24, 0xED	; 237
     7ec:	d9 f0       	breq	.+54     	; 0x824 <seep_init+0x48>
    {
        seep_wait();
     7ee:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <seep_wait>
        ack += seep_write_byte(0x0000, 0x00);
     7f2:	60 e0       	ldi	r22, 0x00	; 0
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	0e 94 1f 03 	call	0x63e	; 0x63e <seep_write_byte>
     7fc:	c8 2f       	mov	r28, r24
        seep_wait();
     7fe:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <seep_wait>
        ack += seep_write_byte(0x0001, 0x08);
     802:	68 e0       	ldi	r22, 0x08	; 8
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	0e 94 1f 03 	call	0x63e	; 0x63e <seep_write_byte>
     80c:	c8 0f       	add	r28, r24
        seep_wait();
     80e:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <seep_wait>
        ack += seep_write_byte(0x0002, 0xed);
     812:	6d ee       	ldi	r22, 0xED	; 237
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	0e 94 1f 03 	call	0x63e	; 0x63e <seep_write_byte>
     81c:	c8 0f       	add	r28, r24
        seep_wait();
     81e:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <seep_wait>
     822:	01 c0       	rjmp	.+2      	; 0x826 <seep_init+0x4a>



uint8_t seep_init(void)
{
    uint8_t ack = 0;
     824:	c0 e0       	ldi	r28, 0x00	; 0
        seep_wait();
        ack += seep_write_byte(0x0002, 0xed);
        seep_wait();
    }
    return ack;
}
     826:	8c 2f       	mov	r24, r28
     828:	cf 91       	pop	r28
     82a:	08 95       	ret

0000082c <seep_read>:


/* Чтение нескольких байт подряд по I2C */

uint8_t seep_read( uint16_t address, uint8_t *data, uint8_t ndata )
{
     82c:	af 92       	push	r10
     82e:	bf 92       	push	r11
     830:	df 92       	push	r13
     832:	ef 92       	push	r14
     834:	ff 92       	push	r15
     836:	0f 93       	push	r16
     838:	1f 93       	push	r17
     83a:	cf 93       	push	r28
     83c:	df 93       	push	r29
     83e:	1f 92       	push	r1
     840:	cd b7       	in	r28, 0x3d	; 61
     842:	de b7       	in	r29, 0x3e	; 62
     844:	d8 2e       	mov	r13, r24
     846:	8b 01       	movw	r16, r22
     848:	e4 2e       	mov	r14, r20
    uint8_t i, ack = 0;

    seep_i2c_start();
     84a:	99 83       	std	Y+1, r25	; 0x01
     84c:	0e 94 af 02 	call	0x55e	; 0x55e <seep_i2c_start>

    seep_i2c_write_byte(SEEP_ADDRESS_W);
     850:	80 ea       	ldi	r24, 0xA0	; 160
     852:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <seep_i2c_write_byte>
    ack += seep_i2c_read_ack();
     856:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <seep_i2c_read_ack>
     85a:	f8 2e       	mov	r15, r24

    seep_i2c_write_byte((uint8_t)(address>>8));
     85c:	99 81       	ldd	r25, Y+1	; 0x01
     85e:	89 2f       	mov	r24, r25
     860:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <seep_i2c_write_byte>
    ack += seep_i2c_read_ack();
     864:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <seep_i2c_read_ack>
     868:	f8 0e       	add	r15, r24

    seep_i2c_write_byte((uint8_t)address);
     86a:	8d 2d       	mov	r24, r13
     86c:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <seep_i2c_write_byte>
    ack += seep_i2c_read_ack();
     870:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <seep_i2c_read_ack>
     874:	f8 0e       	add	r15, r24
    SEEP_I2C_PORT |= (1<<SEEP_SCL);
     876:	df 9a       	sbi	0x1b, 7	; 27
    seep_i2c_start();
     878:	0e 94 af 02 	call	0x55e	; 0x55e <seep_i2c_start>

    seep_i2c_write_byte(SEEP_ADDRESS_R);
     87c:	81 ea       	ldi	r24, 0xA1	; 161
     87e:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <seep_i2c_write_byte>
    seep_i2c_write_ack();
     882:	0e 94 c8 02 	call	0x590	; 0x590 <seep_i2c_write_ack>

    --ndata;
     886:	ea 94       	dec	r14
     888:	d0 2e       	mov	r13, r16
    for (i=0 ; i<ndata ; ++i)
     88a:	58 01       	movw	r10, r16
     88c:	8a 2d       	mov	r24, r10
     88e:	8d 19       	sub	r24, r13
     890:	8e 15       	cp	r24, r14
     892:	40 f4       	brcc	.+16     	; 0x8a4 <__stack+0x45>
    {
        data[i] = seep_i2c_read_byte();
     894:	0e 94 03 03 	call	0x606	; 0x606 <seep_i2c_read_byte>
     898:	f5 01       	movw	r30, r10
     89a:	81 93       	st	Z+, r24
     89c:	5f 01       	movw	r10, r30
        seep_i2c_write_ack();
     89e:	0e 94 c8 02 	call	0x590	; 0x590 <seep_i2c_write_ack>
     8a2:	f4 cf       	rjmp	.-24     	; 0x88c <__stack+0x2d>
    }

    data[ndata] = seep_i2c_read_byte();
     8a4:	0e 0d       	add	r16, r14
     8a6:	11 1d       	adc	r17, r1
     8a8:	0e 94 03 03 	call	0x606	; 0x606 <seep_i2c_read_byte>
     8ac:	f8 01       	movw	r30, r16
     8ae:	80 83       	st	Z, r24
     8b0:	82 e0       	ldi	r24, 0x02	; 2
     8b2:	8a 95       	dec	r24
     8b4:	f1 f7       	brne	.-4      	; 0x8b2 <__stack+0x53>
    _delay_us(SEEP_I2C_TIME2);
    SEEP_I2C_PORT |= (1<<SEEP_SDA) | (1<<SEEP_SCL);
     8b6:	8b b3       	in	r24, 0x1b	; 27
     8b8:	80 6c       	ori	r24, 0xC0	; 192
     8ba:	8b bb       	out	0x1b, r24	; 27
     8bc:	82 e0       	ldi	r24, 0x02	; 2
     8be:	8a 95       	dec	r24
     8c0:	f1 f7       	brne	.-4      	; 0x8be <__stack+0x5f>
    _delay_us(SEEP_I2C_TIME2);
    SEEP_I2C_PORT &= ~(1<<SEEP_SCL);
     8c2:	df 98       	cbi	0x1b, 7	; 27

    seep_i2c_stop();
     8c4:	0e 94 bb 02 	call	0x576	; 0x576 <seep_i2c_stop>

    return ack;
}
     8c8:	8f 2d       	mov	r24, r15
     8ca:	0f 90       	pop	r0
     8cc:	df 91       	pop	r29
     8ce:	cf 91       	pop	r28
     8d0:	1f 91       	pop	r17
     8d2:	0f 91       	pop	r16
     8d4:	ff 90       	pop	r15
     8d6:	ef 90       	pop	r14
     8d8:	df 90       	pop	r13
     8da:	bf 90       	pop	r11
     8dc:	af 90       	pop	r10
     8de:	08 95       	ret

000008e0 <ds_i2c_init>:



void ds_i2c_init(void)
{
    DS_I2C_DDR |= (1<<SCL) | (1<<SDA);
     8e0:	81 b3       	in	r24, 0x11	; 17
     8e2:	80 63       	ori	r24, 0x30	; 48
     8e4:	81 bb       	out	0x11, r24	; 17
    DS_I2C_PORT |= (1<<SCL) | (1<<SDA);
     8e6:	82 b3       	in	r24, 0x12	; 18
     8e8:	80 63       	ori	r24, 0x30	; 48
     8ea:	82 bb       	out	0x12, r24	; 18
     8ec:	08 95       	ret

000008ee <ds_i2c_start>:
     8ee:	8d e0       	ldi	r24, 0x0D	; 13
     8f0:	8a 95       	dec	r24
     8f2:	f1 f7       	brne	.-4      	; 0x8f0 <ds_i2c_start+0x2>


void ds_i2c_start(void)
{
    _delay_us(I2C_TIME4);
    DS_I2C_PORT &= ~(1<<SDA);
     8f4:	94 98       	cbi	0x12, 4	; 18
     8f6:	8d e0       	ldi	r24, 0x0D	; 13
     8f8:	8a 95       	dec	r24
     8fa:	f1 f7       	brne	.-4      	; 0x8f8 <ds_i2c_start+0xa>
    _delay_us(I2C_TIME4);
    DS_I2C_PORT &= ~(1<<SCL);
     8fc:	95 98       	cbi	0x12, 5	; 18
     8fe:	8a e1       	ldi	r24, 0x1A	; 26
     900:	8a 95       	dec	r24
     902:	f1 f7       	brne	.-4      	; 0x900 <ds_i2c_start+0x12>
     904:	08 95       	ret

00000906 <ds_i2c_stop>:
}


void ds_i2c_stop(void)
{
    DS_I2C_PORT &= ~(1<<SDA);
     906:	94 98       	cbi	0x12, 4	; 18
     908:	8a e1       	ldi	r24, 0x1A	; 26
     90a:	8a 95       	dec	r24
     90c:	f1 f7       	brne	.-4      	; 0x90a <ds_i2c_stop+0x4>
    _delay_us(I2C_TIME2);
    DS_I2C_PORT |= (1<<SCL);
     90e:	95 9a       	sbi	0x12, 5	; 18
     910:	8d e0       	ldi	r24, 0x0D	; 13
     912:	8a 95       	dec	r24
     914:	f1 f7       	brne	.-4      	; 0x912 <ds_i2c_stop+0xc>
    _delay_us(I2C_TIME4);
    DS_I2C_PORT |= (1<<SDA);
     916:	94 9a       	sbi	0x12, 4	; 18
     918:	8d e0       	ldi	r24, 0x0D	; 13
     91a:	8a 95       	dec	r24
     91c:	f1 f7       	brne	.-4      	; 0x91a <ds_i2c_stop+0x14>
     91e:	08 95       	ret

00000920 <ds_i2c_write_byte>:


/* Отправляет один байт по I2C. Возвращает 0 если подтверждение принято, иначе 1 */

uint8_t ds_i2c_write_byte( uint8_t byte )
{
     920:	28 e0       	ldi	r18, 0x08	; 8
     922:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t ack, mask = 0x80;
     924:	90 e8       	ldi	r25, 0x80	; 128
     926:	5a e1       	ldi	r21, 0x1A	; 26

    while ( mask )
    {
        if (mask & byte)    DS_I2C_PORT |= (1<<SDA);
     928:	49 2f       	mov	r20, r25
     92a:	48 23       	and	r20, r24
     92c:	11 f0       	breq	.+4      	; 0x932 <ds_i2c_write_byte+0x12>
     92e:	94 9a       	sbi	0x12, 4	; 18
     930:	01 c0       	rjmp	.+2      	; 0x934 <ds_i2c_write_byte+0x14>
        else                DS_I2C_PORT &= ~(1<<SDA);
     932:	94 98       	cbi	0x12, 4	; 18
        mask >>= 1;
     934:	96 95       	lsr	r25
     936:	45 2f       	mov	r20, r21
     938:	4a 95       	dec	r20
     93a:	f1 f7       	brne	.-4      	; 0x938 <ds_i2c_write_byte+0x18>

        _delay_us(I2C_TIME2);
        DS_I2C_PORT |= (1<<SCL);
     93c:	95 9a       	sbi	0x12, 5	; 18
     93e:	45 2f       	mov	r20, r21
     940:	4a 95       	dec	r20
     942:	f1 f7       	brne	.-4      	; 0x940 <ds_i2c_write_byte+0x20>
        _delay_us(I2C_TIME2);
        DS_I2C_PORT &= ~(1<<SCL);
     944:	95 98       	cbi	0x12, 5	; 18
     946:	21 50       	subi	r18, 0x01	; 1
     948:	31 09       	sbc	r19, r1

uint8_t ds_i2c_write_byte( uint8_t byte )
{
    uint8_t ack, mask = 0x80;

    while ( mask )
     94a:	21 15       	cp	r18, r1
     94c:	31 05       	cpc	r19, r1
     94e:	61 f7       	brne	.-40     	; 0x928 <ds_i2c_write_byte+0x8>
        DS_I2C_PORT |= (1<<SCL);
        _delay_us(I2C_TIME2);
        DS_I2C_PORT &= ~(1<<SCL);
    }

    DS_I2C_DDR &= ~(1<<SDA);
     950:	8c 98       	cbi	0x11, 4	; 17
    DS_I2C_PORT |= (1<<SDA);
     952:	94 9a       	sbi	0x12, 4	; 18
     954:	8a e1       	ldi	r24, 0x1A	; 26
     956:	8a 95       	dec	r24
     958:	f1 f7       	brne	.-4      	; 0x956 <ds_i2c_write_byte+0x36>
    _delay_us(I2C_TIME2);

    DS_I2C_PORT |= (1<<SCL);
     95a:	95 9a       	sbi	0x12, 5	; 18
     95c:	8d e0       	ldi	r24, 0x0D	; 13
     95e:	8a 95       	dec	r24
     960:	f1 f7       	brne	.-4      	; 0x95e <ds_i2c_write_byte+0x3e>

    _delay_us(I2C_TIME4);
    ack = DS_I2C_PIN & (1<<SDA);
     962:	80 b3       	in	r24, 0x10	; 16
     964:	9d e0       	ldi	r25, 0x0D	; 13
     966:	9a 95       	dec	r25
     968:	f1 f7       	brne	.-4      	; 0x966 <ds_i2c_write_byte+0x46>
    _delay_us(I2C_TIME4);

    DS_I2C_PORT &= ~(1<<SCL);
     96a:	95 98       	cbi	0x12, 5	; 18
     96c:	9a e1       	ldi	r25, 0x1A	; 26
     96e:	9a 95       	dec	r25
     970:	f1 f7       	brne	.-4      	; 0x96e <ds_i2c_write_byte+0x4e>
    _delay_us(I2C_TIME2);
    DS_I2C_DDR |= (1<<SDA);
     972:	8c 9a       	sbi	0x11, 4	; 17

    if (ack)
        return 1;
    else
        return 0;
}
     974:	82 95       	swap	r24
     976:	81 70       	andi	r24, 0x01	; 1
     978:	08 95       	ret

0000097a <ds_i2c_read_byte>:

uint8_t ds_i2c_read_byte(void)
{
    uint8_t byte = 0, mask = 0x80;

    DS_I2C_DDR &= ~(1<<SDA);
     97a:	8c 98       	cbi	0x11, 4	; 17
     97c:	28 e0       	ldi	r18, 0x08	; 8
     97e:	30 e0       	ldi	r19, 0x00	; 0

/* функция чтения байта по I2C, возвращает прочитаный байт */

uint8_t ds_i2c_read_byte(void)
{
    uint8_t byte = 0, mask = 0x80;
     980:	90 e8       	ldi	r25, 0x80	; 128
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	6a e1       	ldi	r22, 0x1A	; 26
     986:	5d e0       	ldi	r21, 0x0D	; 13
     988:	46 2f       	mov	r20, r22
     98a:	4a 95       	dec	r20
     98c:	f1 f7       	brne	.-4      	; 0x98a <ds_i2c_read_byte+0x10>
    DS_I2C_DDR &= ~(1<<SDA);

    while ( mask )
    {
        _delay_us(I2C_TIME2);
        DS_I2C_PORT |= (1<<SCL);
     98e:	95 9a       	sbi	0x12, 5	; 18
     990:	45 2f       	mov	r20, r21
     992:	4a 95       	dec	r20
     994:	f1 f7       	brne	.-4      	; 0x992 <ds_i2c_read_byte+0x18>
        _delay_us(I2C_TIME4);

        if (DS_I2C_PIN & (1<<SDA))
     996:	84 99       	sbic	0x10, 4	; 16
            byte |= mask;
     998:	89 2b       	or	r24, r25
        mask >>= 1;
     99a:	96 95       	lsr	r25
     99c:	45 2f       	mov	r20, r21
     99e:	4a 95       	dec	r20
     9a0:	f1 f7       	brne	.-4      	; 0x99e <ds_i2c_read_byte+0x24>

        _delay_us(I2C_TIME4);
        DS_I2C_PORT &= ~(1<<SCL);
     9a2:	95 98       	cbi	0x12, 5	; 18
     9a4:	21 50       	subi	r18, 0x01	; 1
     9a6:	31 09       	sbc	r19, r1
{
    uint8_t byte = 0, mask = 0x80;

    DS_I2C_DDR &= ~(1<<SDA);

    while ( mask )
     9a8:	21 15       	cp	r18, r1
     9aa:	31 05       	cpc	r19, r1
     9ac:	69 f7       	brne	.-38     	; 0x988 <ds_i2c_read_byte+0xe>

        _delay_us(I2C_TIME4);
        DS_I2C_PORT &= ~(1<<SCL);
    }

    DS_I2C_DDR |= (1<<SDA);
     9ae:	8c 9a       	sbi	0x11, 4	; 17
    DS_I2C_PORT &= ~(1<<SDA);
     9b0:	94 98       	cbi	0x12, 4	; 18
     9b2:	9a e1       	ldi	r25, 0x1A	; 26
     9b4:	9a 95       	dec	r25
     9b6:	f1 f7       	brne	.-4      	; 0x9b4 <ds_i2c_read_byte+0x3a>

    _delay_us(I2C_TIME2);
    DS_I2C_PORT |= (1<<SCL);
     9b8:	95 9a       	sbi	0x12, 5	; 18
     9ba:	9a e1       	ldi	r25, 0x1A	; 26
     9bc:	9a 95       	dec	r25
     9be:	f1 f7       	brne	.-4      	; 0x9bc <ds_i2c_read_byte+0x42>
    _delay_us(I2C_TIME2);
    DS_I2C_PORT &= ~(1<<SCL);
     9c0:	95 98       	cbi	0x12, 5	; 18
    DS_I2C_PORT |= (1<<SDA);
     9c2:	94 9a       	sbi	0x12, 4	; 18

    return byte;
}
     9c4:	08 95       	ret

000009c6 <ds_write_byte>:


/* Запись нескольких одного байта по I2C. Возвращает значение > 0 если нет связи. */

uint8_t ds_write_byte( uint8_t address, uint8_t data )
{
     9c6:	0f 93       	push	r16
     9c8:	1f 93       	push	r17
     9ca:	cf 93       	push	r28
     9cc:	df 93       	push	r29
     9ce:	1f 92       	push	r1
     9d0:	cd b7       	in	r28, 0x3d	; 61
     9d2:	de b7       	in	r29, 0x3e	; 62
     9d4:	08 2f       	mov	r16, r24
    uint8_t ack = 0;

    ds_i2c_start();
     9d6:	69 83       	std	Y+1, r22	; 0x01
     9d8:	0e 94 77 04 	call	0x8ee	; 0x8ee <ds_i2c_start>

    ack += ds_i2c_write_byte(DS1307_ADDRESS_W);
     9dc:	80 ed       	ldi	r24, 0xD0	; 208
     9de:	0e 94 90 04 	call	0x920	; 0x920 <ds_i2c_write_byte>
     9e2:	18 2f       	mov	r17, r24
    ack += ds_i2c_write_byte(address);
     9e4:	80 2f       	mov	r24, r16
     9e6:	0e 94 90 04 	call	0x920	; 0x920 <ds_i2c_write_byte>
     9ea:	18 0f       	add	r17, r24
    ack += ds_i2c_write_byte(data);
     9ec:	69 81       	ldd	r22, Y+1	; 0x01
     9ee:	86 2f       	mov	r24, r22
     9f0:	0e 94 90 04 	call	0x920	; 0x920 <ds_i2c_write_byte>
     9f4:	18 0f       	add	r17, r24

    ds_i2c_stop();
     9f6:	0e 94 83 04 	call	0x906	; 0x906 <ds_i2c_stop>

    return ack;
}
     9fa:	81 2f       	mov	r24, r17
     9fc:	0f 90       	pop	r0
     9fe:	df 91       	pop	r29
     a00:	cf 91       	pop	r28
     a02:	1f 91       	pop	r17
     a04:	0f 91       	pop	r16
     a06:	08 95       	ret

00000a08 <ds_write>:


/* Запись нескольких байт по I2C. Возвращает значение > 0 если нет связи. */

uint8_t ds_write( uint8_t address, uint8_t *data, uint8_t ndata )
{
     a08:	cf 92       	push	r12
     a0a:	df 92       	push	r13
     a0c:	ff 92       	push	r15
     a0e:	0f 93       	push	r16
     a10:	1f 93       	push	r17
     a12:	cf 93       	push	r28
     a14:	df 93       	push	r29
     a16:	00 d0       	rcall	.+0      	; 0xa18 <ds_write+0x10>
     a18:	cd b7       	in	r28, 0x3d	; 61
     a1a:	de b7       	in	r29, 0x3e	; 62
     a1c:	f8 2e       	mov	r15, r24
     a1e:	04 2f       	mov	r16, r20
    uint8_t i, ack = 0;

    ds_i2c_start();
     a20:	69 83       	std	Y+1, r22	; 0x01
     a22:	7a 83       	std	Y+2, r23	; 0x02
     a24:	0e 94 77 04 	call	0x8ee	; 0x8ee <ds_i2c_start>

    ack += ds_i2c_write_byte(DS1307_ADDRESS_W);
     a28:	80 ed       	ldi	r24, 0xD0	; 208
     a2a:	0e 94 90 04 	call	0x920	; 0x920 <ds_i2c_write_byte>
     a2e:	18 2f       	mov	r17, r24
    ack += ds_i2c_write_byte(address);
     a30:	8f 2d       	mov	r24, r15
     a32:	0e 94 90 04 	call	0x920	; 0x920 <ds_i2c_write_byte>
     a36:	18 0f       	add	r17, r24
     a38:	69 81       	ldd	r22, Y+1	; 0x01
     a3a:	f6 2e       	mov	r15, r22

    for (i=0 ; i<ndata ; ++i)
     a3c:	c6 2e       	mov	r12, r22
     a3e:	7a 81       	ldd	r23, Y+2	; 0x02
     a40:	d7 2e       	mov	r13, r23
     a42:	8c 2d       	mov	r24, r12
     a44:	8f 19       	sub	r24, r15
     a46:	80 17       	cp	r24, r16
     a48:	38 f4       	brcc	.+14     	; 0xa58 <ds_write+0x50>
        ack += ds_i2c_write_byte(data[i]);
     a4a:	f6 01       	movw	r30, r12
     a4c:	81 91       	ld	r24, Z+
     a4e:	6f 01       	movw	r12, r30
     a50:	0e 94 90 04 	call	0x920	; 0x920 <ds_i2c_write_byte>
     a54:	18 0f       	add	r17, r24
     a56:	f5 cf       	rjmp	.-22     	; 0xa42 <ds_write+0x3a>

    ds_i2c_stop();
     a58:	0e 94 83 04 	call	0x906	; 0x906 <ds_i2c_stop>

    return ack;
}
     a5c:	81 2f       	mov	r24, r17
     a5e:	0f 90       	pop	r0
     a60:	0f 90       	pop	r0
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	1f 91       	pop	r17
     a68:	0f 91       	pop	r16
     a6a:	ff 90       	pop	r15
     a6c:	df 90       	pop	r13
     a6e:	cf 90       	pop	r12
     a70:	08 95       	ret

00000a72 <ds_read_byte>:


/* Чтение одного байта по I2C. Возвращает считанное число, если успешно, иначе возвращает 0 */

uint8_t ds_read_byte( uint8_t address )
{
     a72:	0f 93       	push	r16
     a74:	1f 93       	push	r17
     a76:	cf 93       	push	r28
     a78:	df 93       	push	r29
     a7a:	1f 92       	push	r1
     a7c:	cd b7       	in	r28, 0x3d	; 61
     a7e:	de b7       	in	r29, 0x3e	; 62
     a80:	08 2f       	mov	r16, r24
    uint8_t ack = 0, data;

    ds_i2c_start();
     a82:	0e 94 77 04 	call	0x8ee	; 0x8ee <ds_i2c_start>

    ack += ds_i2c_write_byte(DS1307_ADDRESS_W);
     a86:	80 ed       	ldi	r24, 0xD0	; 208
     a88:	0e 94 90 04 	call	0x920	; 0x920 <ds_i2c_write_byte>
     a8c:	18 2f       	mov	r17, r24
    ack += ds_i2c_write_byte(address);
     a8e:	80 2f       	mov	r24, r16
     a90:	0e 94 90 04 	call	0x920	; 0x920 <ds_i2c_write_byte>
     a94:	18 0f       	add	r17, r24

    ds_i2c_stop();
     a96:	0e 94 83 04 	call	0x906	; 0x906 <ds_i2c_stop>

    ds_i2c_start();
     a9a:	0e 94 77 04 	call	0x8ee	; 0x8ee <ds_i2c_start>

    ack += ds_i2c_write_byte(DS1307_ADDRESS_R);
     a9e:	81 ed       	ldi	r24, 0xD1	; 209
     aa0:	0e 94 90 04 	call	0x920	; 0x920 <ds_i2c_write_byte>
     aa4:	18 0f       	add	r17, r24
    data = ds_i2c_read_byte();
     aa6:	0e 94 bd 04 	call	0x97a	; 0x97a <ds_i2c_read_byte>

    ds_i2c_stop();
     aaa:	89 83       	std	Y+1, r24	; 0x01
     aac:	0e 94 83 04 	call	0x906	; 0x906 <ds_i2c_stop>

    if ( ack > 0 )
     ab0:	89 81       	ldd	r24, Y+1	; 0x01
     ab2:	11 11       	cpse	r17, r1
        return 0;
     ab4:	80 e0       	ldi	r24, 0x00	; 0
    else
        return data;
}
     ab6:	0f 90       	pop	r0
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	1f 91       	pop	r17
     abe:	0f 91       	pop	r16
     ac0:	08 95       	ret

00000ac2 <ds_read>:


/* Чтение нескольких байт подряд по SPI */

uint8_t ds_read( uint8_t address, uint8_t *data, uint8_t ndata )
{
     ac2:	cf 92       	push	r12
     ac4:	df 92       	push	r13
     ac6:	ff 92       	push	r15
     ac8:	0f 93       	push	r16
     aca:	1f 93       	push	r17
     acc:	cf 93       	push	r28
     ace:	df 93       	push	r29
     ad0:	00 d0       	rcall	.+0      	; 0xad2 <ds_read+0x10>
     ad2:	cd b7       	in	r28, 0x3d	; 61
     ad4:	de b7       	in	r29, 0x3e	; 62
     ad6:	f8 2e       	mov	r15, r24
     ad8:	04 2f       	mov	r16, r20
    uint8_t i, ack = 0;

    ds_i2c_start();
     ada:	69 83       	std	Y+1, r22	; 0x01
     adc:	7a 83       	std	Y+2, r23	; 0x02
     ade:	0e 94 77 04 	call	0x8ee	; 0x8ee <ds_i2c_start>

    ack += ds_i2c_write_byte(DS1307_ADDRESS_W);
     ae2:	80 ed       	ldi	r24, 0xD0	; 208
     ae4:	0e 94 90 04 	call	0x920	; 0x920 <ds_i2c_write_byte>
     ae8:	18 2f       	mov	r17, r24
    ack += ds_i2c_write_byte(address);
     aea:	8f 2d       	mov	r24, r15
     aec:	0e 94 90 04 	call	0x920	; 0x920 <ds_i2c_write_byte>
     af0:	18 0f       	add	r17, r24

    ds_i2c_stop();
     af2:	0e 94 83 04 	call	0x906	; 0x906 <ds_i2c_stop>

    ds_i2c_start();
     af6:	0e 94 77 04 	call	0x8ee	; 0x8ee <ds_i2c_start>

    ack += ds_i2c_write_byte(DS1307_ADDRESS_R);
     afa:	81 ed       	ldi	r24, 0xD1	; 209
     afc:	0e 94 90 04 	call	0x920	; 0x920 <ds_i2c_write_byte>
     b00:	18 0f       	add	r17, r24
     b02:	69 81       	ldd	r22, Y+1	; 0x01
     b04:	f6 2e       	mov	r15, r22
    for (i=0 ; i<ndata ; ++i)
     b06:	c6 2e       	mov	r12, r22
     b08:	7a 81       	ldd	r23, Y+2	; 0x02
     b0a:	d7 2e       	mov	r13, r23
     b0c:	8c 2d       	mov	r24, r12
     b0e:	8f 19       	sub	r24, r15
     b10:	80 17       	cp	r24, r16
     b12:	30 f4       	brcc	.+12     	; 0xb20 <ds_read+0x5e>
        data[i] = ds_i2c_read_byte();
     b14:	0e 94 bd 04 	call	0x97a	; 0x97a <ds_i2c_read_byte>
     b18:	f6 01       	movw	r30, r12
     b1a:	81 93       	st	Z+, r24
     b1c:	6f 01       	movw	r12, r30
     b1e:	f6 cf       	rjmp	.-20     	; 0xb0c <ds_read+0x4a>

    ds_i2c_stop();
     b20:	0e 94 83 04 	call	0x906	; 0x906 <ds_i2c_stop>

    return ack;
}
     b24:	81 2f       	mov	r24, r17
     b26:	0f 90       	pop	r0
     b28:	0f 90       	pop	r0
     b2a:	df 91       	pop	r29
     b2c:	cf 91       	pop	r28
     b2e:	1f 91       	pop	r17
     b30:	0f 91       	pop	r16
     b32:	ff 90       	pop	r15
     b34:	df 90       	pop	r13
     b36:	cf 90       	pop	r12
     b38:	08 95       	ret

00000b3a <ds_set_time>:

/* Установка вермени - передается массив из семи байт (секунды, минуты, часы, день недели, дата, месяц, год).
    Возвращает 0 если все прошло успешно - иначе > 0. */

uint8_t ds_set_time (uint8_t *time)
{
     b3a:	1f 93       	push	r17
     b3c:	cf 93       	push	r28
     b3e:	df 93       	push	r29
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	28 97       	sbiw	r28, 0x08	; 8
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	f8 94       	cli
     b4a:	de bf       	out	0x3e, r29	; 62
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	cd bf       	out	0x3d, r28	; 61
     b50:	dc 01       	movw	r26, r24
     b52:	fe 01       	movw	r30, r28
     b54:	31 96       	adiw	r30, 0x01	; 1
     b56:	9e 01       	movw	r18, r28
     b58:	28 5f       	subi	r18, 0xF8	; 248
     b5a:	3f 4f       	sbci	r19, 0xFF	; 255
     b5c:	1e 2f       	mov	r17, r30
     b5e:	5f 2f       	mov	r21, r31
    uint8_t data[8], ack, i;

    for (i=0 ; i<7 ; ++i)   data[i] = ((time[i]/10)<<4) + (time[i]%10);
     b60:	4a e0       	ldi	r20, 0x0A	; 10
     b62:	8d 91       	ld	r24, X+
     b64:	64 2f       	mov	r22, r20
     b66:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <__udivmodqi4>
     b6a:	60 e1       	ldi	r22, 0x10	; 16
     b6c:	86 9f       	mul	r24, r22
     b6e:	90 0d       	add	r25, r0
     b70:	11 24       	eor	r1, r1
     b72:	91 93       	st	Z+, r25
     b74:	e2 17       	cp	r30, r18
     b76:	f3 07       	cpc	r31, r19
     b78:	a1 f7       	brne	.-24     	; 0xb62 <ds_set_time+0x28>
    data[2] = 0x40 | (((time[2]/10)<<4) + (time[2]%10));
    if (time[2] > 12)
        data[2] |= 0x20;
#endif

    data[7] = 0x00;
     b7a:	18 86       	std	Y+8, r1	; 0x08

    ack = ds_write(0x00, data, 8);
     b7c:	48 e0       	ldi	r20, 0x08	; 8
     b7e:	61 2f       	mov	r22, r17
     b80:	75 2f       	mov	r23, r21
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	0e 94 04 05 	call	0xa08	; 0xa08 <ds_write>

    return ack;
}
     b88:	28 96       	adiw	r28, 0x08	; 8
     b8a:	0f b6       	in	r0, 0x3f	; 63
     b8c:	f8 94       	cli
     b8e:	de bf       	out	0x3e, r29	; 62
     b90:	0f be       	out	0x3f, r0	; 63
     b92:	cd bf       	out	0x3d, r28	; 61
     b94:	df 91       	pop	r29
     b96:	cf 91       	pop	r28
     b98:	1f 91       	pop	r17
     b9a:	08 95       	ret

00000b9c <ds_init>:


/* Инициализация часов. Включает SPI, проверяет, инициализировались ли ранее, если нет - записывает нулевое значение времени и запускает часы. */

uint8_t ds_init (uint8_t *init_data, uint8_t lenght)
{
     b9c:	ef 92       	push	r14
     b9e:	ff 92       	push	r15
     ba0:	0f 93       	push	r16
     ba2:	1f 93       	push	r17
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	cd b7       	in	r28, 0x3d	; 61
     baa:	de b7       	in	r29, 0x3e	; 62
     bac:	ef 97       	sbiw	r28, 0x3f	; 63
     bae:	0f b6       	in	r0, 0x3f	; 63
     bb0:	f8 94       	cli
     bb2:	de bf       	out	0x3e, r29	; 62
     bb4:	0f be       	out	0x3f, r0	; 63
     bb6:	cd bf       	out	0x3d, r28	; 61
     bb8:	8c 01       	movw	r16, r24
     bba:	f6 2e       	mov	r15, r22

#ifdef  H24
    uint8_t time[] = {0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x0e};
     bbc:	87 e0       	ldi	r24, 0x07	; 7
     bbe:	e4 e6       	ldi	r30, 0x64	; 100
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	de 01       	movw	r26, r28
     bc4:	d9 96       	adiw	r26, 0x39	; 57
     bc6:	01 90       	ld	r0, Z+
     bc8:	0d 92       	st	X+, r0
     bca:	8a 95       	dec	r24
     bcc:	e1 f7       	brne	.-8      	; 0xbc6 <ds_init+0x2a>
    uint8_t time[] = {0x00, 0x00, 0x40, 0x01, 0x01, 0x01, 0x0e};
#endif

    uint8_t check, ack = 0;

    ds_i2c_init();
     bce:	0e 94 70 04 	call	0x8e0	; 0x8e0 <ds_i2c_init>

    check = ds_read_byte(0x08);
     bd2:	88 e0       	ldi	r24, 0x08	; 8
     bd4:	0e 94 39 05 	call	0xa72	; 0xa72 <ds_read_byte>

    if ( check != DS1307_CHECK_WORD )
     bd8:	8d 3e       	cpi	r24, 0xED	; 237
     bda:	69 f1       	breq	.+90     	; 0xc36 <ds_init+0x9a>
    {
        uint8_t buffer[DS1307_NSRAM], i;

        ack = ds_set_time(time);
     bdc:	ce 01       	movw	r24, r28
     bde:	c9 96       	adiw	r24, 0x39	; 57
     be0:	0e 94 9d 05 	call	0xb3a	; 0xb3a <ds_set_time>
     be4:	e8 2e       	mov	r14, r24

        buffer[0] = DS1307_CHECK_WORD;
     be6:	8d ee       	ldi	r24, 0xED	; 237
     be8:	89 83       	std	Y+1, r24	; 0x01

        for (i=1 ; i<=lenght      ; ++i)    buffer[i] = init_data[i-1];
     bea:	91 e0       	ldi	r25, 0x01	; 1
     bec:	f9 16       	cp	r15, r25
     bee:	78 f0       	brcs	.+30     	; 0xc0e <ds_init+0x72>
     bf0:	e9 2f       	mov	r30, r25
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	a1 e0       	ldi	r26, 0x01	; 1
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	ac 0f       	add	r26, r28
     bfa:	bd 1f       	adc	r27, r29
     bfc:	ae 0f       	add	r26, r30
     bfe:	bf 1f       	adc	r27, r31
     c00:	e0 0f       	add	r30, r16
     c02:	f1 1f       	adc	r31, r17
     c04:	31 97       	sbiw	r30, 0x01	; 1
     c06:	80 81       	ld	r24, Z
     c08:	8c 93       	st	X, r24
     c0a:	9f 5f       	subi	r25, 0xFF	; 255
     c0c:	ef cf       	rjmp	.-34     	; 0xbec <ds_init+0x50>
        for (    ; i<DS1307_NSRAM ; ++i)    buffer[i] = 0;
     c0e:	98 33       	cpi	r25, 0x38	; 56
     c10:	48 f4       	brcc	.+18     	; 0xc24 <ds_init+0x88>
     c12:	e1 e0       	ldi	r30, 0x01	; 1
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	ec 0f       	add	r30, r28
     c18:	fd 1f       	adc	r31, r29
     c1a:	e9 0f       	add	r30, r25
     c1c:	f1 1d       	adc	r31, r1
     c1e:	10 82       	st	Z, r1
     c20:	9f 5f       	subi	r25, 0xFF	; 255
     c22:	f5 cf       	rjmp	.-22     	; 0xc0e <ds_init+0x72>

        ack += ds_write(0x08, buffer, DS1307_NSRAM);
     c24:	48 e3       	ldi	r20, 0x38	; 56
     c26:	be 01       	movw	r22, r28
     c28:	6f 5f       	subi	r22, 0xFF	; 255
     c2a:	7f 4f       	sbci	r23, 0xFF	; 255
     c2c:	88 e0       	ldi	r24, 0x08	; 8
     c2e:	0e 94 04 05 	call	0xa08	; 0xa08 <ds_write>
     c32:	8e 0d       	add	r24, r14
     c34:	01 c0       	rjmp	.+2      	; 0xc38 <ds_init+0x9c>

#ifdef  H12
    uint8_t time[] = {0x00, 0x00, 0x40, 0x01, 0x01, 0x01, 0x0e};
#endif

    uint8_t check, ack = 0;
     c36:	80 e0       	ldi	r24, 0x00	; 0

        ack += ds_write(0x08, buffer, DS1307_NSRAM);
    }

    return ack;
}
     c38:	ef 96       	adiw	r28, 0x3f	; 63
     c3a:	0f b6       	in	r0, 0x3f	; 63
     c3c:	f8 94       	cli
     c3e:	de bf       	out	0x3e, r29	; 62
     c40:	0f be       	out	0x3f, r0	; 63
     c42:	cd bf       	out	0x3d, r28	; 61
     c44:	df 91       	pop	r29
     c46:	cf 91       	pop	r28
     c48:	1f 91       	pop	r17
     c4a:	0f 91       	pop	r16
     c4c:	ff 90       	pop	r15
     c4e:	ef 90       	pop	r14
     c50:	08 95       	ret

00000c52 <ds_read_time>:

/* Считывается время - передается массив из семи байт (секунды, минуты, часы, день недели, дата, месяц, год).
    Возвращает 0 если все прошло успешно - иначе > 0. */

uint8_t ds_read_time ( uint8_t *time )
{
     c52:	1f 93       	push	r17
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	1f 92       	push	r1
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
     c5e:	18 2f       	mov	r17, r24
    uint8_t ack, i;

    ack = ds_read(0x00, time, 7);
     c60:	47 e0       	ldi	r20, 0x07	; 7
     c62:	68 2f       	mov	r22, r24
     c64:	79 2f       	mov	r23, r25
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	99 83       	std	Y+1, r25	; 0x01
     c6a:	0e 94 61 05 	call	0xac2	; 0xac2 <ds_read>
     c6e:	e1 2f       	mov	r30, r17
     c70:	99 81       	ldd	r25, Y+1	; 0x01
     c72:	f9 2f       	mov	r31, r25

    for (i=0 ; i<7 ; ++i)
     c74:	90 e0       	ldi	r25, 0x00	; 0
        time[i] = ((time[i]>>4)*10) + (time[i]&0x0f);
     c76:	20 81       	ld	r18, Z
     c78:	32 2f       	mov	r19, r18
     c7a:	32 95       	swap	r19
     c7c:	3f 70       	andi	r19, 0x0F	; 15
     c7e:	2f 70       	andi	r18, 0x0F	; 15
     c80:	4a e0       	ldi	r20, 0x0A	; 10
     c82:	34 9f       	mul	r19, r20
     c84:	20 0d       	add	r18, r0
     c86:	11 24       	eor	r1, r1
     c88:	21 93       	st	Z+, r18
{
    uint8_t ack, i;

    ack = ds_read(0x00, time, 7);

    for (i=0 ; i<7 ; ++i)
     c8a:	9f 5f       	subi	r25, 0xFF	; 255
     c8c:	97 30       	cpi	r25, 0x07	; 7
     c8e:	99 f7       	brne	.-26     	; 0xc76 <ds_read_time+0x24>
        time[i] = ((time[i]>>4)*10) + (time[i]&0x0f);

    return ack;
}
     c90:	0f 90       	pop	r0
     c92:	df 91       	pop	r29
     c94:	cf 91       	pop	r28
     c96:	1f 91       	pop	r17
     c98:	08 95       	ret

00000c9a <uart_init>:
volatile uint8_t ft_event_buffer[RECORD_SIZE*2], i;


void uart_init(void)
{
    UCSRA = UCSRA_DEF;
     c9a:	1b b8       	out	0x0b, r1	; 11
    UCSRB = UCSRB_DEF;
     c9c:	88 e1       	ldi	r24, 0x18	; 24
     c9e:	8a b9       	out	0x0a, r24	; 10
    UCSRC = UCSRC_DEF;
     ca0:	86 e8       	ldi	r24, 0x86	; 134
     ca2:	80 bd       	out	0x20, r24	; 32
    UBRRH = UBRRH_DEF;
     ca4:	10 bc       	out	0x20, r1	; 32
    UBRRL = UBRRL_DEF;
     ca6:	87 e6       	ldi	r24, 0x67	; 103
     ca8:	89 b9       	out	0x09, r24	; 9

    FT_DDR &= ~((1<<CTS) | (1<<RTS));
     caa:	81 b3       	in	r24, 0x11	; 17
     cac:	83 7f       	andi	r24, 0xF3	; 243
     cae:	81 bb       	out	0x11, r24	; 17
    FT_PORT |= ((1<<CTS) | (1<<RTS));
     cb0:	82 b3       	in	r24, 0x12	; 18
     cb2:	8c 60       	ori	r24, 0x0C	; 12
     cb4:	82 bb       	out	0x12, r24	; 18
     cb6:	08 95       	ret

00000cb8 <ft_data_converter>:



void ft_data_converter(void)
{
    seep_wait();
     cb8:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <seep_wait>
    seep_read(uart_pointer, ft_event_buffer+RECORD_SIZE, RECORD_SIZE);
     cbc:	80 91 69 02 	lds	r24, 0x0269
     cc0:	90 91 6a 02 	lds	r25, 0x026A
     cc4:	48 e0       	ldi	r20, 0x08	; 8
     cc6:	64 e7       	ldi	r22, 0x74	; 116
     cc8:	72 e0       	ldi	r23, 0x02	; 2
     cca:	0e 94 16 04 	call	0x82c	; 0x82c <seep_read>

    ft_event_buffer[0] = 0x00;
     cce:	10 92 6c 02 	sts	0x026C, r1
    ft_event_buffer[1] = 0x00;
     cd2:	10 92 6d 02 	sts	0x026D, r1
    ft_event_buffer[2] = ft_event_buffer[9];
     cd6:	80 91 75 02 	lds	r24, 0x0275
     cda:	80 93 6e 02 	sts	0x026E, r24
    ft_event_buffer[3] = 2 - ft_event_buffer[8];
     cde:	90 91 74 02 	lds	r25, 0x0274
     ce2:	82 e0       	ldi	r24, 0x02	; 2
     ce4:	89 1b       	sub	r24, r25
     ce6:	80 93 6f 02 	sts	0x026F, r24

    for (i = 5 ; i < 255 ; --i)  {
     cea:	85 e0       	ldi	r24, 0x05	; 5
     cec:	80 93 6b 02 	sts	0x026B, r24
        ft_event_buffer[15-i-i-1] = ft_event_buffer[15-i] / 10;
     cf0:	2f e0       	ldi	r18, 0x0F	; 15
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	4a e0       	ldi	r20, 0x0A	; 10
    ft_event_buffer[0] = 0x00;
    ft_event_buffer[1] = 0x00;
    ft_event_buffer[2] = ft_event_buffer[9];
    ft_event_buffer[3] = 2 - ft_event_buffer[8];

    for (i = 5 ; i < 255 ; --i)  {
     cf6:	80 91 6b 02 	lds	r24, 0x026B
     cfa:	8f 3f       	cpi	r24, 0xFF	; 255
     cfc:	99 f1       	breq	.+102    	; 0xd64 <ft_data_converter+0xac>
        ft_event_buffer[15-i-i-1] = ft_event_buffer[15-i] / 10;
     cfe:	90 91 6b 02 	lds	r25, 0x026B
     d02:	80 91 6b 02 	lds	r24, 0x026B
     d06:	f9 01       	movw	r30, r18
     d08:	e9 1b       	sub	r30, r25
     d0a:	f1 09       	sbc	r31, r1
     d0c:	e8 1b       	sub	r30, r24
     d0e:	f1 09       	sbc	r31, r1
     d10:	80 91 6b 02 	lds	r24, 0x026B
     d14:	d9 01       	movw	r26, r18
     d16:	a8 1b       	sub	r26, r24
     d18:	b1 09       	sbc	r27, r1
     d1a:	a4 59       	subi	r26, 0x94	; 148
     d1c:	bd 4f       	sbci	r27, 0xFD	; 253
     d1e:	8c 91       	ld	r24, X
     d20:	64 2f       	mov	r22, r20
     d22:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <__udivmodqi4>
     d26:	e5 59       	subi	r30, 0x95	; 149
     d28:	fd 4f       	sbci	r31, 0xFD	; 253
     d2a:	80 83       	st	Z, r24
        ft_event_buffer[15-i-i] = ft_event_buffer[15-i] % 10;
     d2c:	90 91 6b 02 	lds	r25, 0x026B
     d30:	80 91 6b 02 	lds	r24, 0x026B
     d34:	f9 01       	movw	r30, r18
     d36:	e9 1b       	sub	r30, r25
     d38:	f1 09       	sbc	r31, r1
     d3a:	e8 1b       	sub	r30, r24
     d3c:	f1 09       	sbc	r31, r1
     d3e:	80 91 6b 02 	lds	r24, 0x026B
     d42:	d9 01       	movw	r26, r18
     d44:	a8 1b       	sub	r26, r24
     d46:	b1 09       	sbc	r27, r1
     d48:	a4 59       	subi	r26, 0x94	; 148
     d4a:	bd 4f       	sbci	r27, 0xFD	; 253
     d4c:	8c 91       	ld	r24, X
     d4e:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <__udivmodqi4>
     d52:	e4 59       	subi	r30, 0x94	; 148
     d54:	fd 4f       	sbci	r31, 0xFD	; 253
     d56:	90 83       	st	Z, r25
    ft_event_buffer[0] = 0x00;
    ft_event_buffer[1] = 0x00;
    ft_event_buffer[2] = ft_event_buffer[9];
    ft_event_buffer[3] = 2 - ft_event_buffer[8];

    for (i = 5 ; i < 255 ; --i)  {
     d58:	80 91 6b 02 	lds	r24, 0x026B
     d5c:	81 50       	subi	r24, 0x01	; 1
     d5e:	80 93 6b 02 	sts	0x026B, r24
     d62:	c9 cf       	rjmp	.-110    	; 0xcf6 <ft_data_converter+0x3e>
        ft_event_buffer[15-i-i-1] = ft_event_buffer[15-i] / 10;
        ft_event_buffer[15-i-i] = ft_event_buffer[15-i] % 10;
    }
    i = 0;
     d64:	10 92 6b 02 	sts	0x026B, r1
     d68:	08 95       	ret

00000d6a <__vector_14>:
}



ISR(USART_UDRE_vect)
{
     d6a:	1f 92       	push	r1
     d6c:	0f 92       	push	r0
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	0f 92       	push	r0
     d72:	11 24       	eor	r1, r1
     d74:	2f 93       	push	r18
     d76:	3f 93       	push	r19
     d78:	4f 93       	push	r20
     d7a:	5f 93       	push	r21
     d7c:	6f 93       	push	r22
     d7e:	7f 93       	push	r23
     d80:	8f 93       	push	r24
     d82:	9f 93       	push	r25
     d84:	af 93       	push	r26
     d86:	bf 93       	push	r27
     d88:	ef 93       	push	r30
     d8a:	ff 93       	push	r31
    cli();
     d8c:	f8 94       	cli
    UDR = ft_event_buffer[i++];
     d8e:	e0 91 6b 02 	lds	r30, 0x026B
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	8e 0f       	add	r24, r30
     d96:	80 93 6b 02 	sts	0x026B, r24
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	e4 59       	subi	r30, 0x94	; 148
     d9e:	fd 4f       	sbci	r31, 0xFD	; 253
     da0:	80 81       	ld	r24, Z
     da2:	8c b9       	out	0x0c, r24	; 12

    if( i == (RECORD_SIZE*2) )
     da4:	80 91 6b 02 	lds	r24, 0x026B
     da8:	80 31       	cpi	r24, 0x10	; 16
     daa:	e1 f4       	brne	.+56     	; 0xde4 <__vector_14+0x7a>
    {
        if (uart_pointer > RECORD_SIZE)     uart_pointer -= RECORD_SIZE;
     dac:	80 91 69 02 	lds	r24, 0x0269
     db0:	90 91 6a 02 	lds	r25, 0x026A
     db4:	09 97       	sbiw	r24, 0x09	; 9
     db6:	50 f0       	brcs	.+20     	; 0xdcc <__vector_14+0x62>
     db8:	80 91 69 02 	lds	r24, 0x0269
     dbc:	90 91 6a 02 	lds	r25, 0x026A
     dc0:	08 97       	sbiw	r24, 0x08	; 8
     dc2:	90 93 6a 02 	sts	0x026A, r25
     dc6:	80 93 69 02 	sts	0x0269, r24
     dca:	0a c0       	rjmp	.+20     	; 0xde0 <__vector_14+0x76>
        else {
            UCSRB &= ~(1<<UDRIE);
     dcc:	55 98       	cbi	0x0a, 5	; 10
            setTimer(MSG_PACK_HANDLER, 0, 1);
     dce:	41 e0       	ldi	r20, 0x01	; 1
     dd0:	50 e0       	ldi	r21, 0x00	; 0
     dd2:	60 e0       	ldi	r22, 0x00	; 0
     dd4:	85 e0       	ldi	r24, 0x05	; 5
     dd6:	0e 94 bf 14 	call	0x297e	; 0x297e <setTimer>
            status2 = ' ';
     dda:	80 e2       	ldi	r24, 0x20	; 32
     ddc:	80 93 a4 02 	sts	0x02A4, r24
        }
        ft_data_converter();
     de0:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <ft_data_converter>
    }
    sei();
     de4:	78 94       	sei
}
     de6:	ff 91       	pop	r31
     de8:	ef 91       	pop	r30
     dea:	bf 91       	pop	r27
     dec:	af 91       	pop	r26
     dee:	9f 91       	pop	r25
     df0:	8f 91       	pop	r24
     df2:	7f 91       	pop	r23
     df4:	6f 91       	pop	r22
     df6:	5f 91       	pop	r21
     df8:	4f 91       	pop	r20
     dfa:	3f 91       	pop	r19
     dfc:	2f 91       	pop	r18
     dfe:	0f 90       	pop	r0
     e00:	0f be       	out	0x3f, r0	; 63
     e02:	0f 90       	pop	r0
     e04:	1f 90       	pop	r1
     e06:	18 95       	reti

00000e08 <uart_check>:

uint8_t uart_check(msg_par par)
{
    uint8_t data;

    if( UCSRA & (1<<RXC) )
     e08:	5f 9b       	sbis	0x0b, 7	; 11
     e0a:	3d c0       	rjmp	.+122    	; 0xe86 <uart_check+0x7e>
    {
        data = UDR;
     e0c:	8c b1       	in	r24, 0x0c	; 12
        switch (data)
     e0e:	80 3f       	cpi	r24, 0xF0	; 240
     e10:	b9 f0       	breq	.+46     	; 0xe40 <uart_check+0x38>
     e12:	89 3f       	cpi	r24, 0xF9	; 249
     e14:	c1 f5       	brne	.+112    	; 0xe86 <uart_check+0x7e>
                break;
            }

            case CLEAN_DATA :
            {
                seep_wait();
     e16:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <seep_wait>
                seep_write_byte(0x0000, 0x00);
     e1a:	60 e0       	ldi	r22, 0x00	; 0
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	0e 94 1f 03 	call	0x63e	; 0x63e <seep_write_byte>
                seep_wait();
     e24:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <seep_wait>
                seep_write_byte(0x0001, 0x08);
     e28:	68 e0       	ldi	r22, 0x08	; 8
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	0e 94 1f 03 	call	0x63e	; 0x63e <seep_write_byte>

                seep_pointer = 0x0008;
     e32:	88 e0       	ldi	r24, 0x08	; 8
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	90 93 bb 02 	sts	0x02BB, r25
     e3a:	80 93 ba 02 	sts	0x02BA, r24

                while ( !(UCSRA & (1<<UDRE)) );
     e3e:	1b c0       	rjmp	.+54     	; 0xe76 <uart_check+0x6e>
        data = UDR;
        switch (data)
        {
            case SEND_DATA :
            {
                if (seep_pointer <= RECORD_SIZE) return 2;
     e40:	80 91 ba 02 	lds	r24, 0x02BA
     e44:	90 91 bb 02 	lds	r25, 0x02BB
     e48:	09 97       	sbiw	r24, 0x09	; 9
     e4a:	f8 f0       	brcs	.+62     	; 0xe8a <uart_check+0x82>
                killTimer(MSG_PACK_HANDLER);
     e4c:	85 e0       	ldi	r24, 0x05	; 5
     e4e:	0e 94 fd 14 	call	0x29fa	; 0x29fa <killTimer>
                rfm12_sleep();
     e52:	0e 94 b2 09 	call	0x1364	; 0x1364 <rfm12_sleep>
                status2 = 'S';
     e56:	83 e5       	ldi	r24, 0x53	; 83
     e58:	80 93 a4 02 	sts	0x02A4, r24

                uart_pointer = seep_pointer - RECORD_SIZE;
     e5c:	80 91 ba 02 	lds	r24, 0x02BA
     e60:	90 91 bb 02 	lds	r25, 0x02BB
     e64:	08 97       	sbiw	r24, 0x08	; 8
     e66:	90 93 6a 02 	sts	0x026A, r25
     e6a:	80 93 69 02 	sts	0x0269, r24
                ft_data_converter();
     e6e:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <ft_data_converter>

                UCSRB |= (1<<UDRIE);
     e72:	55 9a       	sbi	0x0a, 5	; 10
     e74:	08 c0       	rjmp	.+16     	; 0xe86 <uart_check+0x7e>
                seep_wait();
                seep_write_byte(0x0001, 0x08);

                seep_pointer = 0x0008;

                while ( !(UCSRA & (1<<UDRE)) );
     e76:	5d 9b       	sbis	0x0b, 5	; 11
     e78:	fe cf       	rjmp	.-4      	; 0xe76 <uart_check+0x6e>
                UDR = CLEAN_DATA_OK1;
     e7a:	8a ef       	ldi	r24, 0xFA	; 250
     e7c:	8c b9       	out	0x0c, r24	; 12
                while ( !(UCSRA & (1<<UDRE)) );
     e7e:	5d 9b       	sbis	0x0b, 5	; 11
     e80:	fe cf       	rjmp	.-4      	; 0xe7e <uart_check+0x76>
                UDR = CLEAN_DATA_OK2;
     e82:	8b ef       	ldi	r24, 0xFB	; 251
     e84:	8c b9       	out	0x0c, r24	; 12

                break;
            }
        }
    }
    return 1;
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	08 95       	ret
        data = UDR;
        switch (data)
        {
            case SEND_DATA :
            {
                if (seep_pointer <= RECORD_SIZE) return 2;
     e8a:	82 e0       	ldi	r24, 0x02	; 2
                break;
            }
        }
    }
    return 1;
}
     e8c:	08 95       	ret

00000e8e <repeatKey>:
		}
	}
	return(0);
}

unsigned char repeatKey(msg_par par) {
     e8e:	cf 93       	push	r28
     e90:	c8 2f       	mov	r28, r24
	if (prevKey == lastKey) {
     e92:	60 91 7e 02 	lds	r22, 0x027E
     e96:	80 91 7d 02 	lds	r24, 0x027D
     e9a:	68 13       	cpse	r22, r24
     e9c:	10 c0       	rjmp	.+32     	; 0xebe <repeatKey+0x30>
		sendMessage(MSG_KEY_PRESS, lastKey);
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	0e 94 33 14 	call	0x2866	; 0x2866 <sendMessage>
		if (par>5)
     ea4:	c6 30       	cpi	r28, 0x06	; 6
     ea6:	28 f0       	brcs	.+10     	; 0xeb2 <repeatKey+0x24>
			setTimer(MSG_KEY_REPEAT,par-1,par);
     ea8:	4c 2f       	mov	r20, r28
     eaa:	50 e0       	ldi	r21, 0x00	; 0
     eac:	6f ef       	ldi	r22, 0xFF	; 255
     eae:	6c 0f       	add	r22, r28
     eb0:	03 c0       	rjmp	.+6      	; 0xeb8 <repeatKey+0x2a>
		else
			setTimer(MSG_KEY_REPEAT,5,5);
     eb2:	45 e0       	ldi	r20, 0x05	; 5
     eb4:	50 e0       	ldi	r21, 0x00	; 0
     eb6:	65 e0       	ldi	r22, 0x05	; 5
     eb8:	82 e0       	ldi	r24, 0x02	; 2
     eba:	0e 94 bf 14 	call	0x297e	; 0x297e <setTimer>
	}
	return(0);
}
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	cf 91       	pop	r28
     ec2:	08 95       	ret

00000ec4 <getKeyCode>:

uint8_t lastKey,prevKey;
uint8_t kf1,kf2,kf3;

unsigned char getKeyCode(uint8_t ah) {
	if (!(ah & _BV(KBD_PIN_OK))) {
     ec4:	81 ff       	sbrs	r24, 1
     ec6:	0a c0       	rjmp	.+20     	; 0xedc <getKeyCode+0x18>
		return KEY_OK;
	}
	if (!(ah & _BV(KBD_PIN_UP))) {
     ec8:	80 ff       	sbrs	r24, 0
     eca:	0a c0       	rjmp	.+20     	; 0xee0 <getKeyCode+0x1c>
		return KEY_UP;
	}
	if (!(ah & _BV(KBD_PIN_DOWN))) {
     ecc:	84 ff       	sbrs	r24, 4
     ece:	0a c0       	rjmp	.+20     	; 0xee4 <getKeyCode+0x20>
		return KEY_DOWN;
	}
	if (!(ah & _BV(KBD_PIN_LEFT))) {
     ed0:	83 ff       	sbrs	r24, 3
     ed2:	0a c0       	rjmp	.+20     	; 0xee8 <getKeyCode+0x24>
		return KEY_LEFT;
	}
	if (!(ah & _BV(KBD_PIN_RIGHT))) {
     ed4:	82 ff       	sbrs	r24, 2
     ed6:	0a c0       	rjmp	.+20     	; 0xeec <getKeyCode+0x28>
		return KEY_RIGHT;
	}
	return 0;
     ed8:	80 e0       	ldi	r24, 0x00	; 0
     eda:	08 95       	ret
uint8_t lastKey,prevKey;
uint8_t kf1,kf2,kf3;

unsigned char getKeyCode(uint8_t ah) {
	if (!(ah & _BV(KBD_PIN_OK))) {
		return KEY_OK;
     edc:	85 e0       	ldi	r24, 0x05	; 5
     ede:	08 95       	ret
	}
	if (!(ah & _BV(KBD_PIN_UP))) {
		return KEY_UP;
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	08 95       	ret
	}
	if (!(ah & _BV(KBD_PIN_DOWN))) {
		return KEY_DOWN;
     ee4:	82 e0       	ldi	r24, 0x02	; 2
     ee6:	08 95       	ret
	}
	if (!(ah & _BV(KBD_PIN_LEFT))) {
		return KEY_LEFT;
     ee8:	84 e0       	ldi	r24, 0x04	; 4
     eea:	08 95       	ret
	}
	if (!(ah & _BV(KBD_PIN_RIGHT))) {
		return KEY_RIGHT;
     eec:	83 e0       	ldi	r24, 0x03	; 3
	}
	return 0;
}
     eee:	08 95       	ret

00000ef0 <readKey>:

unsigned char readKey(msg_par par) {
     ef0:	1f 93       	push	r17
     ef2:	cf 93       	push	r28
     ef4:	df 93       	push	r29
     ef6:	1f 92       	push	r1
     ef8:	cd b7       	in	r28, 0x3d	; 61
     efa:	de b7       	in	r29, 0x3e	; 62

	kf3=kf2;                                // сравнение предыдущих состояний кнопок с текущим
     efc:	60 91 80 02 	lds	r22, 0x0280
     f00:	60 93 7c 02 	sts	0x027C, r22
	kf2=kf1;
     f04:	10 91 7f 02 	lds	r17, 0x027F
     f08:	10 93 80 02 	sts	0x0280, r17
	kf1=getKeyCode(KBD_PIN & KBD_MASK);
     f0c:	89 b3       	in	r24, 0x19	; 25
     f0e:	8f 71       	andi	r24, 0x1F	; 31
     f10:	69 83       	std	Y+1, r22	; 0x01
     f12:	0e 94 62 07 	call	0xec4	; 0xec4 <getKeyCode>
     f16:	80 93 7f 02 	sts	0x027F, r24

	if ((kf2==kf1) && (kf3==kf2)) {         // если совпадают - значит это нажатие а не дребезг
     f1a:	69 81       	ldd	r22, Y+1	; 0x01
     f1c:	18 13       	cpse	r17, r24
     f1e:	1a c0       	rjmp	.+52     	; 0xf54 <readKey+0x64>
     f20:	61 13       	cpse	r22, r17
     f22:	18 c0       	rjmp	.+48     	; 0xf54 <readKey+0x64>
		prevKey = lastKey;
     f24:	80 91 7d 02 	lds	r24, 0x027D
     f28:	80 93 7e 02 	sts	0x027E, r24
		lastKey = kf1;
     f2c:	60 93 7d 02 	sts	0x027D, r22

		if (prevKey != lastKey) {                   // сравнивается предыдущее зафиксированное нажатие с текущим
     f30:	86 17       	cp	r24, r22
     f32:	81 f0       	breq	.+32     	; 0xf54 <readKey+0x64>
			sendMessage(MSG_KEY_PRESS, lastKey);    // если не совпадают - значит новое нажатие кнопки
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	0e 94 33 14 	call	0x2866	; 0x2866 <sendMessage>
			killTimer(MSG_KEY_REPEAT);
     f3a:	82 e0       	ldi	r24, 0x02	; 2
     f3c:	0e 94 fd 14 	call	0x29fa	; 0x29fa <killTimer>
			if (lastKey) {
     f40:	80 91 7d 02 	lds	r24, 0x027D
     f44:	88 23       	and	r24, r24
     f46:	31 f0       	breq	.+12     	; 0xf54 <readKey+0x64>
				setTimer(MSG_KEY_REPEAT,200,500);
     f48:	44 ef       	ldi	r20, 0xF4	; 244
     f4a:	51 e0       	ldi	r21, 0x01	; 1
     f4c:	68 ec       	ldi	r22, 0xC8	; 200
     f4e:	82 e0       	ldi	r24, 0x02	; 2
     f50:	0e 94 bf 14 	call	0x297e	; 0x297e <setTimer>
			}
		}
	}
	return(0);
}
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	0f 90       	pop	r0
     f58:	df 91       	pop	r29
     f5a:	cf 91       	pop	r28
     f5c:	1f 91       	pop	r17
     f5e:	08 95       	ret

00000f60 <KBD_init>:
}



void  KBD_init() {
	KBD_PORT |= KBD_MASK;
     f60:	8b b3       	in	r24, 0x1b	; 27
     f62:	8f 61       	ori	r24, 0x1F	; 31
     f64:	8b bb       	out	0x1b, r24	; 27
	KBD_DDR &= ~KBD_MASK;
     f66:	8a b3       	in	r24, 0x1a	; 26
     f68:	80 7e       	andi	r24, 0xE0	; 224
     f6a:	8a bb       	out	0x1a, r24	; 26

	lastKey = 0;
     f6c:	10 92 7d 02 	sts	0x027D, r1
	prevKey = 0;
     f70:	10 92 7e 02 	sts	0x027E, r1

	setHandler(MSG_KEY_SCAN, &readKey);
     f74:	68 e7       	ldi	r22, 0x78	; 120
     f76:	77 e0       	ldi	r23, 0x07	; 7
     f78:	83 e0       	ldi	r24, 0x03	; 3
     f7a:	0e 94 78 13 	call	0x26f0	; 0x26f0 <setHandler>
	setHandler(MSG_KEY_REPEAT, &repeatKey);
     f7e:	67 e4       	ldi	r22, 0x47	; 71
     f80:	77 e0       	ldi	r23, 0x07	; 7
     f82:	82 e0       	ldi	r24, 0x02	; 2
     f84:	0e 94 78 13 	call	0x26f0	; 0x26f0 <setHandler>

	setTimer(MSG_KEY_SCAN, 1, 50);
     f88:	42 e3       	ldi	r20, 0x32	; 50
     f8a:	50 e0       	ldi	r21, 0x00	; 0
     f8c:	61 e0       	ldi	r22, 0x01	; 1
     f8e:	83 e0       	ldi	r24, 0x03	; 3
     f90:	0c 94 bf 14 	jmp	0x297e	; 0x297e <setTimer>

00000f94 <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     f94:	ad 9a       	sbi	0x15, 5	; 21
    lcd_e_delay();
     f96:	00 c0       	rjmp	.+0      	; 0xf98 <toggle_e+0x4>
    lcd_e_low();
     f98:	ad 98       	cbi	0x15, 5	; 21
     f9a:	08 95       	ret

00000f9c <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs)
{
     f9c:	1f 93       	push	r17
     f9e:	cf 93       	push	r28
     fa0:	df 93       	push	r29
     fa2:	1f 92       	push	r1
     fa4:	cd b7       	in	r28, 0x3d	; 61
     fa6:	de b7       	in	r29, 0x3e	; 62
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
     fa8:	66 23       	and	r22, r22
     faa:	11 f0       	breq	.+4      	; 0xfb0 <lcd_write+0x14>
       lcd_rs_high();
     fac:	ae 9a       	sbi	0x15, 6	; 21
     fae:	01 c0       	rjmp	.+2      	; 0xfb2 <lcd_write+0x16>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
     fb0:	ae 98       	cbi	0x15, 6	; 21
    }
    lcd_rw_low();
     fb2:	ac 98       	cbi	0x15, 4	; 21

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;
     fb4:	94 b3       	in	r25, 0x14	; 20
     fb6:	9f 60       	ori	r25, 0x0F	; 15
     fb8:	94 bb       	out	0x14, r25	; 20

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
     fba:	15 b3       	in	r17, 0x15	; 21
     fbc:	10 7f       	andi	r17, 0xF0	; 240
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
     fbe:	98 2f       	mov	r25, r24
     fc0:	92 95       	swap	r25
     fc2:	9f 70       	andi	r25, 0x0F	; 15
     fc4:	91 2b       	or	r25, r17
     fc6:	95 bb       	out	0x15, r25	; 21
        lcd_e_toggle();
     fc8:	89 83       	std	Y+1, r24	; 0x01
     fca:	0e 94 ca 07 	call	0xf94	; 0xf94 <toggle_e>

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	8f 70       	andi	r24, 0x0F	; 15
     fd2:	81 2b       	or	r24, r17
     fd4:	85 bb       	out	0x15, r24	; 21
        lcd_e_toggle();
     fd6:	0e 94 ca 07 	call	0xf94	; 0xf94 <toggle_e>

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
     fda:	1f 60       	ori	r17, 0x0F	; 15
     fdc:	15 bb       	out	0x15, r17	; 21
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    }
}
     fde:	0f 90       	pop	r0
     fe0:	df 91       	pop	r29
     fe2:	cf 91       	pop	r28
     fe4:	1f 91       	pop	r17
     fe6:	08 95       	ret

00000fe8 <lcd_read.constprop.0>:


    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
     fe8:	ae 98       	cbi	0x15, 6	; 21
    lcd_rw_high();                           /* RW=1  read mode      */
     fea:	ac 9a       	sbi	0x15, 4	; 21

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
     fec:	84 b3       	in	r24, 0x14	; 20
     fee:	80 7f       	andi	r24, 0xF0	; 240
     ff0:	84 bb       	out	0x14, r24	; 20

        lcd_e_high();
     ff2:	ad 9a       	sbi	0x15, 5	; 21
        lcd_e_delay();
     ff4:	00 c0       	rjmp	.+0      	; 0xff6 <lcd_read.constprop.0+0xe>
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
     ff6:	83 b3       	in	r24, 0x13	; 19
        lcd_e_low();
     ff8:	ad 98       	cbi	0x15, 5	; 21

        lcd_e_delay();                       /* Enable 500ns low       */
     ffa:	00 c0       	rjmp	.+0      	; 0xffc <lcd_read.constprop.0+0x14>

        lcd_e_high();
     ffc:	ad 9a       	sbi	0x15, 5	; 21
        lcd_e_delay();
     ffe:	00 c0       	rjmp	.+0      	; 0x1000 <lcd_read.constprop.0+0x18>
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
    1000:	93 b3       	in	r25, 0x13	; 19
    1002:	9f 70       	andi	r25, 0x0F	; 15
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */

        lcd_e_high();
        lcd_e_delay();
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
    1004:	82 95       	swap	r24
    1006:	80 7f       	andi	r24, 0xF0	; 240
        lcd_e_delay();                       /* Enable 500ns low       */

        lcd_e_high();
        lcd_e_delay();
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
        lcd_e_low();
    1008:	ad 98       	cbi	0x15, 5	; 21
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;
        lcd_e_low();
    }
    return data;
}
    100a:	89 2b       	or	r24, r25
    100c:	08 95       	ret

0000100e <lcd_waitbusy>:

{
    register uint8_t c;

    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
    100e:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <lcd_read.constprop.0>
    1012:	87 fd       	sbrc	r24, 7
    1014:	fc cf       	rjmp	.-8      	; 0x100e <lcd_waitbusy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
    1016:	84 e0       	ldi	r24, 0x04	; 4
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	01 97       	sbiw	r24, 0x01	; 1
    101c:	f1 f7       	brne	.-4      	; 0x101a <lcd_waitbusy+0xc>

    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
    101e:	0c 94 f4 07 	jmp	0xfe8	; 0xfe8 <lcd_read.constprop.0>

00001022 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    1022:	cf 93       	push	r28
    1024:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
    1026:	0e 94 07 08 	call	0x100e	; 0x100e <lcd_waitbusy>
    lcd_write(cmd,0);
    102a:	60 e0       	ldi	r22, 0x00	; 0
    102c:	8c 2f       	mov	r24, r28
}
    102e:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
    lcd_write(cmd,0);
    1030:	0c 94 ce 07 	jmp	0xf9c	; 0xf9c <lcd_write>

00001034 <lcd_data>:
Send data byte to LCD controller
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
    1034:	cf 93       	push	r28
    1036:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
    1038:	0e 94 07 08 	call	0x100e	; 0x100e <lcd_waitbusy>
    lcd_write(data,1);
    103c:	61 e0       	ldi	r22, 0x01	; 1
    103e:	8c 2f       	mov	r24, r28
}
    1040:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
    lcd_waitbusy();
    lcd_write(data,1);
    1042:	0c 94 ce 07 	jmp	0xf9c	; 0xf9c <lcd_write>

00001046 <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 )
    1046:	61 11       	cpse	r22, r1
    1048:	02 c0       	rjmp	.+4      	; 0x104e <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    104a:	80 58       	subi	r24, 0x80	; 128
    104c:	01 c0       	rjmp	.+2      	; 0x1050 <lcd_gotoxy+0xa>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
    104e:	80 54       	subi	r24, 0x40	; 64
    1050:	0c 94 11 08 	jmp	0x1022	; 0x1022 <lcd_command>

00001054 <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
    1054:	0e 94 07 08 	call	0x100e	; 0x100e <lcd_waitbusy>
}
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	08 95       	ret

0000105c <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	0c 94 11 08 	jmp	0x1022	; 0x1022 <lcd_command>

00001062 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
    1062:	82 e0       	ldi	r24, 0x02	; 2
    1064:	0c 94 11 08 	jmp	0x1022	; 0x1022 <lcd_command>

00001068 <lcd_putc>:
Display character at current cursor position
Input:    character to be displayed
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
    1068:	cf 93       	push	r28
    106a:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
    106c:	0e 94 07 08 	call	0x100e	; 0x100e <lcd_waitbusy>
    if (c=='\n')
    1070:	ca 30       	cpi	r28, 0x0A	; 10
    1072:	49 f4       	brne	.+18     	; 0x1086 <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
    1074:	80 34       	cpi	r24, 0x40	; 64
    1076:	10 f4       	brcc	.+4      	; 0x107c <lcd_putc+0x14>
        addressCounter = LCD_START_LINE2;
    1078:	80 e4       	ldi	r24, 0x40	; 64
    107a:	01 c0       	rjmp	.+2      	; 0x107e <lcd_putc+0x16>
    else
        addressCounter = LCD_START_LINE1;
    107c:	80 e0       	ldi	r24, 0x00	; 0
        addressCounter = LCD_START_LINE4;
    else
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
    107e:	80 58       	subi	r24, 0x80	; 128
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
    }

}/* lcd_putc */
    1080:	cf 91       	pop	r28
        addressCounter = LCD_START_LINE4;
    else
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
    1082:	0c 94 11 08 	jmp	0x1022	; 0x1022 <lcd_command>
#if LCD_LINES==1
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#elif LCD_LINES==2
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
    1086:	80 31       	cpi	r24, 0x10	; 16
    1088:	19 f4       	brne	.+6      	; 0x1090 <lcd_putc+0x28>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);
    108a:	60 e0       	ldi	r22, 0x00	; 0
    108c:	80 ec       	ldi	r24, 0xC0	; 192
    108e:	04 c0       	rjmp	.+8      	; 0x1098 <lcd_putc+0x30>
        }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ){
    1090:	80 35       	cpi	r24, 0x50	; 80
    1092:	21 f4       	brne	.+8      	; 0x109c <lcd_putc+0x34>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
    1094:	60 e0       	ldi	r22, 0x00	; 0
    1096:	80 e8       	ldi	r24, 0x80	; 128
    1098:	0e 94 ce 07 	call	0xf9c	; 0xf9c <lcd_write>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE4,0);
        }else if ( pos == LCD_START_LINE4+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
    109c:	0e 94 07 08 	call	0x100e	; 0x100e <lcd_waitbusy>
#endif
        lcd_write(c, 1);
    10a0:	61 e0       	ldi	r22, 0x01	; 1
    10a2:	8c 2f       	mov	r24, r28
    }

}/* lcd_putc */
    10a4:	cf 91       	pop	r28
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
    10a6:	0c 94 ce 07 	jmp	0xf9c	; 0xf9c <lcd_write>

000010aa <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    10aa:	cf 93       	push	r28
    10ac:	df 93       	push	r29
    10ae:	ec 01       	movw	r28, r24
    register char c;

    while ( (c = *s++) ) {
    10b0:	89 91       	ld	r24, Y+
    10b2:	88 23       	and	r24, r24
    10b4:	19 f0       	breq	.+6      	; 0x10bc <lcd_puts+0x12>
        lcd_putc(c);
    10b6:	0e 94 34 08 	call	0x1068	; 0x1068 <lcd_putc>
    10ba:	fa cf       	rjmp	.-12     	; 0x10b0 <lcd_puts+0x6>
    }

}/* lcd_puts */
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	08 95       	ret

000010c2 <lcd_puts_p>:
Input:     string from program memory be be displayed
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    10c2:	cf 93       	push	r28
    10c4:	df 93       	push	r29
    10c6:	fc 01       	movw	r30, r24
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
    10c8:	84 91       	lpm	r24, Z
    10ca:	ef 01       	movw	r28, r30
    10cc:	21 96       	adiw	r28, 0x01	; 1
    10ce:	88 23       	and	r24, r24
    10d0:	21 f0       	breq	.+8      	; 0x10da <lcd_puts_p+0x18>
        lcd_putc(c);
    10d2:	0e 94 34 08 	call	0x1068	; 0x1068 <lcd_putc>
    10d6:	fe 01       	movw	r30, r28
    10d8:	f7 cf       	rjmp	.-18     	; 0x10c8 <lcd_puts_p+0x6>
    }

}/* lcd_puts_p */
    10da:	df 91       	pop	r29
    10dc:	cf 91       	pop	r28
    10de:	08 95       	ret

000010e0 <lcd_cleanstr>:
Input:    horisontal position
Returns:  none
*************************************************************************/
void lcd_cleanstr(uint8_t y)
/* print empty string on lcd */
{
    10e0:	cf 93       	push	r28
    10e2:	df 93       	push	r29
    10e4:	d8 2f       	mov	r29, r24
    register char i;

    lcd_gotoxy(0,y);
    10e6:	68 2f       	mov	r22, r24
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	0e 94 23 08 	call	0x1046	; 0x1046 <lcd_gotoxy>
    10ee:	c0 e1       	ldi	r28, 0x10	; 16

    for ( i=0 ; i<LCD_DISP_LENGTH ; ++i )
        lcd_putc(' ');
    10f0:	80 e2       	ldi	r24, 0x20	; 32
    10f2:	0e 94 34 08 	call	0x1068	; 0x1068 <lcd_putc>
    10f6:	c1 50       	subi	r28, 0x01	; 1
{
    register char i;

    lcd_gotoxy(0,y);

    for ( i=0 ; i<LCD_DISP_LENGTH ; ++i )
    10f8:	d9 f7       	brne	.-10     	; 0x10f0 <lcd_cleanstr+0x10>
        lcd_putc(' ');

    lcd_gotoxy(0,y);
    10fa:	6d 2f       	mov	r22, r29
    10fc:	80 e0       	ldi	r24, 0x00	; 0

}/* lcd_cleanstr */
    10fe:	df 91       	pop	r29
    1100:	cf 91       	pop	r28
    lcd_gotoxy(0,y);

    for ( i=0 ; i<LCD_DISP_LENGTH ; ++i )
        lcd_putc(' ');

    lcd_gotoxy(0,y);
    1102:	0c 94 23 08 	jmp	0x1046	; 0x1046 <lcd_gotoxy>

00001106 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
    1106:	cf 93       	push	r28
    1108:	c8 2f       	mov	r28, r24
    }
    else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
           && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure all port bits as output (all LCD data lines on same port, but control lines on different ports) */
        DDR(LCD_DATA0_PORT) |= 0x0F;
    110a:	94 b3       	in	r25, 0x14	; 20
    110c:	9f 60       	ori	r25, 0x0F	; 15
    110e:	94 bb       	out	0x14, r25	; 20
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
    1110:	a6 9a       	sbi	0x14, 6	; 20
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
    1112:	a4 9a       	sbi	0x14, 4	; 20
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    1114:	a5 9a       	sbi	0x14, 5	; 20
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
    1116:	e0 e0       	ldi	r30, 0x00	; 0
    1118:	fd e7       	ldi	r31, 0x7D	; 125
    111a:	31 97       	sbiw	r30, 0x01	; 1
    111c:	f1 f7       	brne	.-4      	; 0x111a <lcd_init+0x14>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
    111e:	a9 9a       	sbi	0x15, 1	; 21
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    1120:	a8 9a       	sbi	0x15, 0	; 21
    lcd_e_toggle();
    1122:	0e 94 ca 07 	call	0xf94	; 0xf94 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
    1126:	e0 e0       	ldi	r30, 0x00	; 0
    1128:	f7 e2       	ldi	r31, 0x27	; 39
    112a:	31 97       	sbiw	r30, 0x01	; 1
    112c:	f1 f7       	brne	.-4      	; 0x112a <lcd_init+0x24>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
    112e:	0e 94 ca 07 	call	0xf94	; 0xf94 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
    1132:	e0 e8       	ldi	r30, 0x80	; 128
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	31 97       	sbiw	r30, 0x01	; 1
    1138:	f1 f7       	brne	.-4      	; 0x1136 <lcd_init+0x30>
    /* repeat last command */
    lcd_e_toggle();
    delay(64);           /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
    113a:	0e 94 ca 07 	call	0xf94	; 0xf94 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
    113e:	e0 e8       	ldi	r30, 0x80	; 128
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	31 97       	sbiw	r30, 0x01	; 1
    1144:	f1 f7       	brne	.-4      	; 0x1142 <lcd_init+0x3c>
    /* repeat last command a third time */
    lcd_e_toggle();
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
    1146:	a8 98       	cbi	0x15, 0	; 21
    lcd_e_toggle();
    1148:	0e 94 ca 07 	call	0xf94	; 0xf94 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
    114c:	e0 e8       	ldi	r30, 0x80	; 128
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	31 97       	sbiw	r30, 0x01	; 1
    1152:	f1 f7       	brne	.-4      	; 0x1150 <lcd_init+0x4a>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
    1154:	88 e2       	ldi	r24, 0x28	; 40
    1156:	0e 94 11 08 	call	0x1022	; 0x1022 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
    115a:	88 e0       	ldi	r24, 0x08	; 8
    115c:	0e 94 11 08 	call	0x1022	; 0x1022 <lcd_command>
    lcd_clrscr();                           /* display clear                */
    1160:	0e 94 2e 08 	call	0x105c	; 0x105c <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
    1164:	86 e0       	ldi	r24, 0x06	; 6
    1166:	0e 94 11 08 	call	0x1022	; 0x1022 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
    116a:	8c 2f       	mov	r24, r28

}/* lcd_init */
    116c:	cf 91       	pop	r28
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
    lcd_clrscr();                           /* display clear                */
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
    lcd_command(dispAttr);                  /* display/cursor control       */
    116e:	0c 94 11 08 	jmp	0x1022	; 0x1022 <lcd_command>

00001172 <_crc16_update>:
		: "=r" (__ret), "=d" (__tmp)
		: "r" (__data), "0" (__crc)
		: "r0"
	);
	return __ret;
}
    1172:	86 27       	eor	r24, r22
    1174:	68 2f       	mov	r22, r24
    1176:	62 95       	swap	r22
    1178:	68 27       	eor	r22, r24
    117a:	06 2e       	mov	r0, r22
    117c:	66 95       	lsr	r22
    117e:	66 95       	lsr	r22
    1180:	60 25       	eor	r22, r0
    1182:	06 2e       	mov	r0, r22
    1184:	66 95       	lsr	r22
    1186:	60 25       	eor	r22, r0
    1188:	67 70       	andi	r22, 0x07	; 7
    118a:	08 2e       	mov	r0, r24
    118c:	89 2f       	mov	r24, r25
    118e:	66 95       	lsr	r22
    1190:	07 94       	ror	r0
    1192:	67 95       	ror	r22
    1194:	90 2d       	mov	r25, r0
    1196:	86 27       	eor	r24, r22
    1198:	06 94       	lsr	r0
    119a:	67 95       	ror	r22
    119c:	90 25       	eor	r25, r0
    119e:	86 27       	eor	r24, r22
    11a0:	08 95       	ret

000011a2 <rfm12_write>:
    sei();
}


uint16_t rfm12_write(uint16_t data)
{
    11a2:	9c 01       	movw	r18, r24
    uint16_t in_data = 0;

	RFM12_SPI_PORT &= ~(1<<RFM12_EN);
    11a4:	c4 98       	cbi	0x18, 4	; 24

#ifdef PROGRAM_SPI_ENABLE

	uint8_t i;

    RFM12_SPI_PORT &= ~(1<<RFM12_SCK);
    11a6:	c7 98       	cbi	0x18, 7	; 24
    11a8:	40 e1       	ldi	r20, 0x10	; 16
}


uint16_t rfm12_write(uint16_t data)
{
    uint16_t in_data = 0;
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;

    RFM12_SPI_PORT &= ~(1<<RFM12_SCK);
	for (i=0; i<16; i++)
	{
		if (data&0x8000)    RFM12_SPI_PORT |= (1<<RFM12_SDI);	              // вывод текущего бита в порт
    11ae:	37 ff       	sbrs	r19, 7
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <rfm12_write+0x14>
    11b2:	c5 9a       	sbi	0x18, 5	; 24
    11b4:	01 c0       	rjmp	.+2      	; 0x11b8 <rfm12_write+0x16>
		else                RFM12_SPI_PORT &= ~(1<<RFM12_SDI);
    11b6:	c5 98       	cbi	0x18, 5	; 24
		data<<=1;
    11b8:	22 0f       	add	r18, r18
    11ba:	33 1f       	adc	r19, r19
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25

		if (RFM12_SPI_PIN&(1<<RFM12_SDO)) in_data = (in_data<<1) | 0x0001;    // считываение текущего бита с порта
    11c0:	b6 99       	sbic	0x16, 6	; 22
    11c2:	81 60       	ori	r24, 0x01	; 1
		else                              in_data = in_data<<1;

		RFM12_SPI_PORT |= (1<<RFM12_SCK);                                     // сигнал синхронизации
    11c4:	c7 9a       	sbi	0x18, 7	; 24
		asm("nop");                                                           // немного китайского кода
    11c6:	00 00       	nop
        asm("nop");
    11c8:	00 00       	nop
		RFM12_SPI_PORT &= ~(1<<RFM12_SCK);
    11ca:	c7 98       	cbi	0x18, 7	; 24
    11cc:	41 50       	subi	r20, 0x01	; 1
#ifdef PROGRAM_SPI_ENABLE

	uint8_t i;

    RFM12_SPI_PORT &= ~(1<<RFM12_SCK);
	for (i=0; i<16; i++)
    11ce:	79 f7       	brne	.-34     	; 0x11ae <rfm12_write+0xc>
    data = SPDR;
	in_data += data;

#endif // PROGRAM_SPI_ENABLE

	RFM12_SPI_PORT |= (1<<RFM12_EN);
    11d0:	c4 9a       	sbi	0x18, 4	; 24

    return in_data;

}
    11d2:	08 95       	ret

000011d4 <rfm12_transmit_pack>:
#endif
}


uint8_t rfm12_transmit_pack( uint8_t nbytes )
{
    11d4:	1f 93       	push	r17
    11d6:	cf 93       	push	r28
    11d8:	df 93       	push	r29
    11da:	c8 2f       	mov	r28, r24
    uint8_t i=0;
    uint16_t crc = 0xffff;

    if (nbytes > DATA_BYTES_MAX)    return 1;
    11dc:	89 31       	cpi	r24, 0x19	; 25
    11de:	08 f0       	brcs	.+2      	; 0x11e2 <rfm12_transmit_pack+0xe>
    11e0:	55 c0       	rjmp	.+170    	; 0x128c <rfm12_transmit_pack+0xb8>

    switch (rfm_condition)
    11e2:	80 91 45 02 	lds	r24, 0x0245
    11e6:	81 30       	cpi	r24, 0x01	; 1
    11e8:	09 f4       	brne	.+2      	; 0x11ec <rfm12_transmit_pack+0x18>
    11ea:	52 c0       	rjmp	.+164    	; 0x1290 <rfm12_transmit_pack+0xbc>
    11ec:	82 30       	cpi	r24, 0x02	; 2
    11ee:	41 f4       	brne	.+16     	; 0x1200 <rfm12_transmit_pack+0x2c>
        {
            return 2;
        }
        case RECEIVE_PACK :
        {
            rfm12_write(FIFO_AND_RESET);                                                           // перестать заполнять FIFO
    11f0:	81 e8       	ldi	r24, 0x81	; 129
    11f2:	9a ec       	ldi	r25, 0xCA	; 202
    11f4:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <rfm12_write>
            rfm12_write(POWER_SC);
    11f8:	88 e1       	ldi	r24, 0x18	; 24
    11fa:	92 e8       	ldi	r25, 0x82	; 130
    11fc:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <rfm12_write>
        }
    }

    rfm_condition = TRANSMIT_PACK;
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	80 93 45 02 	sts	0x0245, r24
    pack_counter = 0;
    1206:	10 92 44 02 	sts	0x0244, r1

    pack_buffer[i++] = 0xaa;
    120a:	8a ea       	ldi	r24, 0xAA	; 170
    120c:	80 93 81 02 	sts	0x0281, r24
    pack_buffer[i++] = 0x2d;
    1210:	8d e2       	ldi	r24, 0x2D	; 45
    1212:	80 93 82 02 	sts	0x0282, r24
    pack_buffer[i++] = SYNCH_WORD;
    1216:	84 ed       	ldi	r24, 0xD4	; 212
    1218:	80 93 83 02 	sts	0x0283, r24
    pack_buffer[i++] = nbytes+2;
    121c:	82 e0       	ldi	r24, 0x02	; 2
    121e:	8c 0f       	add	r24, r28
    1220:	80 93 84 02 	sts	0x0284, r24


uint8_t rfm12_transmit_pack( uint8_t nbytes )
{
    uint8_t i=0;
    uint16_t crc = 0xffff;
    1224:	8f ef       	ldi	r24, 0xFF	; 255
    1226:	9f ef       	ldi	r25, 0xFF	; 255
    pack_counter = 0;

    pack_buffer[i++] = 0xaa;
    pack_buffer[i++] = 0x2d;
    pack_buffer[i++] = SYNCH_WORD;
    pack_buffer[i++] = nbytes+2;
    1228:	44 e0       	ldi	r20, 0x04	; 4
    for ( ; i<(nbytes+HEADER_NBYTES) ; ++i) crc = _crc16_update(crc, pack_buffer[i]);
    122a:	d0 e0       	ldi	r29, 0x00	; 0
    122c:	23 96       	adiw	r28, 0x03	; 3
    122e:	24 2f       	mov	r18, r20
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	d9 01       	movw	r26, r18
    1234:	af 57       	subi	r26, 0x7F	; 127
    1236:	bd 4f       	sbci	r27, 0xFD	; 253
    1238:	11 e0       	ldi	r17, 0x01	; 1
    123a:	14 0f       	add	r17, r20
    123c:	c2 17       	cp	r28, r18
    123e:	d3 07       	cpc	r29, r19
    1240:	2c f0       	brlt	.+10     	; 0x124c <rfm12_transmit_pack+0x78>
    1242:	6c 91       	ld	r22, X
    1244:	0e 94 b9 08 	call	0x1172	; 0x1172 <_crc16_update>
    1248:	41 2f       	mov	r20, r17
    124a:	f1 cf       	rjmp	.-30     	; 0x122e <rfm12_transmit_pack+0x5a>
    pack_buffer[i++] = (uint8_t)(crc>>8);
    124c:	9c 93       	st	X, r25
    pack_buffer[i++] = (uint8_t)crc;
    124e:	e1 2f       	mov	r30, r17
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	ef 57       	subi	r30, 0x7F	; 127
    1254:	fd 4f       	sbci	r31, 0xFD	; 253
    1256:	80 83       	st	Z, r24
    1258:	e2 e0       	ldi	r30, 0x02	; 2
    125a:	e4 0f       	add	r30, r20
    pack_buffer[i++] = 0xaa;
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	ef 57       	subi	r30, 0x7F	; 127
    1260:	fd 4f       	sbci	r31, 0xFD	; 253
    1262:	8a ea       	ldi	r24, 0xAA	; 170
    1264:	80 83       	st	Z, r24
    1266:	e3 e0       	ldi	r30, 0x03	; 3
    1268:	e4 0f       	add	r30, r20
    pack_buffer[i++] = 0xaa;
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	ef 57       	subi	r30, 0x7F	; 127
    126e:	fd 4f       	sbci	r31, 0xFD	; 253
    1270:	80 83       	st	Z, r24
    pack_size = i+2;
    1272:	4a 5f       	subi	r20, 0xFA	; 250
    1274:	40 93 43 02 	sts	0x0243, r20

    rfm12_write(CONFIGURATION_SETTING | TX_REG_MASK);
    1278:	87 ed       	ldi	r24, 0xD7	; 215
    127a:	90 e8       	ldi	r25, 0x80	; 128
    127c:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <rfm12_write>
    rfm12_write(POWER_TX);      // включить передатик
    1280:	88 e3       	ldi	r24, 0x38	; 56
    1282:	92 e8       	ldi	r25, 0x82	; 130
    1284:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <rfm12_write>

    return 0;
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	03 c0       	rjmp	.+6      	; 0x1292 <rfm12_transmit_pack+0xbe>
uint8_t rfm12_transmit_pack( uint8_t nbytes )
{
    uint8_t i=0;
    uint16_t crc = 0xffff;

    if (nbytes > DATA_BYTES_MAX)    return 1;
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	01 c0       	rjmp	.+2      	; 0x1292 <rfm12_transmit_pack+0xbe>

    switch (rfm_condition)
    {
        case TRANSMIT_PACK :
        {
            return 2;
    1290:	82 e0       	ldi	r24, 0x02	; 2

    rfm12_write(CONFIGURATION_SETTING | TX_REG_MASK);
    rfm12_write(POWER_TX);      // включить передатик

    return 0;
}
    1292:	df 91       	pop	r29
    1294:	cf 91       	pop	r28
    1296:	1f 91       	pop	r17
    1298:	08 95       	ret

0000129a <rfm12_wait_pack>:


uint8_t rfm12_wait_pack(void)
{
    switch (rfm_condition)
    129a:	80 91 45 02 	lds	r24, 0x0245
    129e:	81 30       	cpi	r24, 0x01	; 1
    12a0:	99 f0       	breq	.+38     	; 0x12c8 <rfm12_wait_pack+0x2e>
    12a2:	82 30       	cpi	r24, 0x02	; 2
    12a4:	99 f0       	breq	.+38     	; 0x12cc <rfm12_wait_pack+0x32>

        case RECEIVE_PACK :
            return 2;
    }

    rfm_condition = RECEIVE_PACK;
    12a6:	82 e0       	ldi	r24, 0x02	; 2
    12a8:	80 93 45 02 	sts	0x0245, r24
    pack_size = pack_counter = 0;
    12ac:	10 92 44 02 	sts	0x0244, r1
    12b0:	10 92 43 02 	sts	0x0243, r1

    rfm12_write(FIFO_AND_RESET | FIFO_EN_MASK);
    12b4:	83 e8       	ldi	r24, 0x83	; 131
    12b6:	9a ec       	ldi	r25, 0xCA	; 202
    12b8:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <rfm12_write>
    rfm12_write(POWER_RX);
    12bc:	88 ec       	ldi	r24, 0xC8	; 200
    12be:	92 e8       	ldi	r25, 0x82	; 130
    12c0:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <rfm12_write>
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	08 95       	ret
uint8_t rfm12_wait_pack(void)
{
    switch (rfm_condition)
    {
        case TRANSMIT_PACK :
            return 1;
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	08 95       	ret

        case RECEIVE_PACK :
            return 2;
    12cc:	82 e0       	ldi	r24, 0x02	; 2
    pack_size = pack_counter = 0;

    rfm12_write(FIFO_AND_RESET | FIFO_EN_MASK);
    rfm12_write(POWER_RX);
    return 0;
}
    12ce:	08 95       	ret

000012d0 <rfm12_init>:
}


void rfm12_init(void)
{
	RFM12_IRQDDR &= ~(1<<RFM12_IRQ);
    12d0:	ba 98       	cbi	0x17, 2	; 23
	GICR |= (1<<INT2);
    12d2:	8b b7       	in	r24, 0x3b	; 59
    12d4:	80 62       	ori	r24, 0x20	; 32
    12d6:	8b bf       	out	0x3b, r24	; 59

	RFM12_SPI_DDR |= RFM12_SPI_MASK; 					// инициализация SPI
    12d8:	87 b3       	in	r24, 0x17	; 23
    12da:	80 6b       	ori	r24, 0xB0	; 176
    12dc:	87 bb       	out	0x17, r24	; 23
	RFM12_SPI_PORT |= (1<<RFM12_EN);
    12de:	c4 9a       	sbi	0x18, 4	; 24
    RFM12_IRQDDR &= ~(1<<RFM12_IRQ);
    12e0:	ba 98       	cbi	0x17, 2	; 23

    GICR |= (1<<INT2);
    12e2:	8b b7       	in	r24, 0x3b	; 59
    12e4:	80 62       	ori	r24, 0x20	; 32
    12e6:	8b bf       	out	0x3b, r24	; 59

#ifndef PROGRAM_SPI_ENABLE
    SPCR = RFM12_SPCR;
#endif

    rfm12_write(CONFIGURATION_SETTING);
    12e8:	87 e5       	ldi	r24, 0x57	; 87
    12ea:	90 e8       	ldi	r25, 0x80	; 128
    12ec:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <rfm12_write>
    rfm12_write(FREQUENCY_SETTING);
    12f0:	8b ed       	ldi	r24, 0xDB	; 219
    12f2:	94 ea       	ldi	r25, 0xA4	; 164
    12f4:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <rfm12_write>
    rfm12_write(DATA_RATE);
    12f8:	83 e2       	ldi	r24, 0x23	; 35
    12fa:	96 ec       	ldi	r25, 0xC6	; 198
    12fc:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <rfm12_write>
    rfm12_write(RECEIVER_CONTROL);
    1300:	89 ea       	ldi	r24, 0xA9	; 169
    1302:	94 e9       	ldi	r25, 0x94	; 148
    1304:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <rfm12_write>
    rfm12_write(DATA_FILTER);
    1308:	8c e2       	ldi	r24, 0x2C	; 44
    130a:	92 ec       	ldi	r25, 0xC2	; 194
    130c:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <rfm12_write>
    rfm12_write(FIFO_AND_RESET);
    1310:	81 e8       	ldi	r24, 0x81	; 129
    1312:	9a ec       	ldi	r25, 0xCA	; 202
    1314:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <rfm12_write>
    rfm12_write(SYNCHRON_PATTERN);
    1318:	84 ed       	ldi	r24, 0xD4	; 212
    131a:	9e ec       	ldi	r25, 0xCE	; 206
    131c:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <rfm12_write>
    rfm12_write(AFC_COMMAND);
    1320:	87 ea       	ldi	r24, 0xA7	; 167
    1322:	94 ec       	ldi	r25, 0xC4	; 196
    1324:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <rfm12_write>
    rfm12_write(TX_CONFIGURATION);
    1328:	80 e1       	ldi	r24, 0x10	; 16
    132a:	98 e9       	ldi	r25, 0x98	; 152
    132c:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <rfm12_write>
    rfm12_write(PLL_SETING);
    1330:	87 e7       	ldi	r24, 0x77	; 119
    1332:	9c ec       	ldi	r25, 0xCC	; 204
    1334:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <rfm12_write>
    rfm12_write(LOW_DUTY_CYCLE);
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	98 ec       	ldi	r25, 0xC8	; 200
    133c:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <rfm12_write>
    rfm12_write(WAKEUP_TIMER);
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	90 ee       	ldi	r25, 0xE0	; 224
    1344:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <rfm12_write>
    rfm12_write(STATUS_READ);
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <rfm12_write>

    rfm_condition = pack_size = rfm_status = 0;
    1350:	10 92 41 02 	sts	0x0241, r1
    1354:	10 92 40 02 	sts	0x0240, r1
    1358:	10 92 43 02 	sts	0x0243, r1
    135c:	10 92 45 02 	sts	0x0245, r1
#ifdef ALWAYS_RX
    rfm12_wait_pack();
    1360:	0c 94 4d 09 	jmp	0x129a	; 0x129a <rfm12_wait_pack>

00001364 <rfm12_sleep>:
    return 0;
}


uint8_t rfm12_sleep(void)
{
    1364:	cf 93       	push	r28
    uint8_t buffer;

    rfm_condition = SLEEP;
    1366:	83 e0       	ldi	r24, 0x03	; 3
    1368:	80 93 45 02 	sts	0x0245, r24
    pack_counter = 0;
    136c:	10 92 44 02 	sts	0x0244, r1

    rfm12_write(POWER_SC);
    1370:	88 e1       	ldi	r24, 0x18	; 24
    1372:	92 e8       	ldi	r25, 0x82	; 130
    1374:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <rfm12_write>
    buffer = rfm12_write(STATUS_READ);
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <rfm12_write>
    1380:	c8 2f       	mov	r28, r24
    rfm12_write(FIFO_AND_RESET);            // выкл. и обнулить FIFO
    1382:	81 e8       	ldi	r24, 0x81	; 129
    1384:	9a ec       	ldi	r25, 0xCA	; 202
    1386:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <rfm12_write>
    rfm12_write(CONFIGURATION_SETTING);     // выкл. и обнулить буфер передатчика
    138a:	87 e5       	ldi	r24, 0x57	; 87
    138c:	90 e8       	ldi	r25, 0x80	; 128
    138e:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <rfm12_write>

    return buffer;
}
    1392:	8c 2f       	mov	r24, r28
    1394:	cf 91       	pop	r28
    1396:	08 95       	ret

00001398 <__vector_3>:

volatile uint8_t rfm_condition = 0, pack_buffer[PACKET_SIZE], pack_counter = 0, pack_size = 0, error_counter=0;
volatile uint16_t rfm_status = 0;

ISR(INT2_vect)
{
    1398:	1f 92       	push	r1
    139a:	0f 92       	push	r0
    139c:	0f b6       	in	r0, 0x3f	; 63
    139e:	0f 92       	push	r0
    13a0:	11 24       	eor	r1, r1
    13a2:	2f 93       	push	r18
    13a4:	3f 93       	push	r19
    13a6:	4f 93       	push	r20
    13a8:	5f 93       	push	r21
    13aa:	6f 93       	push	r22
    13ac:	7f 93       	push	r23
    13ae:	8f 93       	push	r24
    13b0:	9f 93       	push	r25
    13b2:	af 93       	push	r26
    13b4:	bf 93       	push	r27
    13b6:	cf 93       	push	r28
    13b8:	ef 93       	push	r30
    13ba:	ff 93       	push	r31
	cli();
    13bc:	f8 94       	cli

    rfm_status = rfm12_write(STATUS_READ);
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <rfm12_write>
    13c6:	90 93 41 02 	sts	0x0241, r25
    13ca:	80 93 40 02 	sts	0x0240, r24

    if ( (rfm_condition == TRANSMIT_PACK) && ((rfm_status&(1<<RGFFIT)) > 0) )
    13ce:	80 91 45 02 	lds	r24, 0x0245
    13d2:	81 30       	cpi	r24, 0x01	; 1
    13d4:	39 f5       	brne	.+78     	; 0x1424 <__vector_3+0x8c>
    13d6:	80 91 40 02 	lds	r24, 0x0240
    13da:	90 91 41 02 	lds	r25, 0x0241
    13de:	97 ff       	sbrs	r25, 7
    13e0:	21 c0       	rjmp	.+66     	; 0x1424 <__vector_3+0x8c>
    {
        if ( (pack_counter < pack_size) && (pack_counter < PACKET_SIZE) )
    13e2:	90 91 44 02 	lds	r25, 0x0244
    13e6:	80 91 43 02 	lds	r24, 0x0243
    13ea:	98 17       	cp	r25, r24
    13ec:	88 f4       	brcc	.+34     	; 0x1410 <__vector_3+0x78>
    13ee:	80 91 44 02 	lds	r24, 0x0244
    13f2:	80 32       	cpi	r24, 0x20	; 32
    13f4:	68 f4       	brcc	.+26     	; 0x1410 <__vector_3+0x78>
            rfm12_write(TX_REGISTER_WRITE | pack_buffer[pack_counter++]);
    13f6:	e0 91 44 02 	lds	r30, 0x0244
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	8e 0f       	add	r24, r30
    13fe:	80 93 44 02 	sts	0x0244, r24
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	ef 57       	subi	r30, 0x7F	; 127
    1406:	fd 4f       	sbci	r31, 0xFD	; 253
    1408:	80 81       	ld	r24, Z
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	98 6b       	ori	r25, 0xB8	; 184
    140e:	7d c0       	rjmp	.+250    	; 0x150a <__vector_3+0x172>
        else
        {
#ifdef  ALWAYS_RX
            rfm12_write(CONFIGURATION_SETTING);         // чтобы обнулить регистр отправки
    1410:	87 e5       	ldi	r24, 0x57	; 87
    1412:	90 e8       	ldi	r25, 0x80	; 128
    1414:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <rfm12_write>
            rfm_condition = SLEEP;
    1418:	83 e0       	ldi	r24, 0x03	; 3
    141a:	80 93 45 02 	sts	0x0245, r24
            rfm12_wait_pack();
    141e:	0e 94 4d 09 	call	0x129a	; 0x129a <rfm12_wait_pack>
    1422:	75 c0       	rjmp	.+234    	; 0x150e <__vector_3+0x176>
#else
            rfm12_sleep();
#endif
        }
    }
    else if ( (rfm_condition == RECEIVE_PACK) && ((rfm_status&(1<<RGFFIT)) > 0) )
    1424:	80 91 45 02 	lds	r24, 0x0245
    1428:	82 30       	cpi	r24, 0x02	; 2
    142a:	09 f0       	breq	.+2      	; 0x142e <__vector_3+0x96>
    142c:	5c c0       	rjmp	.+184    	; 0x14e6 <__vector_3+0x14e>
    142e:	80 91 40 02 	lds	r24, 0x0240
    1432:	90 91 41 02 	lds	r25, 0x0241
    1436:	97 ff       	sbrs	r25, 7
    1438:	56 c0       	rjmp	.+172    	; 0x14e6 <__vector_3+0x14e>
    {
        uint8_t buffer;

        buffer = (uint8_t)(rfm12_write(READ_FIFO));
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	90 eb       	ldi	r25, 0xB0	; 176
    143e:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <rfm12_write>

        if (pack_size == 0)
    1442:	90 91 43 02 	lds	r25, 0x0243
    1446:	91 11       	cpse	r25, r1
    1448:	03 c0       	rjmp	.+6      	; 0x1450 <__vector_3+0xb8>
            pack_size = buffer;                                                 // первый байт определяет размер пакета
    144a:	80 93 43 02 	sts	0x0243, r24
    144e:	5f c0       	rjmp	.+190    	; 0x150e <__vector_3+0x176>
        else if ( (pack_counter < pack_size) && (pack_counter < PACKET_SIZE) )
    1450:	20 91 44 02 	lds	r18, 0x0244
    1454:	90 91 43 02 	lds	r25, 0x0243
    1458:	29 17       	cp	r18, r25
    145a:	78 f4       	brcc	.+30     	; 0x147a <__vector_3+0xe2>
    145c:	90 91 44 02 	lds	r25, 0x0244
    1460:	90 32       	cpi	r25, 0x20	; 32
    1462:	58 f4       	brcc	.+22     	; 0x147a <__vector_3+0xe2>
            pack_buffer[pack_counter++] = buffer;
    1464:	e0 91 44 02 	lds	r30, 0x0244
    1468:	91 e0       	ldi	r25, 0x01	; 1
    146a:	9e 0f       	add	r25, r30
    146c:	90 93 44 02 	sts	0x0244, r25
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	ef 57       	subi	r30, 0x7F	; 127
    1474:	fd 4f       	sbci	r31, 0xFD	; 253
    1476:	80 83       	st	Z, r24
    1478:	4a c0       	rjmp	.+148    	; 0x150e <__vector_3+0x176>
        {
            uint8_t i;
            uint16_t crc=0xffff;

//            ++error_counter;
            pack_size -= 2;
    147a:	80 91 43 02 	lds	r24, 0x0243
    147e:	82 50       	subi	r24, 0x02	; 2
    1480:	80 93 43 02 	sts	0x0243, r24
        else if ( (pack_counter < pack_size) && (pack_counter < PACKET_SIZE) )
            pack_buffer[pack_counter++] = buffer;
        else
        {
            uint8_t i;
            uint16_t crc=0xffff;
    1484:	8f ef       	ldi	r24, 0xFF	; 255
    1486:	9f ef       	ldi	r25, 0xFF	; 255

//            ++error_counter;
            pack_size -= 2;
            for(i=0 ; i<pack_size ; ++i)    crc = _crc16_update(crc, pack_buffer[i]);
    1488:	c0 e0       	ldi	r28, 0x00	; 0
    148a:	20 91 43 02 	lds	r18, 0x0243
    148e:	c2 17       	cp	r28, r18
    1490:	48 f4       	brcc	.+18     	; 0x14a4 <__vector_3+0x10c>
    1492:	ec 2f       	mov	r30, r28
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	ef 57       	subi	r30, 0x7F	; 127
    1498:	fd 4f       	sbci	r31, 0xFD	; 253
    149a:	60 81       	ld	r22, Z
    149c:	0e 94 b9 08 	call	0x1172	; 0x1172 <_crc16_update>
    14a0:	cf 5f       	subi	r28, 0xFF	; 255
    14a2:	f3 cf       	rjmp	.-26     	; 0x148a <__vector_3+0xf2>

            if( (((uint8_t)(crc>>8)) != pack_buffer[pack_size]) || (((uint8_t)crc) != pack_buffer[pack_size+1]) )  //проверка crc
    14a4:	e0 91 43 02 	lds	r30, 0x0243
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	ef 57       	subi	r30, 0x7F	; 127
    14ac:	fd 4f       	sbci	r31, 0xFD	; 253
    14ae:	20 81       	ld	r18, Z
    14b0:	29 13       	cpse	r18, r25
    14b2:	08 c0       	rjmp	.+16     	; 0x14c4 <__vector_3+0x12c>
    14b4:	e0 91 43 02 	lds	r30, 0x0243
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	ee 57       	subi	r30, 0x7E	; 126
    14bc:	fd 4f       	sbci	r31, 0xFD	; 253
    14be:	90 81       	ld	r25, Z
    14c0:	98 17       	cp	r25, r24
    14c2:	59 f0       	breq	.+22     	; 0x14da <__vector_3+0x142>
            {
#ifdef  ALWAYS_RX
                    rfm12_write(FIFO_AND_RESET);                                                       // перестать заполнять FIFO
    14c4:	81 e8       	ldi	r24, 0x81	; 129
    14c6:	9a ec       	ldi	r25, 0xCA	; 202
    14c8:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <rfm12_write>
                    pack_counter = pack_size = 0;
    14cc:	10 92 43 02 	sts	0x0243, r1
    14d0:	10 92 44 02 	sts	0x0244, r1
                    rfm12_write(FIFO_AND_RESET | FIFO_EN_MASK);
    14d4:	83 e8       	ldi	r24, 0x83	; 131
    14d6:	9a ec       	ldi	r25, 0xCA	; 202
    14d8:	18 c0       	rjmp	.+48     	; 0x150a <__vector_3+0x172>
                    rfm12_sleep();
#endif
            }
            else
            {
                rfm12_sleep();
    14da:	0e 94 b2 09 	call	0x1364	; 0x1364 <rfm12_sleep>
                rfm_condition = NEW_PACK;
    14de:	84 e0       	ldi	r24, 0x04	; 4
    14e0:	80 93 45 02 	sts	0x0245, r24
    14e4:	14 c0       	rjmp	.+40     	; 0x150e <__vector_3+0x176>
        }
    }
    else
    {
//        ++error_counter;
        rfm12_write(CONFIGURATION_SETTING);                                                // чтобы обнулить регистр отправки
    14e6:	87 e5       	ldi	r24, 0x57	; 87
    14e8:	90 e8       	ldi	r25, 0x80	; 128
    14ea:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <rfm12_write>
        rfm12_write(FIFO_AND_RESET);                                                       // перестать заполнять FIFO
    14ee:	81 e8       	ldi	r24, 0x81	; 129
    14f0:	9a ec       	ldi	r25, 0xCA	; 202
    14f2:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <rfm12_write>
        pack_counter = pack_size = 0;
    14f6:	10 92 43 02 	sts	0x0243, r1
    14fa:	10 92 44 02 	sts	0x0244, r1
#ifdef  ALWAYS_RX
        rfm12_write(FIFO_AND_RESET | FIFO_EN_MASK);
    14fe:	83 e8       	ldi	r24, 0x83	; 131
    1500:	9a ec       	ldi	r25, 0xCA	; 202
    1502:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <rfm12_write>
        rfm12_write(POWER_RX);
    1506:	88 ec       	ldi	r24, 0xC8	; 200
    1508:	92 e8       	ldi	r25, 0x82	; 130
    150a:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <rfm12_write>
#else
        rfm12_sleep();
#endif
    }

    sei();
    150e:	78 94       	sei
}
    1510:	ff 91       	pop	r31
    1512:	ef 91       	pop	r30
    1514:	cf 91       	pop	r28
    1516:	bf 91       	pop	r27
    1518:	af 91       	pop	r26
    151a:	9f 91       	pop	r25
    151c:	8f 91       	pop	r24
    151e:	7f 91       	pop	r23
    1520:	6f 91       	pop	r22
    1522:	5f 91       	pop	r21
    1524:	4f 91       	pop	r20
    1526:	3f 91       	pop	r19
    1528:	2f 91       	pop	r18
    152a:	0f 90       	pop	r0
    152c:	0f be       	out	0x3f, r0	; 63
    152e:	0f 90       	pop	r0
    1530:	1f 90       	pop	r1
    1532:	18 95       	reti

00001534 <rfm12_deep_sleep>:
    return buffer;
}


uint8_t rfm12_deep_sleep(void)
{
    1534:	cf 93       	push	r28
    uint8_t buffer;

    rfm_condition = SLEEP;
    1536:	83 e0       	ldi	r24, 0x03	; 3
    1538:	80 93 45 02 	sts	0x0245, r24
    pack_counter = 0;
    153c:	10 92 44 02 	sts	0x0244, r1

    rfm12_write(POWER_SLEEP);
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	92 e8       	ldi	r25, 0x82	; 130
    1544:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <rfm12_write>
    buffer = rfm12_write(STATUS_READ);
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <rfm12_write>
    1550:	c8 2f       	mov	r28, r24
    rfm12_write(FIFO_AND_RESET);            // выкл. и обнулить FIFO
    1552:	81 e8       	ldi	r24, 0x81	; 129
    1554:	9a ec       	ldi	r25, 0xCA	; 202
    1556:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <rfm12_write>
    rfm12_write(CONFIGURATION_SETTING);     // выкл. и обнулить буфер передатчика
    155a:	87 e5       	ldi	r24, 0x57	; 87
    155c:	90 e8       	ldi	r25, 0x80	; 128
    155e:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <rfm12_write>

    return buffer;
}
    1562:	8c 2f       	mov	r24, r28
    1564:	cf 91       	pop	r28
    1566:	08 95       	ret

00001568 <rfm12_channel>:


void rfm12_channel(uint8_t ch)
{
    switch(ch)
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	fc 01       	movw	r30, r24
    156c:	31 97       	sbiw	r30, 0x01	; 1
    156e:	ee 30       	cpi	r30, 0x0E	; 14
    1570:	f1 05       	cpc	r31, r1
    1572:	78 f5       	brcc	.+94     	; 0x15d2 <rfm12_channel+0x6a>
    1574:	e6 5d       	subi	r30, 0xD6	; 214
    1576:	ff 4f       	sbci	r31, 0xFF	; 255
    1578:	0c 94 71 16 	jmp	0x2ce2	; 0x2ce2 <__tablejump2__>
    {
    case 1 :
        rfm12_write(FREQ_CH1);
    157c:	8b ed       	ldi	r24, 0xDB	; 219
    157e:	94 ea       	ldi	r25, 0xA4	; 164
    1580:	26 c0       	rjmp	.+76     	; 0x15ce <rfm12_channel+0x66>
        break;
    case 2 :
        rfm12_write(FREQ_CH2);
    1582:	8c e0       	ldi	r24, 0x0C	; 12
    1584:	95 ea       	ldi	r25, 0xA5	; 165
    1586:	23 c0       	rjmp	.+70     	; 0x15ce <rfm12_channel+0x66>
        break;
    case 3 :
        rfm12_write(FREQ_CH3);
    1588:	8c e3       	ldi	r24, 0x3C	; 60
    158a:	95 ea       	ldi	r25, 0xA5	; 165
    158c:	20 c0       	rjmp	.+64     	; 0x15ce <rfm12_channel+0x66>
        break;
    case 4 :
        rfm12_write(FREQ_CH4);
    158e:	8c e6       	ldi	r24, 0x6C	; 108
    1590:	95 ea       	ldi	r25, 0xA5	; 165
    1592:	1d c0       	rjmp	.+58     	; 0x15ce <rfm12_channel+0x66>
        break;
    case 5 :
        rfm12_write(FREQ_CH5);
    1594:	8b e9       	ldi	r24, 0x9B	; 155
    1596:	95 ea       	ldi	r25, 0xA5	; 165
    1598:	1a c0       	rjmp	.+52     	; 0x15ce <rfm12_channel+0x66>
        break;
    case 6 :
        rfm12_write(FREQ_CH6);
    159a:	8b ec       	ldi	r24, 0xCB	; 203
    159c:	95 ea       	ldi	r25, 0xA5	; 165
    159e:	17 c0       	rjmp	.+46     	; 0x15ce <rfm12_channel+0x66>
        break;
    case 7 :
        rfm12_write(FREQ_CH7);
    15a0:	8b ef       	ldi	r24, 0xFB	; 251
    15a2:	95 ea       	ldi	r25, 0xA5	; 165
    15a4:	14 c0       	rjmp	.+40     	; 0x15ce <rfm12_channel+0x66>
        break;
    case 8 :
        rfm12_write(FREQ_CH8);
    15a6:	8c e2       	ldi	r24, 0x2C	; 44
    15a8:	96 ea       	ldi	r25, 0xA6	; 166
    15aa:	11 c0       	rjmp	.+34     	; 0x15ce <rfm12_channel+0x66>
        break;
    case 9 :
        rfm12_write(FREQ_CH9);
    15ac:	8c e5       	ldi	r24, 0x5C	; 92
    15ae:	96 ea       	ldi	r25, 0xA6	; 166
    15b0:	0e c0       	rjmp	.+28     	; 0x15ce <rfm12_channel+0x66>
        break;
    case 10 :
        rfm12_write(FREQ_CH10);
    15b2:	8c e8       	ldi	r24, 0x8C	; 140
    15b4:	96 ea       	ldi	r25, 0xA6	; 166
    15b6:	0b c0       	rjmp	.+22     	; 0x15ce <rfm12_channel+0x66>
        break;
    case 11 :
        rfm12_write(FREQ_CH11);
    15b8:	8b eb       	ldi	r24, 0xBB	; 187
    15ba:	96 ea       	ldi	r25, 0xA6	; 166
    15bc:	08 c0       	rjmp	.+16     	; 0x15ce <rfm12_channel+0x66>
        break;
    case 12 :
        rfm12_write(FREQ_CH12);
    15be:	8b ee       	ldi	r24, 0xEB	; 235
    15c0:	96 ea       	ldi	r25, 0xA6	; 166
    15c2:	05 c0       	rjmp	.+10     	; 0x15ce <rfm12_channel+0x66>
        break;
    case 13 :
        rfm12_write(FREQ_CH13);
    15c4:	8b e1       	ldi	r24, 0x1B	; 27
    15c6:	97 ea       	ldi	r25, 0xA7	; 167
    15c8:	02 c0       	rjmp	.+4      	; 0x15ce <rfm12_channel+0x66>
        break;
    case 14 :
        rfm12_write(FREQ_CH14);
    15ca:	8c e4       	ldi	r24, 0x4C	; 76
    15cc:	97 ea       	ldi	r25, 0xA7	; 167
    15ce:	0c 94 d1 08 	jmp	0x11a2	; 0x11a2 <rfm12_write>
    15d2:	08 95       	ret

000015d4 <beep_repeat>:
}


uint8_t beep_repeat(msg_par par)
{
    setTimer(MSG_BEEP, par, snd_duration);
    15d4:	40 91 a2 02 	lds	r20, 0x02A2
    15d8:	50 91 a3 02 	lds	r21, 0x02A3
    15dc:	68 2f       	mov	r22, r24
    15de:	89 e0       	ldi	r24, 0x09	; 9
    15e0:	0e 94 bf 14 	call	0x297e	; 0x297e <setTimer>
    return 0;
}
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	08 95       	ret

000015e8 <clock>:
	}
}


uint8_t clock(msg_par par)
{
    15e8:	ff 92       	push	r15
    15ea:	0f 93       	push	r16
    15ec:	1f 93       	push	r17
    15ee:	cf 93       	push	r28
    15f0:	df 93       	push	r29
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
    15f6:	67 97       	sbiw	r28, 0x17	; 23
    15f8:	0f b6       	in	r0, 0x3f	; 63
    15fa:	f8 94       	cli
    15fc:	de bf       	out	0x3e, r29	; 62
    15fe:	0f be       	out	0x3f, r0	; 63
    1600:	cd bf       	out	0x3d, r28	; 61
	uint8_t time[7];
    char lcd_buffer[16];

	ds_read_time(time);
    1602:	ce 01       	movw	r24, r28
    1604:	41 96       	adiw	r24, 0x11	; 17
    1606:	0e 94 29 06 	call	0xc52	; 0xc52 <ds_read_time>

    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    160a:	ff b6       	in	r15, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    160c:	f8 94       	cli
    {
        sprintf(lcd_buffer, "%02d.%02d %02d:%02d:%02d", time[4], time[5], time[2], time[1], time[0]);
    160e:	89 89       	ldd	r24, Y+17	; 0x11
    1610:	1f 92       	push	r1
    1612:	8f 93       	push	r24
    1614:	8a 89       	ldd	r24, Y+18	; 0x12
    1616:	1f 92       	push	r1
    1618:	8f 93       	push	r24
    161a:	8b 89       	ldd	r24, Y+19	; 0x13
    161c:	1f 92       	push	r1
    161e:	8f 93       	push	r24
    1620:	8e 89       	ldd	r24, Y+22	; 0x16
    1622:	1f 92       	push	r1
    1624:	8f 93       	push	r24
    1626:	8d 89       	ldd	r24, Y+21	; 0x15
    1628:	1f 92       	push	r1
    162a:	8f 93       	push	r24
    162c:	85 e9       	ldi	r24, 0x95	; 149
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	9f 93       	push	r25
    1632:	8f 93       	push	r24
    1634:	8e 01       	movw	r16, r28
    1636:	0f 5f       	subi	r16, 0xFF	; 255
    1638:	1f 4f       	sbci	r17, 0xFF	; 255
    163a:	1f 93       	push	r17
    163c:	0f 93       	push	r16
    163e:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <sprintf>
        lcd_gotoxy(0,0);
    1642:	60 e0       	ldi	r22, 0x00	; 0
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	0e 94 23 08 	call	0x1046	; 0x1046 <lcd_gotoxy>
        lcd_puts(lcd_buffer);
    164a:	c8 01       	movw	r24, r16
    164c:	0e 94 55 08 	call	0x10aa	; 0x10aa <lcd_puts>
        lcd_putc(status1);
    1650:	80 91 b7 02 	lds	r24, 0x02B7
    1654:	0e 94 34 08 	call	0x1068	; 0x1068 <lcd_putc>
        lcd_putc(status2);
    1658:	80 91 a4 02 	lds	r24, 0x02A4
    165c:	0e 94 34 08 	call	0x1068	; 0x1068 <lcd_putc>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1660:	ff be       	out	0x3f, r15	; 63
    }
    return 1;
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	f8 94       	cli
    1666:	de bf       	out	0x3e, r29	; 62
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	cd bf       	out	0x3d, r28	; 61
}
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	67 96       	adiw	r28, 0x17	; 23
    1670:	0f b6       	in	r0, 0x3f	; 63
    1672:	f8 94       	cli
    1674:	de bf       	out	0x3e, r29	; 62
    1676:	0f be       	out	0x3f, r0	; 63
    1678:	cd bf       	out	0x3d, r28	; 61
    167a:	df 91       	pop	r29
    167c:	cf 91       	pop	r28
    167e:	1f 91       	pop	r17
    1680:	0f 91       	pop	r16
    1682:	ff 90       	pop	r15
    1684:	08 95       	ret

00001686 <beep>:

uint8_t beep(msg_par par)
{
	static uint8_t i=0;

	PORTB ^= (1<<PB0);
    1686:	98 b3       	in	r25, 0x18	; 24
    1688:	21 e0       	ldi	r18, 0x01	; 1
    168a:	92 27       	eor	r25, r18
    168c:	98 bb       	out	0x18, r25	; 24
	i++;
    168e:	90 91 4a 02 	lds	r25, 0x024A
    1692:	9f 5f       	subi	r25, 0xFF	; 255
	if(i>=par)
    1694:	98 17       	cp	r25, r24
    1696:	18 f4       	brcc	.+6      	; 0x169e <beep+0x18>
uint8_t beep(msg_par par)
{
	static uint8_t i=0;

	PORTB ^= (1<<PB0);
	i++;
    1698:	90 93 4a 02 	sts	0x024A, r25
    169c:	06 c0       	rjmp	.+12     	; 0x16aa <beep+0x24>
	if(i>=par)
	{
		i=0;
    169e:	10 92 4a 02 	sts	0x024A, r1
        PORTB &= ~(1<<PB0);
    16a2:	c0 98       	cbi	0x18, 0	; 24
        killTimer(MSG_BEEP);
    16a4:	89 e0       	ldi	r24, 0x09	; 9
    16a6:	0e 94 fd 14 	call	0x29fa	; 0x29fa <killTimer>
	}
	return 1;
}
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	08 95       	ret

000016ae <rx_check>:


uint8_t rx_check(msg_par par)               // чистой воды костыль, кривой и с занозами
{
    rfm_status = rfm12_write(STATUS_READ);
    16ae:	80 e0       	ldi	r24, 0x00	; 0
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <rfm12_write>
    16b6:	90 93 41 02 	sts	0x0241, r25
    16ba:	80 93 40 02 	sts	0x0240, r24

    if( (rfm_status & ((1<<RGFFIT) | (1<<RGURFFOV)) ) > 0 )
    16be:	80 91 40 02 	lds	r24, 0x0240
    16c2:	90 91 41 02 	lds	r25, 0x0241
    16c6:	88 27       	eor	r24, r24
    16c8:	90 7a       	andi	r25, 0xA0	; 160
    16ca:	89 2b       	or	r24, r25
    16cc:	c9 f0       	breq	.+50     	; 0x1700 <rx_check+0x52>
    {
        ++error_counter;
    16ce:	80 91 42 02 	lds	r24, 0x0242
    16d2:	8f 5f       	subi	r24, 0xFF	; 255
    16d4:	80 93 42 02 	sts	0x0242, r24
        rfm12_write(CONFIGURATION_SETTING);                                                // чтобы обнулить регистр отправки
    16d8:	87 e5       	ldi	r24, 0x57	; 87
    16da:	90 e8       	ldi	r25, 0x80	; 128
    16dc:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <rfm12_write>
        rfm12_write(FIFO_AND_RESET);                                                       // перестать заполнять FIFO
    16e0:	81 e8       	ldi	r24, 0x81	; 129
    16e2:	9a ec       	ldi	r25, 0xCA	; 202
    16e4:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <rfm12_write>

        pack_counter = pack_size = 0;
    16e8:	10 92 43 02 	sts	0x0243, r1
    16ec:	10 92 44 02 	sts	0x0244, r1
        rfm12_write(FIFO_AND_RESET | FIFO_EN_MASK);
    16f0:	83 e8       	ldi	r24, 0x83	; 131
    16f2:	9a ec       	ldi	r25, 0xCA	; 202
    16f4:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <rfm12_write>
        rfm12_write(POWER_RX);
    16f8:	88 ec       	ldi	r24, 0xC8	; 200
    16fa:	92 e8       	ldi	r25, 0x82	; 130
    16fc:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <rfm12_write>
    }

    return 0;
}
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	08 95       	ret

00001704 <packet_handler>:


uint8_t packet_handler(msg_par par)
{
    1704:	cf 93       	push	r28
    if(pager_counter < PAGER_WAIT_TIME)    ++pager_counter;
    1706:	80 91 b8 02 	lds	r24, 0x02B8
    170a:	90 91 b9 02 	lds	r25, 0x02B9
    170e:	88 35       	cpi	r24, 0x58	; 88
    1710:	9b 41       	sbci	r25, 0x1B	; 27
    1712:	50 f4       	brcc	.+20     	; 0x1728 <packet_handler+0x24>
    1714:	80 91 b8 02 	lds	r24, 0x02B8
    1718:	90 91 b9 02 	lds	r25, 0x02B9
    171c:	01 96       	adiw	r24, 0x01	; 1
    171e:	90 93 b9 02 	sts	0x02B9, r25
    1722:	80 93 b8 02 	sts	0x02B8, r24
    1726:	07 c0       	rjmp	.+14     	; 0x1736 <packet_handler+0x32>
    else    if(status2 == 'P')             status2 = ' ';
    1728:	80 91 a4 02 	lds	r24, 0x02A4
    172c:	80 35       	cpi	r24, 0x50	; 80
    172e:	19 f4       	brne	.+6      	; 0x1736 <packet_handler+0x32>
    1730:	80 e2       	ldi	r24, 0x20	; 32
    1732:	80 93 a4 02 	sts	0x02A4, r24

	if(rfm_condition != NEW_PACK)  return 2;                        // если нового пакета нет - возвращает 1
    1736:	80 91 45 02 	lds	r24, 0x0245
    173a:	84 30       	cpi	r24, 0x04	; 4
    173c:	09 f0       	breq	.+2      	; 0x1740 <packet_handler+0x3c>
    173e:	a1 c0       	rjmp	.+322    	; 0x1882 <packet_handler+0x17e>

    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1740:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1742:	f8 94       	cli
    {
        killTimer(MSG_PACK_HANDLER);
    1744:	85 e0       	ldi	r24, 0x05	; 5
    1746:	0e 94 fd 14 	call	0x29fa	; 0x29fa <killTimer>

        switch (pack_buffer[0])
    174a:	80 91 81 02 	lds	r24, 0x0281
    174e:	80 35       	cpi	r24, 0x50	; 80
    1750:	21 f0       	breq	.+8      	; 0x175a <packet_handler+0x56>
    1752:	83 37       	cpi	r24, 0x73	; 115
    1754:	09 f4       	brne	.+2      	; 0x1758 <packet_handler+0x54>
    1756:	76 c0       	rjmp	.+236    	; 0x1844 <packet_handler+0x140>
    1758:	8b c0       	rjmp	.+278    	; 0x1870 <packet_handler+0x16c>
        {
            case BUTTON :
            {
                switch (pack_buffer[1])
    175a:	80 91 82 02 	lds	r24, 0x0282
    175e:	81 30       	cpi	r24, 0x01	; 1
    1760:	19 f0       	breq	.+6      	; 0x1768 <packet_handler+0x64>
    1762:	82 30       	cpi	r24, 0x02	; 2
    1764:	99 f1       	breq	.+102    	; 0x17cc <packet_handler+0xc8>
    1766:	84 c0       	rjmp	.+264    	; 0x1870 <packet_handler+0x16c>
                {
                case CALL :
                {
                    if (id_send)
    1768:	80 91 48 02 	lds	r24, 0x0248
    176c:	81 11       	cpse	r24, r1
    176e:	58 c0       	rjmp	.+176    	; 0x1820 <packet_handler+0x11c>
                        if ((id_any == 1) || (pack_buffer[2] == menu_id))
                            send_id();
                    }
                    else
                    {
                        if ( (add_active_call() > 0) || (second_call > 0) )
    1770:	0e 94 06 01 	call	0x20c	; 0x20c <add_active_call>
    1774:	81 11       	cpse	r24, r1
    1776:	05 c0       	rjmp	.+10     	; 0x1782 <packet_handler+0x7e>
    1778:	80 91 bd 02 	lds	r24, 0x02BD
    177c:	88 23       	and	r24, r24
    177e:	09 f4       	brne	.+2      	; 0x1782 <packet_handler+0x7e>
    1780:	4c c0       	rjmp	.+152    	; 0x181a <packet_handler+0x116>
                        {
                            seep_call_write();
    1782:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <seep_call_write>
                            if(snd_on) {
    1786:	80 91 a1 02 	lds	r24, 0x02A1
    178a:	88 23       	and	r24, r24
    178c:	b1 f0       	breq	.+44     	; 0x17ba <packet_handler+0xb6>
                                setTimer(MSG_BEEP, 6, snd_duration);
    178e:	40 91 a2 02 	lds	r20, 0x02A2
    1792:	50 91 a3 02 	lds	r21, 0x02A3
    1796:	66 e0       	ldi	r22, 0x06	; 6
    1798:	89 e0       	ldi	r24, 0x09	; 9
    179a:	0e 94 bf 14 	call	0x297e	; 0x297e <setTimer>
                                setTimer(MSG_BEEP_REP, 6, snd_duration*10);
    179e:	80 91 a2 02 	lds	r24, 0x02A2
    17a2:	90 91 a3 02 	lds	r25, 0x02A3
    17a6:	2a e0       	ldi	r18, 0x0A	; 10
    17a8:	28 9f       	mul	r18, r24
    17aa:	a0 01       	movw	r20, r0
    17ac:	29 9f       	mul	r18, r25
    17ae:	50 0d       	add	r21, r0
    17b0:	11 24       	eor	r1, r1
    17b2:	66 e0       	ldi	r22, 0x06	; 6
    17b4:	8a e0       	ldi	r24, 0x0A	; 10
    17b6:	0e 94 bf 14 	call	0x297e	; 0x297e <setTimer>
                            }

                            if(active_on)   sendMessage(MSG_KEY_PRESS, 0);
    17ba:	80 91 49 02 	lds	r24, 0x0249
    17be:	88 23       	and	r24, r24
    17c0:	31 f1       	breq	.+76     	; 0x180e <packet_handler+0x10a>
    17c2:	60 e0       	ldi	r22, 0x00	; 0
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	0e 94 33 14 	call	0x2866	; 0x2866 <sendMessage>
    17ca:	27 c0       	rjmp	.+78     	; 0x181a <packet_handler+0x116>
                    }
                    break;
                }
                case CANCEL :
                {
                    if (id_send)
    17cc:	80 91 48 02 	lds	r24, 0x0248
    17d0:	81 11       	cpse	r24, r1
    17d2:	26 c0       	rjmp	.+76     	; 0x1820 <packet_handler+0x11c>
                        if ((id_any == 1) || (pack_buffer[2] == menu_id))
                            send_id();
                    }
                    else
                    {
                        if ( remove_active_call() )
    17d4:	0e 94 49 01 	call	0x292	; 0x292 <remove_active_call>
    17d8:	88 23       	and	r24, r24
    17da:	f9 f0       	breq	.+62     	; 0x181a <packet_handler+0x116>
                        {
                            seep_call_write();
    17dc:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <seep_call_write>
                            if(snd_on) {
    17e0:	80 91 a1 02 	lds	r24, 0x02A1
    17e4:	88 23       	and	r24, r24
    17e6:	59 f0       	breq	.+22     	; 0x17fe <packet_handler+0xfa>
                                killTimer(MSG_BEEP_REP);
    17e8:	8a e0       	ldi	r24, 0x0A	; 10
    17ea:	0e 94 fd 14 	call	0x29fa	; 0x29fa <killTimer>
                                setTimer(MSG_BEEP, 2, snd_duration);
    17ee:	40 91 a2 02 	lds	r20, 0x02A2
    17f2:	50 91 a3 02 	lds	r21, 0x02A3
    17f6:	62 e0       	ldi	r22, 0x02	; 2
    17f8:	89 e0       	ldi	r24, 0x09	; 9
    17fa:	0e 94 bf 14 	call	0x297e	; 0x297e <setTimer>
                            }

                            if(active_on)   sendMessage(MSG_KEY_PRESS, 0);
    17fe:	80 91 49 02 	lds	r24, 0x0249
    1802:	81 11       	cpse	r24, r1
    1804:	de cf       	rjmp	.-68     	; 0x17c2 <packet_handler+0xbe>
                            else
                            {
                                if(n_active_calls)
    1806:	80 91 4e 02 	lds	r24, 0x024E
    180a:	88 23       	and	r24, r24
    180c:	b1 f0       	breq	.+44     	; 0x183a <packet_handler+0x136>
                            }

                            if(active_on)   sendMessage(MSG_KEY_PRESS, 0);
                            else
                            {
                                stopMenu();
    180e:	0e 94 67 0c 	call	0x18ce	; 0x18ce <stopMenu>
                                startMenuNull();
    1812:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <startMenuNull>
                                display_call();
    1816:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <display_call>
                            }
                        }
                        send_ackn();
    181a:	0e 94 1f 02 	call	0x43e	; 0x43e <send_ackn>
    181e:	28 c0       	rjmp	.+80     	; 0x1870 <packet_handler+0x16c>
                }
                case CANCEL :
                {
                    if (id_send)
                    {
                        if ((id_any == 1) || (pack_buffer[2] == menu_id))
    1820:	80 91 47 02 	lds	r24, 0x0247
    1824:	81 30       	cpi	r24, 0x01	; 1
    1826:	31 f0       	breq	.+12     	; 0x1834 <packet_handler+0x130>
                {
                case CALL :
                {
                    if (id_send)
                    {
                        if ((id_any == 1) || (pack_buffer[2] == menu_id))
    1828:	90 91 83 02 	lds	r25, 0x0283
    182c:	80 91 60 00 	lds	r24, 0x0060
    1830:	98 13       	cpse	r25, r24
    1832:	1e c0       	rjmp	.+60     	; 0x1870 <packet_handler+0x16c>
                            send_id();
    1834:	0e 94 2c 02 	call	0x458	; 0x458 <send_id>
    1838:	1b c0       	rjmp	.+54     	; 0x1870 <packet_handler+0x16c>
                                {
                                    stopMenu();
                                    startMenuNull();
                                    display_call();
                                }
                                else if( checkMenu() )   display_call();
    183a:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <checkMenu>
    183e:	88 23       	and	r24, r24
    1840:	61 f3       	breq	.-40     	; 0x181a <packet_handler+0x116>
    1842:	e9 cf       	rjmp	.-46     	; 0x1816 <packet_handler+0x112>
                break;
            }

            case PAGER :
            {
                pager_counter = 0;
    1844:	10 92 b9 02 	sts	0x02B9, r1
    1848:	10 92 b8 02 	sts	0x02B8, r1
                if(status2 == ' ')  status2 = 'P';
    184c:	80 91 a4 02 	lds	r24, 0x02A4
    1850:	80 32       	cpi	r24, 0x20	; 32
    1852:	19 f4       	brne	.+6      	; 0x185a <packet_handler+0x156>
    1854:	80 e5       	ldi	r24, 0x50	; 80
    1856:	80 93 a4 02 	sts	0x02A4, r24

                switch(pack_buffer[1])
    185a:	80 91 82 02 	lds	r24, 0x0282
    185e:	8d 34       	cpi	r24, 0x4D	; 77
    1860:	29 f0       	breq	.+10     	; 0x186c <packet_handler+0x168>
    1862:	83 36       	cpi	r24, 0x63	; 99
    1864:	29 f4       	brne	.+10     	; 0x1870 <packet_handler+0x16c>
                {
                    case EVENT :
                        send_active_call();
                        break;
                    case TIME :
                        send_time();
    1866:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <send_time>
    186a:	02 c0       	rjmp	.+4      	; 0x1870 <packet_handler+0x16c>
                if(status2 == ' ')  status2 = 'P';

                switch(pack_buffer[1])
                {
                    case EVENT :
                        send_active_call();
    186c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <send_active_call>
                }
                break;
            }
        }

        setTimer(MSG_PACK_HANDLER, 0, 1);
    1870:	41 e0       	ldi	r20, 0x01	; 1
    1872:	50 e0       	ldi	r21, 0x00	; 0
    1874:	60 e0       	ldi	r22, 0x00	; 0
    1876:	85 e0       	ldi	r24, 0x05	; 5
    1878:	0e 94 bf 14 	call	0x297e	; 0x297e <setTimer>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    187c:	cf bf       	out	0x3f, r28	; 63
    __asm__ volatile ("" ::: "memory");
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	01 c0       	rjmp	.+2      	; 0x1884 <packet_handler+0x180>
uint8_t packet_handler(msg_par par)
{
    if(pager_counter < PAGER_WAIT_TIME)    ++pager_counter;
    else    if(status2 == 'P')             status2 = ' ';

	if(rfm_condition != NEW_PACK)  return 2;                        // если нового пакета нет - возвращает 1
    1882:	82 e0       	ldi	r24, 0x02	; 2
        }

        setTimer(MSG_PACK_HANDLER, 0, 1);
    }
	return 1;
}
    1884:	cf 91       	pop	r28
    1886:	08 95       	ret

00001888 <dispMenu>:


/* Вывод пункта меню на экран */
uint8_t dispMenu(msg_par par) {

	lcd_cleanstr(1);
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	0e 94 70 08 	call	0x10e0	; 0x10e0 <lcd_cleanstr>

	if(selectedMenuItem == (menuItem*)&m_s1i1)  display_call();
    188e:	80 91 da 02 	lds	r24, 0x02DA
    1892:	90 91 db 02 	lds	r25, 0x02DB
    1896:	21 e0       	ldi	r18, 0x01	; 1
    1898:	87 37       	cpi	r24, 0x77	; 119
    189a:	92 07       	cpc	r25, r18
    189c:	19 f4       	brne	.+6      	; 0x18a4 <dispMenu+0x1c>
    189e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <display_call>
    18a2:	03 c0       	rjmp	.+6      	; 0x18aa <dispMenu+0x22>
    else                                        lcd_puts_p((char *)&selectedMenuItem->Text);
    18a4:	09 96       	adiw	r24, 0x09	; 9
    18a6:	0e 94 61 08 	call	0x10c2	; 0x10c2 <lcd_puts_p>

	return (1);
}
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	08 95       	ret

000018ae <menuChange>:


/* Функция перехода к другому пункту меню, если пункт есть - то переходит, иначе - остается */
void menuChange(menuItem* NewMenu)
{
	if ((menuItem*)NewMenu == (menuItem*)&NULL_ENTRY)
    18ae:	21 e0       	ldi	r18, 0x01	; 1
    18b0:	81 38       	cpi	r24, 0x81	; 129
    18b2:	92 07       	cpc	r25, r18
    18b4:	21 f0       	breq	.+8      	; 0x18be <menuChange+0x10>
	  return;

	selectedMenuItem = NewMenu;
    18b6:	90 93 db 02 	sts	0x02DB, r25
    18ba:	80 93 da 02 	sts	0x02DA, r24
    18be:	08 95       	ret

000018c0 <goto_m_s2i1>:
	return;
}

void goto_m_s2i1(void)
{
	selectedMenuItem = &m_s2i1;
    18c0:	8f ee       	ldi	r24, 0xEF	; 239
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	90 93 db 02 	sts	0x02DB, r25
    18c8:	80 93 da 02 	sts	0x02DA, r24
    18cc:	08 95       	ret

000018ce <stopMenu>:
}


/* выход из меню */
uint8_t stopMenu(void) {
	killHandlersNum(MSG_KEY_PRESS);
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <killHandlersNum>
	killTimer(MSG_CLOCK_REF);
    18d4:	87 e0       	ldi	r24, 0x07	; 7
    18d6:	0e 94 fd 14 	call	0x29fa	; 0x29fa <killTimer>
	killHandler(MSG_DISP_REFRESH, &dispMenu);
    18da:	64 e4       	ldi	r22, 0x44	; 68
    18dc:	7c e0       	ldi	r23, 0x0C	; 12
    18de:	84 e0       	ldi	r24, 0x04	; 4
    18e0:	0e 94 9c 13 	call	0x2738	; 0x2738 <killHandler>
	return (0);
}
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	08 95       	ret

000018e8 <menuKey>:
	return (1);
}


/* Переход к другому пункту меню по нажатой кнопке */
uint8_t menuKey(msg_par par) {
    18e8:	cf 93       	push	r28
    18ea:	df 93       	push	r29
    18ec:	1f 92       	push	r1
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
	switch (par) {
    18f2:	82 30       	cpi	r24, 0x02	; 2
    18f4:	f1 f0       	breq	.+60     	; 0x1932 <menuKey+0x4a>
    18f6:	60 f4       	brcc	.+24     	; 0x1910 <menuKey+0x28>
    18f8:	88 23       	and	r24, r24
    18fa:	09 f4       	brne	.+2      	; 0x18fe <menuKey+0x16>
    18fc:	42 c0       	rjmp	.+132    	; 0x1982 <menuKey+0x9a>
    18fe:	81 30       	cpi	r24, 0x01	; 1
    1900:	09 f0       	breq	.+2      	; 0x1904 <menuKey+0x1c>
    1902:	3c c0       	rjmp	.+120    	; 0x197c <menuKey+0x94>
				menuChange(CHILD);
			}
			break;
		}
	case KEY_UP: { // отмена выбора (возврат)
		menuChange(PARENT);
    1904:	e0 91 da 02 	lds	r30, 0x02DA
    1908:	f0 91 db 02 	lds	r31, 0x02DB
    190c:	34 96       	adiw	r30, 0x04	; 4
    190e:	32 c0       	rjmp	.+100    	; 0x1974 <menuKey+0x8c>
}


/* Переход к другому пункту меню по нажатой кнопке */
uint8_t menuKey(msg_par par) {
	switch (par) {
    1910:	84 30       	cpi	r24, 0x04	; 4
    1912:	21 f0       	breq	.+8      	; 0x191c <menuKey+0x34>
    1914:	48 f0       	brcs	.+18     	; 0x1928 <menuKey+0x40>
    1916:	85 30       	cpi	r24, 0x05	; 5
    1918:	d1 f0       	breq	.+52     	; 0x194e <menuKey+0x66>
    191a:	30 c0       	rjmp	.+96     	; 0x197c <menuKey+0x94>
	case 0: {
		return 1;
        }
	case KEY_LEFT: {
		menuChange(PREVIOUS);
    191c:	e0 91 da 02 	lds	r30, 0x02DA
    1920:	f0 91 db 02 	lds	r31, 0x02DB
    1924:	32 96       	adiw	r30, 0x02	; 2
    1926:	26 c0       	rjmp	.+76     	; 0x1974 <menuKey+0x8c>
		break;
        }
	case KEY_RIGHT: {
		menuChange(NEXT);
    1928:	e0 91 da 02 	lds	r30, 0x02DA
    192c:	f0 91 db 02 	lds	r31, 0x02DB
    1930:	21 c0       	rjmp	.+66     	; 0x1974 <menuKey+0x8c>
		break;
        }
	case KEY_DOWN : {
            stopMenu();
    1932:	0e 94 67 0c 	call	0x18ce	; 0x18ce <stopMenu>
            setHandler(MSG_KEY_PRESS, &Key_active);
    1936:	69 ed       	ldi	r22, 0xD9	; 217
    1938:	72 e1       	ldi	r23, 0x12	; 18
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	0e 94 78 13 	call	0x26f0	; 0x26f0 <setHandler>
            nevent = 0;
    1940:	10 92 4b 02 	sts	0x024B, r1
            sendMessage(MSG_KEY_PRESS, 0);
    1944:	60 e0       	ldi	r22, 0x00	; 0
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	0e 94 33 14 	call	0x2866	; 0x2866 <sendMessage>
            break;
    194c:	17 c0       	rjmp	.+46     	; 0x197c <menuKey+0x94>
        }
	case KEY_OK:
		{ // выбор пункта
			uint8_t sel;
			sel = SELECT;
    194e:	80 91 da 02 	lds	r24, 0x02DA
    1952:	90 91 db 02 	lds	r25, 0x02DB
    1956:	fc 01       	movw	r30, r24
    1958:	38 96       	adiw	r30, 0x08	; 8
    195a:	64 91       	lpm	r22, Z
			if (sel != 0)
    195c:	66 23       	and	r22, r22
    195e:	41 f0       	breq	.+16     	; 0x1970 <menuKey+0x88>
			{
                stopMenu();
    1960:	69 83       	std	Y+1, r22	; 0x01
    1962:	0e 94 67 0c 	call	0x18ce	; 0x18ce <stopMenu>
				sendMessage(MSG_MENU_SELECT, sel);
    1966:	69 81       	ldd	r22, Y+1	; 0x01
    1968:	86 e0       	ldi	r24, 0x06	; 6
    196a:	0e 94 33 14 	call	0x2866	; 0x2866 <sendMessage>
				return (1);
    196e:	09 c0       	rjmp	.+18     	; 0x1982 <menuKey+0x9a>
			}
			else
			{
				menuChange(CHILD);
    1970:	fc 01       	movw	r30, r24
    1972:	36 96       	adiw	r30, 0x06	; 6
			}
			break;
		}
	case KEY_UP: { // отмена выбора (возврат)
		menuChange(PARENT);
    1974:	85 91       	lpm	r24, Z+
    1976:	94 91       	lpm	r25, Z
    1978:	0e 94 57 0c 	call	0x18ae	; 0x18ae <menuChange>
        }
	}
    dispMenu(0);
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	0e 94 44 0c 	call	0x1888	; 0x1888 <dispMenu>

	return (1);
}
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	0f 90       	pop	r0
    1986:	df 91       	pop	r29
    1988:	cf 91       	pop	r28
    198a:	08 95       	ret

0000198c <startMenu>:
}


/* вход в меню */
uint8_t startMenu(void) {
	lcd_init(LCD_DISP_ON);
    198c:	8c e0       	ldi	r24, 0x0C	; 12
    198e:	0e 94 83 08 	call	0x1106	; 0x1106 <lcd_init>
	dispMenu(0);
    1992:	80 e0       	ldi	r24, 0x00	; 0
    1994:	0e 94 44 0c 	call	0x1888	; 0x1888 <dispMenu>

	setHandler(MSG_KEY_PRESS, &menuKey);
    1998:	64 e7       	ldi	r22, 0x74	; 116
    199a:	7c e0       	ldi	r23, 0x0C	; 12
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	0e 94 78 13 	call	0x26f0	; 0x26f0 <setHandler>
	setHandler(MSG_DISP_REFRESH, &dispMenu);
    19a2:	64 e4       	ldi	r22, 0x44	; 68
    19a4:	7c e0       	ldi	r23, 0x0C	; 12
    19a6:	84 e0       	ldi	r24, 0x04	; 4
    19a8:	0e 94 78 13 	call	0x26f0	; 0x26f0 <setHandler>
    setTimer(MSG_CLOCK_REF, 0, 800);
    19ac:	40 e2       	ldi	r20, 0x20	; 32
    19ae:	53 e0       	ldi	r21, 0x03	; 3
    19b0:	60 e0       	ldi	r22, 0x00	; 0
    19b2:	87 e0       	ldi	r24, 0x07	; 7
    19b4:	0e 94 bf 14 	call	0x297e	; 0x297e <setTimer>
    sendMessage(MSG_CLOCK_REF, 0);
    19b8:	60 e0       	ldi	r22, 0x00	; 0
    19ba:	87 e0       	ldi	r24, 0x07	; 7
    19bc:	0e 94 33 14 	call	0x2866	; 0x2866 <sendMessage>

    if(n_active_calls) display_call();
    19c0:	80 91 4e 02 	lds	r24, 0x024E
    19c4:	81 11       	cpse	r24, r1
    19c6:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <display_call>

    return (0);
}
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	08 95       	ret

000019ce <selectMenu>:
MAKE_MENU(m_s2i6,  m_s2i1,    m_s2i5,      m_s1i2,     m_s1i2,       0,         "Ha\267a\343");                                     // Назад


/* В этой функции описывается алгоритм выбора пунктов меню */
uint8_t selectMenu(msg_par par)
{
    19ce:	0f 93       	push	r16
    19d0:	1f 93       	push	r17
    19d2:	cf 93       	push	r28
    19d4:	df 93       	push	r29
    19d6:	cd b7       	in	r28, 0x3d	; 61
    19d8:	de b7       	in	r29, 0x3e	; 62
    19da:	61 97       	sbiw	r28, 0x11	; 17
    19dc:	0f b6       	in	r0, 0x3f	; 63
    19de:	f8 94       	cli
    19e0:	de bf       	out	0x3e, r29	; 62
    19e2:	0f be       	out	0x3f, r0	; 63
    19e4:	cd bf       	out	0x3d, r28	; 61
    char lcd_buffer[16];

    lcd_clrscr();
    19e6:	89 8b       	std	Y+17, r24	; 0x11
    19e8:	0e 94 2e 08 	call	0x105c	; 0x105c <lcd_clrscr>

	switch (par)
    19ec:	89 89       	ldd	r24, Y+17	; 0x11
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	fc 01       	movw	r30, r24
    19f2:	32 97       	sbiw	r30, 0x02	; 2
    19f4:	ea 30       	cpi	r30, 0x0A	; 10
    19f6:	f1 05       	cpc	r31, r1
    19f8:	08 f0       	brcs	.+2      	; 0x19fc <selectMenu+0x2e>
    19fa:	f9 c0       	rjmp	.+498    	; 0x1bee <selectMenu+0x220>
    19fc:	e8 5c       	subi	r30, 0xC8	; 200
    19fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1a00:	0c 94 71 16 	jmp	0x2ce2	; 0x2ce2 <__tablejump2__>
    {
    case MENU_PSW  :
    {
		if(psw_on)
    1a04:	80 91 46 02 	lds	r24, 0x0246
    1a08:	88 23       	and	r24, r24
    1a0a:	61 f0       	breq	.+24     	; 0x1a24 <selectMenu+0x56>
void menuChange(menuItem* NewMenu)
{
	if ((menuItem*)NewMenu == (menuItem*)&NULL_ENTRY)
	  return;

	selectedMenuItem = NewMenu;
    1a0c:	8f ee       	ldi	r24, 0xEF	; 239
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	90 93 db 02 	sts	0x02DB, r25
    1a14:	80 93 da 02 	sts	0x02DA, r24
    case MENU_PSW  :
    {
		if(psw_on)
		{
            menuChange(&m_s2i1);
            startMenu();
    1a18:	0e 94 c6 0c 	call	0x198c	; 0x198c <startMenu>
            dispMenu(0);
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	0e 94 44 0c 	call	0x1888	; 0x1888 <dispMenu>
    1a22:	e5 c0       	rjmp	.+458    	; 0x1bee <selectMenu+0x220>
		}
		else
		{
            menu_x = 0;
    1a24:	10 92 4c 02 	sts	0x024C, r1
            lcd_init(LCD_DISP_ON_CURSOR_BLINK);
    1a28:	8f e0       	ldi	r24, 0x0F	; 15
    1a2a:	0e 94 83 08 	call	0x1106	; 0x1106 <lcd_init>
            lcd_puts("Be\343\270\277e \276apo\273\304");
    1a2e:	8f eb       	ldi	r24, 0xBF	; 191
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	0e 94 55 08 	call	0x10aa	; 0x10aa <lcd_puts>
            setHandler(MSG_KEY_PRESS, &Key_password);
    1a36:	67 e1       	ldi	r22, 0x17	; 23
    1a38:	7e e0       	ldi	r23, 0x0E	; 14
    1a3a:	3b c0       	rjmp	.+118    	; 0x1ab2 <selectMenu+0xe4>
        }
        break;
    }
	case MENU_TIME :
	{
		lcd_init(LCD_DISP_ON_CURSOR_BLINK);
    1a3c:	8f e0       	ldi	r24, 0x0F	; 15
    1a3e:	0e 94 83 08 	call	0x1106	; 0x1106 <lcd_init>
		lcd_puts("\xe3\xe3 \xbc\xbc \xb4\xb4 \xc0\xc0 \xbc\xb8\xbd");
    1a42:	8d ec       	ldi	r24, 0xCD	; 205
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	0e 94 55 08 	call	0x10aa	; 0x10aa <lcd_puts>
        ds_read_time(time);
    1a4a:	83 ed       	ldi	r24, 0xD3	; 211
    1a4c:	92 e0       	ldi	r25, 0x02	; 2
    1a4e:	0e 94 29 06 	call	0xc52	; 0xc52 <ds_read_time>
        menu_x = 0;
    1a52:	10 92 4c 02 	sts	0x024C, r1

		setHandler(MSG_KEY_PRESS, &Key_time);
    1a56:	66 ed       	ldi	r22, 0xD6	; 214
    1a58:	7e e0       	ldi	r23, 0x0E	; 14
    1a5a:	2b c0       	rjmp	.+86     	; 0x1ab2 <selectMenu+0xe4>
        sendMessage(MSG_KEY_PRESS, 0);
		break;
	}
    case MENU_SND :
	{
		lcd_init(LCD_DISP_ON_CURSOR_BLINK);
    1a5c:	8f e0       	ldi	r24, 0x0F	; 15
    1a5e:	0e 94 83 08 	call	0x1106	; 0x1106 <lcd_init>
		lcd_puts(" \267\263y\272: ");
    1a62:	8d ed       	ldi	r24, 0xDD	; 221
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	0e 94 55 08 	call	0x10aa	; 0x10aa <lcd_puts>
		lcd_gotoxy(0,1);
    1a6a:	61 e0       	ldi	r22, 0x01	; 1
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	0e 94 23 08 	call	0x1046	; 0x1046 <lcd_gotoxy>
		lcd_puts(" \343\273\270\277.     ce\272.");
    1a72:	85 ee       	ldi	r24, 0xE5	; 229
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	0e 94 55 08 	call	0x10aa	; 0x10aa <lcd_puts>
        menu_x = 0;
    1a7a:	10 92 4c 02 	sts	0x024C, r1
		setHandler(MSG_KEY_PRESS, &Key_snd);
    1a7e:	6e eb       	ldi	r22, 0xBE	; 190
    1a80:	7f e0       	ldi	r23, 0x0F	; 15
    1a82:	17 c0       	rjmp	.+46     	; 0x1ab2 <selectMenu+0xe4>
        sendMessage(MSG_KEY_PRESS, 0);
		break;
	}
	case MENU_CH :
	{
 		lcd_init(LCD_DISP_ON_CURSOR_BLINK);
    1a84:	8f e0       	ldi	r24, 0x0F	; 15
    1a86:	0e 94 83 08 	call	0x1106	; 0x1106 <lcd_init>
        lcd_puts("B\263e\343\270\277e");
    1a8a:	85 ef       	ldi	r24, 0xF5	; 245
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	0e 94 55 08 	call	0x10aa	; 0x10aa <lcd_puts>

        setHandler(MSG_KEY_PRESS, &Key_channel);
    1a92:	64 ed       	ldi	r22, 0xD4	; 212
    1a94:	71 e1       	ldi	r23, 0x11	; 17
    1a96:	0d c0       	rjmp	.+26     	; 0x1ab2 <selectMenu+0xe4>
        sendMessage(MSG_KEY_PRESS, 0);
        break;
	}
	case MENU_SCALL :
    {
        nevent = second_call;
    1a98:	80 91 bd 02 	lds	r24, 0x02BD
    1a9c:	80 93 4b 02 	sts	0x024B, r24
        lcd_init(LCD_DISP_ON_CURSOR_BLINK);
    1aa0:	8f e0       	ldi	r24, 0x0F	; 15
    1aa2:	0e 94 83 08 	call	0x1106	; 0x1106 <lcd_init>
        lcd_puts("\250o\263\277op\275\303e \263\303\267.:");
    1aa6:	8d ef       	ldi	r24, 0xFD	; 253
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	0e 94 55 08 	call	0x10aa	; 0x10aa <lcd_puts>

        setHandler(MSG_KEY_PRESS, &Key_scall);
    1aae:	6b e9       	ldi	r22, 0x9B	; 155
    1ab0:	71 e1       	ldi	r23, 0x11	; 17
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	8e c0       	rjmp	.+284    	; 0x1bd2 <selectMenu+0x204>
        break;
    }

	case MENU_ROM :
	{
		sprintf(lcd_buffer,"\244a\276o\273\275e\275o:%3d%%", seep_pointer/640);
    1ab6:	80 91 ba 02 	lds	r24, 0x02BA
    1aba:	90 91 bb 02 	lds	r25, 0x02BB
    1abe:	60 e8       	ldi	r22, 0x80	; 128
    1ac0:	72 e0       	ldi	r23, 0x02	; 2
    1ac2:	0e 94 5d 16 	call	0x2cba	; 0x2cba <__udivmodhi4>
    1ac6:	7f 93       	push	r23
    1ac8:	6f 93       	push	r22
    1aca:	8d e0       	ldi	r24, 0x0D	; 13
    1acc:	91 e0       	ldi	r25, 0x01	; 1
    1ace:	9f 93       	push	r25
    1ad0:	8f 93       	push	r24
    1ad2:	8e 01       	movw	r16, r28
    1ad4:	0f 5f       	subi	r16, 0xFF	; 255
    1ad6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad8:	1f 93       	push	r17
    1ada:	0f 93       	push	r16
    1adc:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <sprintf>
		lcd_puts(lcd_buffer);
    1ae0:	c8 01       	movw	r24, r16
    1ae2:	0e 94 55 08 	call	0x10aa	; 0x10aa <lcd_puts>
        sprintf(lcd_buffer, "%4d \307\300. \270\267 %4d", seep_pointer>>3, 8000);
    1ae6:	80 91 ba 02 	lds	r24, 0x02BA
    1aea:	90 91 bb 02 	lds	r25, 0x02BB
    1aee:	2f e1       	ldi	r18, 0x1F	; 31
    1af0:	2f 93       	push	r18
    1af2:	20 e4       	ldi	r18, 0x40	; 64
    1af4:	2f 93       	push	r18
    1af6:	23 e0       	ldi	r18, 0x03	; 3
    1af8:	96 95       	lsr	r25
    1afa:	87 95       	ror	r24
    1afc:	2a 95       	dec	r18
    1afe:	e1 f7       	brne	.-8      	; 0x1af8 <selectMenu+0x12a>
    1b00:	9f 93       	push	r25
    1b02:	8f 93       	push	r24
    1b04:	8d e1       	ldi	r24, 0x1D	; 29
    1b06:	91 e0       	ldi	r25, 0x01	; 1
    1b08:	9f 93       	push	r25
    1b0a:	8f 93       	push	r24
    1b0c:	1f 93       	push	r17
    1b0e:	0f 93       	push	r16
    1b10:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <sprintf>
        lcd_gotoxy(0,1);
    1b14:	61 e0       	ldi	r22, 0x01	; 1
    1b16:	80 e0       	ldi	r24, 0x00	; 0
    1b18:	0e 94 23 08 	call	0x1046	; 0x1046 <lcd_gotoxy>
        lcd_puts(lcd_buffer);
    1b1c:	c8 01       	movw	r24, r16
    1b1e:	0e 94 55 08 	call	0x10aa	; 0x10aa <lcd_puts>
		setHandler(MSG_KEY_PRESS, &Key_ok);
    1b22:	60 e9       	ldi	r22, 0x90	; 144
    1b24:	71 e1       	ldi	r23, 0x11	; 17
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	0e 94 78 13 	call	0x26f0	; 0x26f0 <setHandler>
		break;
    1b2c:	0f b6       	in	r0, 0x3f	; 63
    1b2e:	f8 94       	cli
    1b30:	de bf       	out	0x3e, r29	; 62
    1b32:	0f be       	out	0x3f, r0	; 63
    1b34:	cd bf       	out	0x3d, r28	; 61
    1b36:	5b c0       	rjmp	.+182    	; 0x1bee <selectMenu+0x220>
	}
	case MENU_ST :
	{
        lcd_puts("Ko\273\270\300ec\277\263o");
    1b38:	8c e2       	ldi	r24, 0x2C	; 44
    1b3a:	91 e0       	ldi	r25, 0x01	; 1
    1b3c:	0e 94 55 08 	call	0x10aa	; 0x10aa <lcd_puts>
        sprintf(lcd_buffer, "\276y\273\304\277o\263: %3d", nbuttons);
    1b40:	80 91 4f 02 	lds	r24, 0x024F
    1b44:	90 91 50 02 	lds	r25, 0x0250
    1b48:	9f 93       	push	r25
    1b4a:	8f 93       	push	r24
    1b4c:	87 e3       	ldi	r24, 0x37	; 55
    1b4e:	91 e0       	ldi	r25, 0x01	; 1
    1b50:	9f 93       	push	r25
    1b52:	8f 93       	push	r24
    1b54:	8e 01       	movw	r16, r28
    1b56:	0f 5f       	subi	r16, 0xFF	; 255
    1b58:	1f 4f       	sbci	r17, 0xFF	; 255
    1b5a:	1f 93       	push	r17
    1b5c:	0f 93       	push	r16
    1b5e:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <sprintf>
        lcd_gotoxy(0,1);
    1b62:	61 e0       	ldi	r22, 0x01	; 1
    1b64:	80 e0       	ldi	r24, 0x00	; 0
    1b66:	0e 94 23 08 	call	0x1046	; 0x1046 <lcd_gotoxy>
        lcd_puts(lcd_buffer);
    1b6a:	c8 01       	movw	r24, r16
    1b6c:	0e 94 55 08 	call	0x10aa	; 0x10aa <lcd_puts>

        setHandler(MSG_KEY_PRESS, &Key_ok);
    1b70:	60 e9       	ldi	r22, 0x90	; 144
    1b72:	71 e1       	ldi	r23, 0x11	; 17
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	0e 94 78 13 	call	0x26f0	; 0x26f0 <setHandler>
        break;
    1b7a:	0f 90       	pop	r0
    1b7c:	0f 90       	pop	r0
    1b7e:	0f 90       	pop	r0
    1b80:	0f 90       	pop	r0
    1b82:	0f 90       	pop	r0
    1b84:	0f 90       	pop	r0
    1b86:	33 c0       	rjmp	.+102    	; 0x1bee <selectMenu+0x220>
	}
	case MENU_EV :
	{
        if (seep_pointer > RECORD_SIZE)
    1b88:	80 91 ba 02 	lds	r24, 0x02BA
    1b8c:	90 91 bb 02 	lds	r25, 0x02BB
    1b90:	09 97       	sbiw	r24, 0x09	; 9
    1b92:	18 f0       	brcs	.+6      	; 0x1b9a <selectMenu+0x1cc>
        {
            setHandler(MSG_KEY_PRESS, &Key_event);
    1b94:	64 e2       	ldi	r22, 0x24	; 36
    1b96:	72 e1       	ldi	r23, 0x12	; 18
    1b98:	21 c0       	rjmp	.+66     	; 0x1bdc <selectMenu+0x20e>
            nevent = 0;
            sendMessage(MSG_KEY_PRESS, 0);
        }
        else
        {
            lcd_gotoxy(2,1);
    1b9a:	61 e0       	ldi	r22, 0x01	; 1
    1b9c:	82 e0       	ldi	r24, 0x02	; 2
    1b9e:	0e 94 23 08 	call	0x1046	; 0x1046 <lcd_gotoxy>
            lcd_puts("He\277 \263\303\267o\263o\263");
    1ba2:	84 e4       	ldi	r24, 0x44	; 68
    1ba4:	91 e0       	ldi	r25, 0x01	; 1
    1ba6:	0e 94 55 08 	call	0x10aa	; 0x10aa <lcd_puts>
            setHandler(MSG_KEY_PRESS, &Key_ok);
    1baa:	60 e9       	ldi	r22, 0x90	; 144
    1bac:	71 e1       	ldi	r23, 0x11	; 17
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	0e 94 78 13 	call	0x26f0	; 0x26f0 <setHandler>
    1bb4:	1c c0       	rjmp	.+56     	; 0x1bee <selectMenu+0x220>
        }
        break;
	}
	case MENU_ID :
	{
        menu_x = 0;
    1bb6:	10 92 4c 02 	sts	0x024C, r1
        lcd_init(LCD_DISP_ON_CURSOR_BLINK);
    1bba:	8f e0       	ldi	r24, 0x0F	; 15
    1bbc:	0e 94 83 08 	call	0x1106	; 0x1106 <lcd_init>
        lcd_puts("CH ID \332\377 CH ID \331");
    1bc0:	80 e5       	ldi	r24, 0x50	; 80
    1bc2:	91 e0       	ldi	r25, 0x01	; 1
    1bc4:	0e 94 55 08 	call	0x10aa	; 0x10aa <lcd_puts>
        id_send = 1;
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	80 93 48 02 	sts	0x0248, r24
        setHandler(MSG_KEY_PRESS, &Key_id);
    1bce:	6a e8       	ldi	r22, 0x8A	; 138
    1bd0:	70 e1       	ldi	r23, 0x10	; 16
    1bd2:	0e 94 78 13 	call	0x26f0	; 0x26f0 <setHandler>
    1bd6:	07 c0       	rjmp	.+14     	; 0x1be6 <selectMenu+0x218>
        sendMessage(MSG_KEY_PRESS, 0);
        break;
	}
	case MENU_ACT :
	{
        setHandler(MSG_KEY_PRESS, &Key_active);
    1bd8:	69 ed       	ldi	r22, 0xD9	; 217
    1bda:	72 e1       	ldi	r23, 0x12	; 18
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	0e 94 78 13 	call	0x26f0	; 0x26f0 <setHandler>
        nevent = 0;
    1be2:	10 92 4b 02 	sts	0x024B, r1
        sendMessage(MSG_KEY_PRESS, 0);
    1be6:	60 e0       	ldi	r22, 0x00	; 0
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	0e 94 33 14 	call	0x2866	; 0x2866 <sendMessage>
        break;
	}
	}
	return 1;
}
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	61 96       	adiw	r28, 0x11	; 17
    1bf2:	0f b6       	in	r0, 0x3f	; 63
    1bf4:	f8 94       	cli
    1bf6:	de bf       	out	0x3e, r29	; 62
    1bf8:	0f be       	out	0x3f, r0	; 63
    1bfa:	cd bf       	out	0x3d, r28	; 61
    1bfc:	df 91       	pop	r29
    1bfe:	cf 91       	pop	r28
    1c00:	1f 91       	pop	r17
    1c02:	0f 91       	pop	r16
    1c04:	08 95       	ret

00001c06 <startMenuNull>:
}


/* вход в меню с нулевого пункта*/
uint8_t startMenuNull(void) {
	selectedMenuItem = (menuItem*)&m_s1i1;
    1c06:	87 e7       	ldi	r24, 0x77	; 119
    1c08:	91 e0       	ldi	r25, 0x01	; 1
    1c0a:	90 93 db 02 	sts	0x02DB, r25
    1c0e:	80 93 da 02 	sts	0x02DA, r24
    startMenu();
    1c12:	0e 94 c6 0c 	call	0x198c	; 0x198c <startMenu>
    return (0);
}
    1c16:	80 e0       	ldi	r24, 0x00	; 0
    1c18:	08 95       	ret

00001c1a <checkMenu>:


uint8_t checkMenu(void) {
    if(	selectedMenuItem == (menuItem*)&m_s1i1 ) return 1;
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	20 91 da 02 	lds	r18, 0x02DA
    1c20:	30 91 db 02 	lds	r19, 0x02DB
    1c24:	27 57       	subi	r18, 0x77	; 119
    1c26:	31 40       	sbci	r19, 0x01	; 1
    1c28:	09 f0       	breq	.+2      	; 0x1c2c <checkMenu+0x12>
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    else                                         return 0;
}
    1c2c:	08 95       	ret

00001c2e <Key_password>:
}



uint8_t Key_password(msg_par par)
{
    1c2e:	cf 93       	push	r28
	switch (par)
    1c30:	83 30       	cpi	r24, 0x03	; 3
    1c32:	a9 f0       	breq	.+42     	; 0x1c5e <Key_password+0x30>
    1c34:	28 f4       	brcc	.+10     	; 0x1c40 <Key_password+0x12>
    1c36:	81 30       	cpi	r24, 0x01	; 1
    1c38:	39 f1       	breq	.+78     	; 0x1c88 <Key_password+0x5a>
    1c3a:	82 30       	cpi	r24, 0x02	; 2
    1c3c:	c9 f0       	breq	.+50     	; 0x1c70 <Key_password+0x42>
    1c3e:	81 c0       	rjmp	.+258    	; 0x1d42 <Key_password+0x114>
    1c40:	84 30       	cpi	r24, 0x04	; 4
    1c42:	19 f0       	breq	.+6      	; 0x1c4a <Key_password+0x1c>
    1c44:	85 30       	cpi	r24, 0x05	; 5
    1c46:	69 f1       	breq	.+90     	; 0x1ca2 <Key_password+0x74>
    1c48:	7c c0       	rjmp	.+248    	; 0x1d42 <Key_password+0x114>
	{
        case KEY_LEFT :
        {
            if(menu_x > 0)  --menu_x;
    1c4a:	80 91 4c 02 	lds	r24, 0x024C
    1c4e:	88 23       	and	r24, r24
    1c50:	11 f0       	breq	.+4      	; 0x1c56 <Key_password+0x28>
    1c52:	81 50       	subi	r24, 0x01	; 1
    1c54:	01 c0       	rjmp	.+2      	; 0x1c58 <Key_password+0x2a>
            else            menu_x = 3;
    1c56:	83 e0       	ldi	r24, 0x03	; 3
    1c58:	80 93 4c 02 	sts	0x024C, r24
    1c5c:	74 c0       	rjmp	.+232    	; 0x1d46 <Key_password+0x118>
            break;
        }
        case KEY_RIGHT :
        {
            if(menu_x < 3)  ++menu_x;
    1c5e:	80 91 4c 02 	lds	r24, 0x024C
    1c62:	83 30       	cpi	r24, 0x03	; 3
    1c64:	10 f4       	brcc	.+4      	; 0x1c6a <Key_password+0x3c>
    1c66:	8f 5f       	subi	r24, 0xFF	; 255
    1c68:	f7 cf       	rjmp	.-18     	; 0x1c58 <Key_password+0x2a>
            else            menu_x = 0;
    1c6a:	10 92 4c 02 	sts	0x024C, r1
    1c6e:	6b c0       	rjmp	.+214    	; 0x1d46 <Key_password+0x118>
            break;
        }

        case KEY_DOWN:
        {
            if (menu_psw_digit[menu_x] > 0)   --menu_psw_digit[menu_x];
    1c70:	e0 91 4c 02 	lds	r30, 0x024C
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	ea 51       	subi	r30, 0x1A	; 26
    1c78:	fd 4f       	sbci	r31, 0xFD	; 253
    1c7a:	80 81       	ld	r24, Z
    1c7c:	88 23       	and	r24, r24
    1c7e:	11 f0       	breq	.+4      	; 0x1c84 <Key_password+0x56>
    1c80:	81 50       	subi	r24, 0x01	; 1
    1c82:	0b c0       	rjmp	.+22     	; 0x1c9a <Key_password+0x6c>
            else            menu_psw_digit[menu_x] = 9;
    1c84:	89 e0       	ldi	r24, 0x09	; 9
    1c86:	09 c0       	rjmp	.+18     	; 0x1c9a <Key_password+0x6c>
            break;
        }

        case KEY_UP:
        {
            if (menu_psw_digit[menu_x] < 9)   ++menu_psw_digit[menu_x];
    1c88:	e0 91 4c 02 	lds	r30, 0x024C
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	ea 51       	subi	r30, 0x1A	; 26
    1c90:	fd 4f       	sbci	r31, 0xFD	; 253
    1c92:	80 81       	ld	r24, Z
    1c94:	89 30       	cpi	r24, 0x09	; 9
    1c96:	18 f4       	brcc	.+6      	; 0x1c9e <Key_password+0x70>
    1c98:	8f 5f       	subi	r24, 0xFF	; 255
    1c9a:	80 83       	st	Z, r24
    1c9c:	54 c0       	rjmp	.+168    	; 0x1d46 <Key_password+0x118>
            else            menu_psw_digit[menu_x] = 0;
    1c9e:	10 82       	st	Z, r1
    1ca0:	52 c0       	rjmp	.+164    	; 0x1d46 <Key_password+0x118>
            break;
        }

        case KEY_OK:
        {
            ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1ca2:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1ca4:	f8 94       	cli
            {
                menu_password = menu_psw_digit[0]*1000 + menu_psw_digit[1]*100 + menu_psw_digit[2]*10 + menu_psw_digit[3];
    1ca6:	50 91 e7 02 	lds	r21, 0x02E7
    1caa:	40 91 e8 02 	lds	r20, 0x02E8
    1cae:	60 91 e6 02 	lds	r22, 0x02E6
    1cb2:	28 ee       	ldi	r18, 0xE8	; 232
    1cb4:	33 e0       	ldi	r19, 0x03	; 3
    1cb6:	62 9f       	mul	r22, r18
    1cb8:	c0 01       	movw	r24, r0
    1cba:	63 9f       	mul	r22, r19
    1cbc:	90 0d       	add	r25, r0
    1cbe:	11 24       	eor	r1, r1
    1cc0:	24 e6       	ldi	r18, 0x64	; 100
    1cc2:	52 9f       	mul	r21, r18
    1cc4:	80 0d       	add	r24, r0
    1cc6:	91 1d       	adc	r25, r1
    1cc8:	11 24       	eor	r1, r1
    1cca:	2a e0       	ldi	r18, 0x0A	; 10
    1ccc:	42 9f       	mul	r20, r18
    1cce:	80 0d       	add	r24, r0
    1cd0:	91 1d       	adc	r25, r1
    1cd2:	11 24       	eor	r1, r1
    1cd4:	20 91 e9 02 	lds	r18, 0x02E9
    1cd8:	82 0f       	add	r24, r18
    1cda:	91 1d       	adc	r25, r1
    1cdc:	90 93 dd 02 	sts	0x02DD, r25
    1ce0:	80 93 dc 02 	sts	0x02DC, r24
                killHandler(MSG_KEY_PRESS, &Key_password);
    1ce4:	67 e1       	ldi	r22, 0x17	; 23
    1ce6:	7e e0       	ldi	r23, 0x0E	; 14
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	0e 94 9c 13 	call	0x2738	; 0x2738 <killHandler>
                startMenu();
    1cee:	0e 94 c6 0c 	call	0x198c	; 0x198c <startMenu>
                if (menu_password == PASSWORD)
    1cf2:	80 91 dc 02 	lds	r24, 0x02DC
    1cf6:	90 91 dd 02 	lds	r25, 0x02DD
    1cfa:	81 31       	cpi	r24, 0x11	; 17
    1cfc:	96 42       	sbci	r25, 0x26	; 38
    1cfe:	b9 f4       	brne	.+46     	; 0x1d2e <Key_password+0x100>
                {
                    goto_m_s2i1();
    1d00:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <goto_m_s2i1>
                    dispMenu(0);
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	0e 94 44 0c 	call	0x1888	; 0x1888 <dispMenu>
                    menu_psw_digit[3] = menu_psw_digit[2] = menu_psw_digit[1] = menu_psw_digit[0] = 0;
    1d0a:	10 92 e6 02 	sts	0x02E6, r1
    1d0e:	10 92 e7 02 	sts	0x02E7, r1
    1d12:	10 92 e8 02 	sts	0x02E8, r1
    1d16:	10 92 e9 02 	sts	0x02E9, r1
                    psw_on = 1;
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	80 93 46 02 	sts	0x0246, r24
                    setTimer(MSG_KILL_PSW, 0, 48000);
    1d20:	40 e8       	ldi	r20, 0x80	; 128
    1d22:	5b eb       	ldi	r21, 0xBB	; 187
    1d24:	60 e0       	ldi	r22, 0x00	; 0
    1d26:	8b e0       	ldi	r24, 0x0B	; 11
    1d28:	0e 94 bf 14 	call	0x297e	; 0x297e <setTimer>
    1d2c:	08 c0       	rjmp	.+16     	; 0x1d3e <Key_password+0x110>
                }
                else
                {
                    lcd_gotoxy(0,1);
    1d2e:	61 e0       	ldi	r22, 0x01	; 1
    1d30:	80 e0       	ldi	r24, 0x00	; 0
    1d32:	0e 94 23 08 	call	0x1046	; 0x1046 <lcd_gotoxy>
                    lcd_puts("\275e\263ep\275\303\271 \276apo\273\304");
    1d36:	81 e6       	ldi	r24, 0x61	; 97
    1d38:	91 e0       	ldi	r25, 0x01	; 1
    1d3a:	0e 94 55 08 	call	0x10aa	; 0x10aa <lcd_puts>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1d3e:	cf bf       	out	0x3f, r28	; 63
    __asm__ volatile ("" ::: "memory");
    1d40:	32 c0       	rjmp	.+100    	; 0x1da6 <Key_password+0x178>
                break;
            }
        }
	}

	if ( (par == KEY_LEFT) || (par == KEY_RIGHT) || (par == KEY_UP) || (par == KEY_DOWN) || (par == 0) )
    1d42:	85 30       	cpi	r24, 0x05	; 5
    1d44:	80 f5       	brcc	.+96     	; 0x1da6 <Key_password+0x178>
    {
        lcd_gotoxy(0,1);
    1d46:	61 e0       	ldi	r22, 0x01	; 1
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	0e 94 23 08 	call	0x1046	; 0x1046 <lcd_gotoxy>
        sprintf(lcd_buffer, "      %d%d%d%d      ", menu_psw_digit[0], menu_psw_digit[1], menu_psw_digit[2], menu_psw_digit[3]);
    1d4e:	80 91 e9 02 	lds	r24, 0x02E9
    1d52:	1f 92       	push	r1
    1d54:	8f 93       	push	r24
    1d56:	80 91 e8 02 	lds	r24, 0x02E8
    1d5a:	1f 92       	push	r1
    1d5c:	8f 93       	push	r24
    1d5e:	80 91 e7 02 	lds	r24, 0x02E7
    1d62:	1f 92       	push	r1
    1d64:	8f 93       	push	r24
    1d66:	80 91 e6 02 	lds	r24, 0x02E6
    1d6a:	1f 92       	push	r1
    1d6c:	8f 93       	push	r24
    1d6e:	81 e7       	ldi	r24, 0x71	; 113
    1d70:	91 e0       	ldi	r25, 0x01	; 1
    1d72:	9f 93       	push	r25
    1d74:	8f 93       	push	r24
    1d76:	85 ea       	ldi	r24, 0xA5	; 165
    1d78:	92 e0       	ldi	r25, 0x02	; 2
    1d7a:	9f 93       	push	r25
    1d7c:	8f 93       	push	r24
    1d7e:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <sprintf>
        lcd_puts(lcd_buffer);
    1d82:	85 ea       	ldi	r24, 0xA5	; 165
    1d84:	92 e0       	ldi	r25, 0x02	; 2
    1d86:	0e 94 55 08 	call	0x10aa	; 0x10aa <lcd_puts>

        lcd_gotoxy(menu_x+6,1);
    1d8a:	80 91 4c 02 	lds	r24, 0x024C
    1d8e:	61 e0       	ldi	r22, 0x01	; 1
    1d90:	8a 5f       	subi	r24, 0xFA	; 250
    1d92:	0e 94 23 08 	call	0x1046	; 0x1046 <lcd_gotoxy>
    1d96:	8d b7       	in	r24, 0x3d	; 61
    1d98:	9e b7       	in	r25, 0x3e	; 62
    1d9a:	0c 96       	adiw	r24, 0x0c	; 12
    1d9c:	0f b6       	in	r0, 0x3f	; 63
    1d9e:	f8 94       	cli
    1da0:	9e bf       	out	0x3e, r25	; 62
    1da2:	0f be       	out	0x3f, r0	; 63
    1da4:	8d bf       	out	0x3d, r24	; 61
	}

	return 1;
}
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	cf 91       	pop	r28
    1daa:	08 95       	ret

00001dac <Key_time>:



uint8_t Key_time(msg_par par)
{
	switch (par)
    1dac:	83 30       	cpi	r24, 0x03	; 3
    1dae:	29 f1       	breq	.+74     	; 0x1dfa <Key_time+0x4e>
    1db0:	30 f4       	brcc	.+12     	; 0x1dbe <Key_time+0x12>
    1db2:	81 30       	cpi	r24, 0x01	; 1
    1db4:	09 f4       	brne	.+2      	; 0x1db8 <Key_time+0xc>
    1db6:	6b c0       	rjmp	.+214    	; 0x1e8e <Key_time+0xe2>
    1db8:	82 30       	cpi	r24, 0x02	; 2
    1dba:	61 f1       	breq	.+88     	; 0x1e14 <Key_time+0x68>
    1dbc:	a8 c0       	rjmp	.+336    	; 0x1f0e <Key_time+0x162>
    1dbe:	84 30       	cpi	r24, 0x04	; 4
    1dc0:	b1 f0       	breq	.+44     	; 0x1dee <Key_time+0x42>
    1dc2:	85 30       	cpi	r24, 0x05	; 5
    1dc4:	09 f0       	breq	.+2      	; 0x1dc8 <Key_time+0x1c>
    1dc6:	a3 c0       	rjmp	.+326    	; 0x1f0e <Key_time+0x162>
            break;
        }

        case KEY_OK:
        {
            time[0] = time[3] = 0x00;
    1dc8:	10 92 d6 02 	sts	0x02D6, r1
    1dcc:	10 92 d3 02 	sts	0x02D3, r1
            ds_set_time(time);
    1dd0:	83 ed       	ldi	r24, 0xD3	; 211
    1dd2:	92 e0       	ldi	r25, 0x02	; 2
    1dd4:	0e 94 9d 05 	call	0xb3a	; 0xb3a <ds_set_time>

            lcd_init(LCD_DISP_ON);
    1dd8:	8c e0       	ldi	r24, 0x0C	; 12
    1dda:	0e 94 83 08 	call	0x1106	; 0x1106 <lcd_init>
            killHandler(MSG_KEY_PRESS, &Key_time);
    1dde:	66 ed       	ldi	r22, 0xD6	; 214
    1de0:	7e e0       	ldi	r23, 0x0E	; 14
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	0e 94 9c 13 	call	0x2738	; 0x2738 <killHandler>
            startMenu();
    1de8:	0e 94 c6 0c 	call	0x198c	; 0x198c <startMenu>
            break;
    1dec:	c5 c0       	rjmp	.+394    	; 0x1f78 <Key_time+0x1cc>
uint8_t Key_time(msg_par par)
{
	switch (par)
	{
        case KEY_LEFT : {
            if (menu_x>0)    menu_x -= 3;
    1dee:	80 91 4c 02 	lds	r24, 0x024C
    1df2:	88 23       	and	r24, r24
    1df4:	49 f0       	breq	.+18     	; 0x1e08 <Key_time+0x5c>
    1df6:	83 50       	subi	r24, 0x03	; 3
    1df8:	05 c0       	rjmp	.+10     	; 0x1e04 <Key_time+0x58>
            lcd_gotoxy(menu_x,1);
            break;
        }

        case KEY_RIGHT : {
            if (menu_x<12)    menu_x += 3;
    1dfa:	80 91 4c 02 	lds	r24, 0x024C
    1dfe:	8c 30       	cpi	r24, 0x0C	; 12
    1e00:	18 f4       	brcc	.+6      	; 0x1e08 <Key_time+0x5c>
    1e02:	8d 5f       	subi	r24, 0xFD	; 253
    1e04:	80 93 4c 02 	sts	0x024C, r24
            lcd_gotoxy(menu_x,1);
    1e08:	61 e0       	ldi	r22, 0x01	; 1
    1e0a:	80 91 4c 02 	lds	r24, 0x024C
    1e0e:	0e 94 23 08 	call	0x1046	; 0x1046 <lcd_gotoxy>
            break;
    1e12:	b2 c0       	rjmp	.+356    	; 0x1f78 <Key_time+0x1cc>
        }

        case KEY_DOWN : {
            switch (menu_x)
    1e14:	80 91 4c 02 	lds	r24, 0x024C
    1e18:	86 30       	cpi	r24, 0x06	; 6
    1e1a:	f9 f0       	breq	.+62     	; 0x1e5a <Key_time+0xae>
    1e1c:	28 f4       	brcc	.+10     	; 0x1e28 <Key_time+0x7c>
    1e1e:	88 23       	and	r24, r24
    1e20:	41 f0       	breq	.+16     	; 0x1e32 <Key_time+0x86>
    1e22:	83 30       	cpi	r24, 0x03	; 3
    1e24:	81 f0       	breq	.+32     	; 0x1e46 <Key_time+0x9a>
    1e26:	75 c0       	rjmp	.+234    	; 0x1f12 <Key_time+0x166>
    1e28:	89 30       	cpi	r24, 0x09	; 9
    1e2a:	09 f1       	breq	.+66     	; 0x1e6e <Key_time+0xc2>
    1e2c:	8c 30       	cpi	r24, 0x0C	; 12
    1e2e:	39 f1       	breq	.+78     	; 0x1e7e <Key_time+0xd2>
    1e30:	70 c0       	rjmp	.+224    	; 0x1f12 <Key_time+0x166>
            {
                case 0:
                    if (time[4]>0)  --time[4];
    1e32:	80 91 d7 02 	lds	r24, 0x02D7
    1e36:	88 23       	and	r24, r24
    1e38:	11 f0       	breq	.+4      	; 0x1e3e <Key_time+0x92>
    1e3a:	81 50       	subi	r24, 0x01	; 1
    1e3c:	01 c0       	rjmp	.+2      	; 0x1e40 <Key_time+0x94>
                    else            time[4] = 31;
    1e3e:	8f e1       	ldi	r24, 0x1F	; 31
    1e40:	80 93 d7 02 	sts	0x02D7, r24
    1e44:	66 c0       	rjmp	.+204    	; 0x1f12 <Key_time+0x166>
                    break;
                case 3:
                    if (time[5]>0)  --time[5];
    1e46:	80 91 d8 02 	lds	r24, 0x02D8
    1e4a:	88 23       	and	r24, r24
    1e4c:	11 f0       	breq	.+4      	; 0x1e52 <Key_time+0xa6>
    1e4e:	81 50       	subi	r24, 0x01	; 1
    1e50:	01 c0       	rjmp	.+2      	; 0x1e54 <Key_time+0xa8>
                    else            time[5] = 12;
    1e52:	8c e0       	ldi	r24, 0x0C	; 12
    1e54:	80 93 d8 02 	sts	0x02D8, r24
    1e58:	5c c0       	rjmp	.+184    	; 0x1f12 <Key_time+0x166>
                    break;
                case 6:
                    if (time[6]>0)  --time[6];
    1e5a:	80 91 d9 02 	lds	r24, 0x02D9
    1e5e:	88 23       	and	r24, r24
    1e60:	11 f0       	breq	.+4      	; 0x1e66 <Key_time+0xba>
    1e62:	81 50       	subi	r24, 0x01	; 1
    1e64:	01 c0       	rjmp	.+2      	; 0x1e68 <Key_time+0xbc>
                    else            time[6] = 99;
    1e66:	83 e6       	ldi	r24, 0x63	; 99
    1e68:	80 93 d9 02 	sts	0x02D9, r24
    1e6c:	52 c0       	rjmp	.+164    	; 0x1f12 <Key_time+0x166>
                    break;
                case 9:
                    if (time[2]>0)    --time[2];
    1e6e:	80 91 d5 02 	lds	r24, 0x02D5
    1e72:	88 23       	and	r24, r24
    1e74:	11 f0       	breq	.+4      	; 0x1e7a <Key_time+0xce>
    1e76:	81 50       	subi	r24, 0x01	; 1
    1e78:	39 c0       	rjmp	.+114    	; 0x1eec <Key_time+0x140>
                    else              time[2] = 23;
    1e7a:	87 e1       	ldi	r24, 0x17	; 23
    1e7c:	37 c0       	rjmp	.+110    	; 0x1eec <Key_time+0x140>
                    break;
                case 12:
                    if (time[1]>0)    --time[1];
    1e7e:	80 91 d4 02 	lds	r24, 0x02D4
    1e82:	88 23       	and	r24, r24
    1e84:	11 f0       	breq	.+4      	; 0x1e8a <Key_time+0xde>
    1e86:	81 50       	subi	r24, 0x01	; 1
    1e88:	3c c0       	rjmp	.+120    	; 0x1f02 <Key_time+0x156>
                    else              time[1] = 59;
    1e8a:	8b e3       	ldi	r24, 0x3B	; 59
    1e8c:	3a c0       	rjmp	.+116    	; 0x1f02 <Key_time+0x156>
            }
            break;
        }

        case KEY_UP : {
            switch (menu_x)
    1e8e:	80 91 4c 02 	lds	r24, 0x024C
    1e92:	86 30       	cpi	r24, 0x06	; 6
    1e94:	e9 f0       	breq	.+58     	; 0x1ed0 <Key_time+0x124>
    1e96:	28 f4       	brcc	.+10     	; 0x1ea2 <Key_time+0xf6>
    1e98:	88 23       	and	r24, r24
    1e9a:	41 f0       	breq	.+16     	; 0x1eac <Key_time+0x100>
    1e9c:	83 30       	cpi	r24, 0x03	; 3
    1e9e:	79 f0       	breq	.+30     	; 0x1ebe <Key_time+0x112>
    1ea0:	38 c0       	rjmp	.+112    	; 0x1f12 <Key_time+0x166>
    1ea2:	89 30       	cpi	r24, 0x09	; 9
    1ea4:	f1 f0       	breq	.+60     	; 0x1ee2 <Key_time+0x136>
    1ea6:	8c 30       	cpi	r24, 0x0C	; 12
    1ea8:	39 f1       	breq	.+78     	; 0x1ef8 <Key_time+0x14c>
    1eaa:	33 c0       	rjmp	.+102    	; 0x1f12 <Key_time+0x166>
            {
                case 0:
                    if (time[4]<31)  ++time[4];
    1eac:	80 91 d7 02 	lds	r24, 0x02D7
    1eb0:	8f 31       	cpi	r24, 0x1F	; 31
    1eb2:	10 f4       	brcc	.+4      	; 0x1eb8 <Key_time+0x10c>
    1eb4:	8f 5f       	subi	r24, 0xFF	; 255
    1eb6:	c4 cf       	rjmp	.-120    	; 0x1e40 <Key_time+0x94>
                    else             time[4] = 0;
    1eb8:	10 92 d7 02 	sts	0x02D7, r1
    1ebc:	2a c0       	rjmp	.+84     	; 0x1f12 <Key_time+0x166>
                    break;
                case 3:
                    if (time[5]<12)  ++time[5];
    1ebe:	80 91 d8 02 	lds	r24, 0x02D8
    1ec2:	8c 30       	cpi	r24, 0x0C	; 12
    1ec4:	10 f4       	brcc	.+4      	; 0x1eca <Key_time+0x11e>
    1ec6:	8f 5f       	subi	r24, 0xFF	; 255
    1ec8:	c5 cf       	rjmp	.-118    	; 0x1e54 <Key_time+0xa8>
                    else             time[5] = 0;
    1eca:	10 92 d8 02 	sts	0x02D8, r1
    1ece:	21 c0       	rjmp	.+66     	; 0x1f12 <Key_time+0x166>
                    break;
                case 6:
                    if (time[6]<99)  ++time[6];
    1ed0:	80 91 d9 02 	lds	r24, 0x02D9
    1ed4:	83 36       	cpi	r24, 0x63	; 99
    1ed6:	10 f4       	brcc	.+4      	; 0x1edc <Key_time+0x130>
    1ed8:	8f 5f       	subi	r24, 0xFF	; 255
    1eda:	c6 cf       	rjmp	.-116    	; 0x1e68 <Key_time+0xbc>
                    else             time[6] = 0;
    1edc:	10 92 d9 02 	sts	0x02D9, r1
    1ee0:	18 c0       	rjmp	.+48     	; 0x1f12 <Key_time+0x166>
                    break;
                case 9:
                    if (time[2]<23)  ++time[2];
    1ee2:	80 91 d5 02 	lds	r24, 0x02D5
    1ee6:	87 31       	cpi	r24, 0x17	; 23
    1ee8:	20 f4       	brcc	.+8      	; 0x1ef2 <Key_time+0x146>
    1eea:	8f 5f       	subi	r24, 0xFF	; 255
    1eec:	80 93 d5 02 	sts	0x02D5, r24
    1ef0:	10 c0       	rjmp	.+32     	; 0x1f12 <Key_time+0x166>
                    else             time[2] = 0;
    1ef2:	10 92 d5 02 	sts	0x02D5, r1
    1ef6:	0d c0       	rjmp	.+26     	; 0x1f12 <Key_time+0x166>
                    break;
                case 12:
                    if (time[1]<59)  ++time[1];
    1ef8:	80 91 d4 02 	lds	r24, 0x02D4
    1efc:	8b 33       	cpi	r24, 0x3B	; 59
    1efe:	20 f4       	brcc	.+8      	; 0x1f08 <Key_time+0x15c>
    1f00:	8f 5f       	subi	r24, 0xFF	; 255
    1f02:	80 93 d4 02 	sts	0x02D4, r24
    1f06:	05 c0       	rjmp	.+10     	; 0x1f12 <Key_time+0x166>
                    else             time[1] = 0;
    1f08:	10 92 d4 02 	sts	0x02D4, r1
    1f0c:	02 c0       	rjmp	.+4      	; 0x1f12 <Key_time+0x166>
            startMenu();
            break;
        }
	}

    if ( (par == KEY_UP) | (par == KEY_DOWN) | (par == 0) )
    1f0e:	83 30       	cpi	r24, 0x03	; 3
    1f10:	98 f5       	brcc	.+102    	; 0x1f78 <Key_time+0x1cc>
    {
        sprintf(lcd_buffer, "%02d.%02d.%02d %02d:%02d", time[4], time[5], time[6], time[2], time[1]);
    1f12:	80 91 d4 02 	lds	r24, 0x02D4
    1f16:	1f 92       	push	r1
    1f18:	8f 93       	push	r24
    1f1a:	80 91 d5 02 	lds	r24, 0x02D5
    1f1e:	1f 92       	push	r1
    1f20:	8f 93       	push	r24
    1f22:	80 91 d9 02 	lds	r24, 0x02D9
    1f26:	1f 92       	push	r1
    1f28:	8f 93       	push	r24
    1f2a:	80 91 d8 02 	lds	r24, 0x02D8
    1f2e:	1f 92       	push	r1
    1f30:	8f 93       	push	r24
    1f32:	80 91 d7 02 	lds	r24, 0x02D7
    1f36:	1f 92       	push	r1
    1f38:	8f 93       	push	r24
    1f3a:	86 e8       	ldi	r24, 0x86	; 134
    1f3c:	91 e0       	ldi	r25, 0x01	; 1
    1f3e:	9f 93       	push	r25
    1f40:	8f 93       	push	r24
    1f42:	85 ea       	ldi	r24, 0xA5	; 165
    1f44:	92 e0       	ldi	r25, 0x02	; 2
    1f46:	9f 93       	push	r25
    1f48:	8f 93       	push	r24
    1f4a:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <sprintf>
        lcd_gotoxy(0,1);
    1f4e:	61 e0       	ldi	r22, 0x01	; 1
    1f50:	80 e0       	ldi	r24, 0x00	; 0
    1f52:	0e 94 23 08 	call	0x1046	; 0x1046 <lcd_gotoxy>
        lcd_puts(lcd_buffer);
    1f56:	85 ea       	ldi	r24, 0xA5	; 165
    1f58:	92 e0       	ldi	r25, 0x02	; 2
    1f5a:	0e 94 55 08 	call	0x10aa	; 0x10aa <lcd_puts>
        lcd_gotoxy(menu_x,1);
    1f5e:	61 e0       	ldi	r22, 0x01	; 1
    1f60:	80 91 4c 02 	lds	r24, 0x024C
    1f64:	0e 94 23 08 	call	0x1046	; 0x1046 <lcd_gotoxy>
    1f68:	8d b7       	in	r24, 0x3d	; 61
    1f6a:	9e b7       	in	r25, 0x3e	; 62
    1f6c:	0e 96       	adiw	r24, 0x0e	; 14
    1f6e:	0f b6       	in	r0, 0x3f	; 63
    1f70:	f8 94       	cli
    1f72:	9e bf       	out	0x3e, r25	; 62
    1f74:	0f be       	out	0x3f, r0	; 63
    1f76:	8d bf       	out	0x3d, r24	; 61
    }

	return (1);
}
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	08 95       	ret

00001f7c <Key_snd>:



uint8_t Key_snd(msg_par par)
{
	switch (par)
    1f7c:	83 30       	cpi	r24, 0x03	; 3
    1f7e:	61 f0       	breq	.+24     	; 0x1f98 <Key_snd+0x1c>
    1f80:	28 f4       	brcc	.+10     	; 0x1f8c <Key_snd+0x10>
    1f82:	81 30       	cpi	r24, 0x01	; 1
    1f84:	91 f1       	breq	.+100    	; 0x1fea <Key_snd+0x6e>
    1f86:	82 30       	cpi	r24, 0x02	; 2
    1f88:	91 f0       	breq	.+36     	; 0x1fae <Key_snd+0x32>
    1f8a:	7b c0       	rjmp	.+246    	; 0x2082 <Key_snd+0x106>
    1f8c:	84 30       	cpi	r24, 0x04	; 4
    1f8e:	21 f0       	breq	.+8      	; 0x1f98 <Key_snd+0x1c>
    1f90:	85 30       	cpi	r24, 0x05	; 5
    1f92:	09 f4       	brne	.+2      	; 0x1f96 <Key_snd+0x1a>
    1f94:	50 c0       	rjmp	.+160    	; 0x2036 <Key_snd+0xba>
    1f96:	75 c0       	rjmp	.+234    	; 0x2082 <Key_snd+0x106>
	{
        case KEY_LEFT : {
            if (menu_x)    menu_x = 0;
    1f98:	90 91 4c 02 	lds	r25, 0x024C
    1f9c:	99 23       	and	r25, r25
    1f9e:	19 f0       	breq	.+6      	; 0x1fa6 <Key_snd+0x2a>
    1fa0:	10 92 4c 02 	sts	0x024C, r1
    1fa4:	6e c0       	rjmp	.+220    	; 0x2082 <Key_snd+0x106>
            else           menu_x = 1;
    1fa6:	91 e0       	ldi	r25, 0x01	; 1
    1fa8:	90 93 4c 02 	sts	0x024C, r25
    1fac:	6a c0       	rjmp	.+212    	; 0x2082 <Key_snd+0x106>
            else           menu_x = 1;
            break;
        }

        case KEY_DOWN : {
            switch (menu_x)
    1fae:	80 91 4c 02 	lds	r24, 0x024C
    1fb2:	88 23       	and	r24, r24
    1fb4:	19 f0       	breq	.+6      	; 0x1fbc <Key_snd+0x40>
    1fb6:	81 30       	cpi	r24, 0x01	; 1
    1fb8:	39 f0       	breq	.+14     	; 0x1fc8 <Key_snd+0x4c>
    1fba:	66 c0       	rjmp	.+204    	; 0x2088 <Key_snd+0x10c>
            {
                case 0:
                    if (snd_on)    snd_on = 0;
    1fbc:	80 91 a1 02 	lds	r24, 0x02A1
    1fc0:	81 11       	cpse	r24, r1
    1fc2:	1e c0       	rjmp	.+60     	; 0x2000 <Key_snd+0x84>
                    else           snd_on = 1;
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	1f c0       	rjmp	.+62     	; 0x2006 <Key_snd+0x8a>
                    break;
                case 1:
                    if (snd_duration>160)  snd_duration -= 160;
    1fc8:	80 91 a2 02 	lds	r24, 0x02A2
    1fcc:	90 91 a3 02 	lds	r25, 0x02A3
    1fd0:	81 3a       	cpi	r24, 0xA1	; 161
    1fd2:	91 05       	cpc	r25, r1
    1fd4:	38 f0       	brcs	.+14     	; 0x1fe4 <Key_snd+0x68>
    1fd6:	80 91 a2 02 	lds	r24, 0x02A2
    1fda:	90 91 a3 02 	lds	r25, 0x02A3
    1fde:	80 5a       	subi	r24, 0xA0	; 160
    1fe0:	91 09       	sbc	r25, r1
    1fe2:	24 c0       	rjmp	.+72     	; 0x202c <Key_snd+0xb0>
                    else                 snd_duration = 1600;
    1fe4:	80 e4       	ldi	r24, 0x40	; 64
    1fe6:	96 e0       	ldi	r25, 0x06	; 6
    1fe8:	21 c0       	rjmp	.+66     	; 0x202c <Key_snd+0xb0>
            }
            break;
        }

        case KEY_UP : {
            switch (menu_x)
    1fea:	90 91 4c 02 	lds	r25, 0x024C
    1fee:	99 23       	and	r25, r25
    1ff0:	19 f0       	breq	.+6      	; 0x1ff8 <Key_snd+0x7c>
    1ff2:	91 30       	cpi	r25, 0x01	; 1
    1ff4:	59 f0       	breq	.+22     	; 0x200c <Key_snd+0x90>
    1ff6:	48 c0       	rjmp	.+144    	; 0x2088 <Key_snd+0x10c>
            {
                case 0:
                    if (snd_on)    snd_on = 0;
    1ff8:	90 91 a1 02 	lds	r25, 0x02A1
    1ffc:	99 23       	and	r25, r25
    1ffe:	19 f0       	breq	.+6      	; 0x2006 <Key_snd+0x8a>
    2000:	10 92 a1 02 	sts	0x02A1, r1
    2004:	41 c0       	rjmp	.+130    	; 0x2088 <Key_snd+0x10c>
                    else           snd_on = 1;
    2006:	80 93 a1 02 	sts	0x02A1, r24
    200a:	3e c0       	rjmp	.+124    	; 0x2088 <Key_snd+0x10c>
                    break;
                case 1:
                    if (snd_duration<1600)  snd_duration += 160;
    200c:	80 91 a2 02 	lds	r24, 0x02A2
    2010:	90 91 a3 02 	lds	r25, 0x02A3
    2014:	80 34       	cpi	r24, 0x40	; 64
    2016:	96 40       	sbci	r25, 0x06	; 6
    2018:	38 f4       	brcc	.+14     	; 0x2028 <Key_snd+0xac>
    201a:	80 91 a2 02 	lds	r24, 0x02A2
    201e:	90 91 a3 02 	lds	r25, 0x02A3
    2022:	80 56       	subi	r24, 0x60	; 96
    2024:	9f 4f       	sbci	r25, 0xFF	; 255
    2026:	02 c0       	rjmp	.+4      	; 0x202c <Key_snd+0xb0>
                    else                     snd_duration = 160;
    2028:	80 ea       	ldi	r24, 0xA0	; 160
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	90 93 a3 02 	sts	0x02A3, r25
    2030:	80 93 a2 02 	sts	0x02A2, r24
    2034:	29 c0       	rjmp	.+82     	; 0x2088 <Key_snd+0x10c>
            break;
        }

        case KEY_OK:
        {
            ds_write_byte(SND_ON_POINTER, snd_on);
    2036:	60 91 a1 02 	lds	r22, 0x02A1
    203a:	89 e0       	ldi	r24, 0x09	; 9
    203c:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <ds_write_byte>
            ds_write_byte(SND_DURATION_HPOINTER, (uint8_t)(snd_duration>>8));
    2040:	80 91 a2 02 	lds	r24, 0x02A2
    2044:	90 91 a3 02 	lds	r25, 0x02A3
    2048:	69 2f       	mov	r22, r25
    204a:	8a e0       	ldi	r24, 0x0A	; 10
    204c:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <ds_write_byte>
            ds_write_byte(SND_DURATION_LPOINTER, (uint8_t)snd_duration);
    2050:	60 91 a2 02 	lds	r22, 0x02A2
    2054:	70 91 a3 02 	lds	r23, 0x02A3
    2058:	8b e0       	ldi	r24, 0x0B	; 11
    205a:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <ds_write_byte>

            if(!snd_on) killTimer(MSG_BEEP_REP);
    205e:	80 91 a1 02 	lds	r24, 0x02A1
    2062:	81 11       	cpse	r24, r1
    2064:	03 c0       	rjmp	.+6      	; 0x206c <Key_snd+0xf0>
    2066:	8a e0       	ldi	r24, 0x0A	; 10
    2068:	0e 94 fd 14 	call	0x29fa	; 0x29fa <killTimer>

            lcd_init(LCD_DISP_ON);
    206c:	8c e0       	ldi	r24, 0x0C	; 12
    206e:	0e 94 83 08 	call	0x1106	; 0x1106 <lcd_init>
            killHandler(MSG_KEY_PRESS, &Key_snd);
    2072:	6e eb       	ldi	r22, 0xBE	; 190
    2074:	7f e0       	ldi	r23, 0x0F	; 15
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	0e 94 9c 13 	call	0x2738	; 0x2738 <killHandler>
            startMenu();
    207c:	0e 94 c6 0c 	call	0x198c	; 0x198c <startMenu>
    2080:	47 c0       	rjmp	.+142    	; 0x2110 <Key_snd+0x194>
            break;
        }
	}

    if ( (par == KEY_UP) | (par == KEY_DOWN) | (par == 0) )
    2082:	83 30       	cpi	r24, 0x03	; 3
    2084:	08 f0       	brcs	.+2      	; 0x2088 <Key_snd+0x10c>
    2086:	44 c0       	rjmp	.+136    	; 0x2110 <Key_snd+0x194>
    {
        lcd_gotoxy(7,0);
    2088:	60 e0       	ldi	r22, 0x00	; 0
    208a:	87 e0       	ldi	r24, 0x07	; 7
    208c:	0e 94 23 08 	call	0x1046	; 0x1046 <lcd_gotoxy>
        if (snd_on) lcd_puts("\263\272\273\306\300e\275 ");
    2090:	80 91 a1 02 	lds	r24, 0x02A1
    2094:	88 23       	and	r24, r24
    2096:	19 f0       	breq	.+6      	; 0x209e <Key_snd+0x122>
    2098:	8f e9       	ldi	r24, 0x9F	; 159
    209a:	91 e0       	ldi	r25, 0x01	; 1
    209c:	02 c0       	rjmp	.+4      	; 0x20a2 <Key_snd+0x126>
        else        lcd_puts("\263\303\272\273\306\300e\275");
    209e:	88 ea       	ldi	r24, 0xA8	; 168
    20a0:	91 e0       	ldi	r25, 0x01	; 1
    20a2:	0e 94 55 08 	call	0x10aa	; 0x10aa <lcd_puts>
        lcd_gotoxy(7,1);
    20a6:	61 e0       	ldi	r22, 0x01	; 1
    20a8:	87 e0       	ldi	r24, 0x07	; 7
    20aa:	0e 94 23 08 	call	0x1046	; 0x1046 <lcd_gotoxy>
        if (snd_duration == 1600)   sprintf(lcd_buffer, "1.0");
    20ae:	80 91 a2 02 	lds	r24, 0x02A2
    20b2:	90 91 a3 02 	lds	r25, 0x02A3
    20b6:	80 34       	cpi	r24, 0x40	; 64
    20b8:	96 40       	sbci	r25, 0x06	; 6
    20ba:	39 f4       	brne	.+14     	; 0x20ca <Key_snd+0x14e>
    20bc:	61 eb       	ldi	r22, 0xB1	; 177
    20be:	71 e0       	ldi	r23, 0x01	; 1
    20c0:	85 ea       	ldi	r24, 0xA5	; 165
    20c2:	92 e0       	ldi	r25, 0x02	; 2
    20c4:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <strcpy>
    20c8:	1a c0       	rjmp	.+52     	; 0x20fe <Key_snd+0x182>
        else                        sprintf(lcd_buffer, "0.%01d", snd_duration/160);
    20ca:	80 91 a2 02 	lds	r24, 0x02A2
    20ce:	90 91 a3 02 	lds	r25, 0x02A3
    20d2:	60 ea       	ldi	r22, 0xA0	; 160
    20d4:	70 e0       	ldi	r23, 0x00	; 0
    20d6:	0e 94 5d 16 	call	0x2cba	; 0x2cba <__udivmodhi4>
    20da:	7f 93       	push	r23
    20dc:	6f 93       	push	r22
    20de:	85 eb       	ldi	r24, 0xB5	; 181
    20e0:	91 e0       	ldi	r25, 0x01	; 1
    20e2:	9f 93       	push	r25
    20e4:	8f 93       	push	r24
    20e6:	85 ea       	ldi	r24, 0xA5	; 165
    20e8:	92 e0       	ldi	r25, 0x02	; 2
    20ea:	9f 93       	push	r25
    20ec:	8f 93       	push	r24
    20ee:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <sprintf>
    20f2:	0f 90       	pop	r0
    20f4:	0f 90       	pop	r0
    20f6:	0f 90       	pop	r0
    20f8:	0f 90       	pop	r0
    20fa:	0f 90       	pop	r0
    20fc:	0f 90       	pop	r0
        lcd_puts(lcd_buffer);
    20fe:	85 ea       	ldi	r24, 0xA5	; 165
    2100:	92 e0       	ldi	r25, 0x02	; 2
    2102:	0e 94 55 08 	call	0x10aa	; 0x10aa <lcd_puts>

        lcd_gotoxy(8,menu_x);
    2106:	60 91 4c 02 	lds	r22, 0x024C
    210a:	88 e0       	ldi	r24, 0x08	; 8
    210c:	0e 94 23 08 	call	0x1046	; 0x1046 <lcd_gotoxy>
    }

	return (1);
}
    2110:	81 e0       	ldi	r24, 0x01	; 1
    2112:	08 95       	ret

00002114 <Key_id>:
	return 1;
}


uint8_t Key_id(msg_par par)
{
    2114:	cf 93       	push	r28
	switch (par)
    2116:	83 30       	cpi	r24, 0x03	; 3
    2118:	31 f1       	breq	.+76     	; 0x2166 <Key_id+0x52>
    211a:	30 f4       	brcc	.+12     	; 0x2128 <Key_id+0x14>
    211c:	81 30       	cpi	r24, 0x01	; 1
    211e:	09 f4       	brne	.+2      	; 0x2122 <Key_id+0xe>
    2120:	5c c0       	rjmp	.+184    	; 0x21da <Key_id+0xc6>
    2122:	82 30       	cpi	r24, 0x02	; 2
    2124:	49 f1       	breq	.+82     	; 0x2178 <Key_id+0x64>
    2126:	8e c0       	rjmp	.+284    	; 0x2244 <Key_id+0x130>
    2128:	84 30       	cpi	r24, 0x04	; 4
    212a:	99 f0       	breq	.+38     	; 0x2152 <Key_id+0x3e>
    212c:	85 30       	cpi	r24, 0x05	; 5
    212e:	09 f0       	breq	.+2      	; 0x2132 <Key_id+0x1e>
    2130:	89 c0       	rjmp	.+274    	; 0x2244 <Key_id+0x130>
            break;
        }

        case KEY_OK:
        {
            ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    2132:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2134:	f8 94       	cli
            {
                rfm12_channel(channel);
    2136:	80 91 bc 02 	lds	r24, 0x02BC
    213a:	0e 94 b4 0a 	call	0x1568	; 0x1568 <rfm12_channel>
                id_send = 0;
    213e:	10 92 48 02 	sts	0x0248, r1
                killHandler(MSG_KEY_PRESS, &Key_id);
    2142:	6a e8       	ldi	r22, 0x8A	; 138
    2144:	70 e1       	ldi	r23, 0x10	; 16
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	0e 94 9c 13 	call	0x2738	; 0x2738 <killHandler>
                startMenuNull();
    214c:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <startMenuNull>
    2150:	e3 c0       	rjmp	.+454    	; 0x2318 <Key_id+0x204>
{
	switch (par)
	{
        case KEY_LEFT :
        {
            if(menu_x > 0)  --menu_x;
    2152:	80 91 4c 02 	lds	r24, 0x024C
    2156:	88 23       	and	r24, r24
    2158:	11 f0       	breq	.+4      	; 0x215e <Key_id+0x4a>
    215a:	81 50       	subi	r24, 0x01	; 1
    215c:	01 c0       	rjmp	.+2      	; 0x2160 <Key_id+0x4c>
            else            menu_x = 3;
    215e:	83 e0       	ldi	r24, 0x03	; 3
    2160:	80 93 4c 02 	sts	0x024C, r24
    2164:	72 c0       	rjmp	.+228    	; 0x224a <Key_id+0x136>
            break;
        }
        case KEY_RIGHT :
        {
            if(menu_x < 3)  ++menu_x;
    2166:	80 91 4c 02 	lds	r24, 0x024C
    216a:	83 30       	cpi	r24, 0x03	; 3
    216c:	10 f4       	brcc	.+4      	; 0x2172 <Key_id+0x5e>
    216e:	8f 5f       	subi	r24, 0xFF	; 255
    2170:	f7 cf       	rjmp	.-18     	; 0x2160 <Key_id+0x4c>
            else            menu_x = 0;
    2172:	10 92 4c 02 	sts	0x024C, r1
    2176:	69 c0       	rjmp	.+210    	; 0x224a <Key_id+0x136>
            break;
        }

        case KEY_DOWN:
        {
            switch (menu_x)
    2178:	80 91 4c 02 	lds	r24, 0x024C
    217c:	81 30       	cpi	r24, 0x01	; 1
    217e:	a1 f0       	breq	.+40     	; 0x21a8 <Key_id+0x94>
    2180:	48 f0       	brcs	.+18     	; 0x2194 <Key_id+0x80>
    2182:	82 30       	cpi	r24, 0x02	; 2
    2184:	01 f1       	breq	.+64     	; 0x21c6 <Key_id+0xb2>
    2186:	83 30       	cpi	r24, 0x03	; 3
    2188:	09 f0       	breq	.+2      	; 0x218c <Key_id+0x78>
    218a:	5f c0       	rjmp	.+190    	; 0x224a <Key_id+0x136>
                    else                    send_channel = 14;
                    break;
                }
                case 3 :
                {
                    --id;
    218c:	80 91 61 00 	lds	r24, 0x0061
    2190:	81 50       	subi	r24, 0x01	; 1
    2192:	55 c0       	rjmp	.+170    	; 0x223e <Key_id+0x12a>
        {
            switch (menu_x)
            {
                case 0 :
                {
                    if(menu_channel > 1)    --menu_channel;
    2194:	80 91 63 00 	lds	r24, 0x0063
    2198:	82 30       	cpi	r24, 0x02	; 2
    219a:	10 f0       	brcs	.+4      	; 0x21a0 <Key_id+0x8c>
    219c:	81 50       	subi	r24, 0x01	; 1
    219e:	01 c0       	rjmp	.+2      	; 0x21a2 <Key_id+0x8e>
                    else                    menu_channel = 14;
    21a0:	8e e0       	ldi	r24, 0x0E	; 14
    21a2:	80 93 63 00 	sts	0x0063, r24
    21a6:	51 c0       	rjmp	.+162    	; 0x224a <Key_id+0x136>
                    break;
                }
                case 1 :
                {
                    if( (menu_id == 0) && (id_any == 0) )  id_any = 1;
    21a8:	90 91 60 00 	lds	r25, 0x0060
    21ac:	91 11       	cpse	r25, r1
    21ae:	07 c0       	rjmp	.+14     	; 0x21be <Key_id+0xaa>
    21b0:	90 91 47 02 	lds	r25, 0x0247
    21b4:	91 11       	cpse	r25, r1
    21b6:	03 c0       	rjmp	.+6      	; 0x21be <Key_id+0xaa>
    21b8:	80 93 47 02 	sts	0x0247, r24
    21bc:	46 c0       	rjmp	.+140    	; 0x224a <Key_id+0x136>
                    else {
                        --menu_id;
    21be:	80 91 60 00 	lds	r24, 0x0060
    21c2:	81 50       	subi	r24, 0x01	; 1
    21c4:	2d c0       	rjmp	.+90     	; 0x2220 <Key_id+0x10c>
                    }
                    break;
                }
                case 2 :
                {
                    if(send_channel > 1)    --send_channel;
    21c6:	80 91 62 00 	lds	r24, 0x0062
    21ca:	82 30       	cpi	r24, 0x02	; 2
    21cc:	20 f0       	brcs	.+8      	; 0x21d6 <Key_id+0xc2>
    21ce:	80 91 62 00 	lds	r24, 0x0062
    21d2:	81 50       	subi	r24, 0x01	; 1
    21d4:	31 c0       	rjmp	.+98     	; 0x2238 <Key_id+0x124>
                    else                    send_channel = 14;
    21d6:	8e e0       	ldi	r24, 0x0E	; 14
    21d8:	2f c0       	rjmp	.+94     	; 0x2238 <Key_id+0x124>
            break;
        }

        case KEY_UP:
        {
            switch (menu_x)
    21da:	90 91 4c 02 	lds	r25, 0x024C
    21de:	91 30       	cpi	r25, 0x01	; 1
    21e0:	89 f0       	breq	.+34     	; 0x2204 <Key_id+0xf0>
    21e2:	40 f0       	brcs	.+16     	; 0x21f4 <Key_id+0xe0>
    21e4:	92 30       	cpi	r25, 0x02	; 2
    21e6:	09 f1       	breq	.+66     	; 0x222a <Key_id+0x116>
    21e8:	93 30       	cpi	r25, 0x03	; 3
    21ea:	79 f5       	brne	.+94     	; 0x224a <Key_id+0x136>
                    else                    send_channel = 1;
                    break;
                }
                case 3 :
                {
                    ++id;
    21ec:	80 91 61 00 	lds	r24, 0x0061
    21f0:	8f 5f       	subi	r24, 0xFF	; 255
    21f2:	25 c0       	rjmp	.+74     	; 0x223e <Key_id+0x12a>
        {
            switch (menu_x)
            {
                case 0 :
                {
                    if(menu_channel < 14)    ++menu_channel;
    21f4:	90 91 63 00 	lds	r25, 0x0063
    21f8:	9e 30       	cpi	r25, 0x0E	; 14
    21fa:	98 f6       	brcc	.-90     	; 0x21a2 <Key_id+0x8e>
    21fc:	9f 5f       	subi	r25, 0xFF	; 255
    21fe:	90 93 63 00 	sts	0x0063, r25
    2202:	23 c0       	rjmp	.+70     	; 0x224a <Key_id+0x136>
                    else                    menu_channel = 1;
                    break;
                }
                case 1 :
                {
                    if ( (menu_id == 255) && (id_any == 0) )    id_any = 1;
    2204:	80 91 60 00 	lds	r24, 0x0060
    2208:	8f 3f       	cpi	r24, 0xFF	; 255
    220a:	39 f4       	brne	.+14     	; 0x221a <Key_id+0x106>
    220c:	80 91 47 02 	lds	r24, 0x0247
    2210:	81 11       	cpse	r24, r1
    2212:	03 c0       	rjmp	.+6      	; 0x221a <Key_id+0x106>
    2214:	90 93 47 02 	sts	0x0247, r25
    2218:	18 c0       	rjmp	.+48     	; 0x224a <Key_id+0x136>
                    else {
                        ++menu_id;
    221a:	80 91 60 00 	lds	r24, 0x0060
    221e:	8f 5f       	subi	r24, 0xFF	; 255
    2220:	80 93 60 00 	sts	0x0060, r24
                        id_any = 0;
    2224:	10 92 47 02 	sts	0x0247, r1
    2228:	10 c0       	rjmp	.+32     	; 0x224a <Key_id+0x136>
                    }
                    break;
                }
                case 2 :
                {
                    if(send_channel < 14)    ++send_channel;
    222a:	90 91 62 00 	lds	r25, 0x0062
    222e:	9e 30       	cpi	r25, 0x0E	; 14
    2230:	18 f4       	brcc	.+6      	; 0x2238 <Key_id+0x124>
    2232:	80 91 62 00 	lds	r24, 0x0062
    2236:	8f 5f       	subi	r24, 0xFF	; 255
                    else                    send_channel = 1;
    2238:	80 93 62 00 	sts	0x0062, r24
    223c:	06 c0       	rjmp	.+12     	; 0x224a <Key_id+0x136>
                    break;
                }
                case 3 :
                {
                    ++id;
    223e:	80 93 61 00 	sts	0x0061, r24
                    break;
    2242:	03 c0       	rjmp	.+6      	; 0x224a <Key_id+0x136>
                break;
            }
        }
	}

	if ( (par == KEY_LEFT) || (par == KEY_RIGHT) || (par == KEY_UP) || (par == KEY_DOWN) || (par == 0) )
    2244:	85 30       	cpi	r24, 0x05	; 5
    2246:	08 f0       	brcs	.+2      	; 0x224a <Key_id+0x136>
    2248:	68 c0       	rjmp	.+208    	; 0x231a <Key_id+0x206>
    {
        ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    224a:	cf b7       	in	r28, 0x3f	; 63
    224c:	f8 94       	cli
        {
            lcd_gotoxy(0,1);
    224e:	61 e0       	ldi	r22, 0x01	; 1
    2250:	80 e0       	ldi	r24, 0x00	; 0
    2252:	0e 94 23 08 	call	0x1046	; 0x1046 <lcd_gotoxy>
            if (id_any) sprintf(lcd_buffer, "%2d --- \377 %2d %3d ", menu_channel, send_channel, id);
    2256:	90 91 47 02 	lds	r25, 0x0247
    225a:	80 91 63 00 	lds	r24, 0x0063
    225e:	99 23       	and	r25, r25
    2260:	e9 f0       	breq	.+58     	; 0x229c <Key_id+0x188>
    2262:	20 91 61 00 	lds	r18, 0x0061
    2266:	90 91 62 00 	lds	r25, 0x0062
    226a:	1f 92       	push	r1
    226c:	2f 93       	push	r18
    226e:	1f 92       	push	r1
    2270:	9f 93       	push	r25
    2272:	1f 92       	push	r1
    2274:	8f 93       	push	r24
    2276:	8c eb       	ldi	r24, 0xBC	; 188
    2278:	91 e0       	ldi	r25, 0x01	; 1
    227a:	9f 93       	push	r25
    227c:	8f 93       	push	r24
    227e:	85 ea       	ldi	r24, 0xA5	; 165
    2280:	92 e0       	ldi	r25, 0x02	; 2
    2282:	9f 93       	push	r25
    2284:	8f 93       	push	r24
    2286:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <sprintf>
    228a:	8d b7       	in	r24, 0x3d	; 61
    228c:	9e b7       	in	r25, 0x3e	; 62
    228e:	0a 96       	adiw	r24, 0x0a	; 10
    2290:	0f b6       	in	r0, 0x3f	; 63
    2292:	f8 94       	cli
    2294:	9e bf       	out	0x3e, r25	; 62
    2296:	0f be       	out	0x3f, r0	; 63
    2298:	8d bf       	out	0x3d, r24	; 61
    229a:	20 c0       	rjmp	.+64     	; 0x22dc <Key_id+0x1c8>
            else        sprintf(lcd_buffer, "%2d %3d \377 %2d %3d ", menu_channel, menu_id, send_channel, id);
    229c:	30 91 61 00 	lds	r19, 0x0061
    22a0:	20 91 62 00 	lds	r18, 0x0062
    22a4:	90 91 60 00 	lds	r25, 0x0060
    22a8:	1f 92       	push	r1
    22aa:	3f 93       	push	r19
    22ac:	1f 92       	push	r1
    22ae:	2f 93       	push	r18
    22b0:	1f 92       	push	r1
    22b2:	9f 93       	push	r25
    22b4:	1f 92       	push	r1
    22b6:	8f 93       	push	r24
    22b8:	8f ec       	ldi	r24, 0xCF	; 207
    22ba:	91 e0       	ldi	r25, 0x01	; 1
    22bc:	9f 93       	push	r25
    22be:	8f 93       	push	r24
    22c0:	85 ea       	ldi	r24, 0xA5	; 165
    22c2:	92 e0       	ldi	r25, 0x02	; 2
    22c4:	9f 93       	push	r25
    22c6:	8f 93       	push	r24
    22c8:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <sprintf>
    22cc:	8d b7       	in	r24, 0x3d	; 61
    22ce:	9e b7       	in	r25, 0x3e	; 62
    22d0:	0c 96       	adiw	r24, 0x0c	; 12
    22d2:	0f b6       	in	r0, 0x3f	; 63
    22d4:	f8 94       	cli
    22d6:	9e bf       	out	0x3e, r25	; 62
    22d8:	0f be       	out	0x3f, r0	; 63
    22da:	8d bf       	out	0x3d, r24	; 61
            lcd_puts(lcd_buffer);
    22dc:	85 ea       	ldi	r24, 0xA5	; 165
    22de:	92 e0       	ldi	r25, 0x02	; 2
    22e0:	0e 94 55 08 	call	0x10aa	; 0x10aa <lcd_puts>
            switch (menu_x)
    22e4:	80 91 4c 02 	lds	r24, 0x024C
    22e8:	81 30       	cpi	r24, 0x01	; 1
    22ea:	59 f0       	breq	.+22     	; 0x2302 <Key_id+0x1ee>
    22ec:	38 f0       	brcs	.+14     	; 0x22fc <Key_id+0x1e8>
    22ee:	82 30       	cpi	r24, 0x02	; 2
    22f0:	59 f0       	breq	.+22     	; 0x2308 <Key_id+0x1f4>
    22f2:	83 30       	cpi	r24, 0x03	; 3
    22f4:	69 f4       	brne	.+26     	; 0x2310 <Key_id+0x1fc>
                    break;
                case 2 :
                    lcd_gotoxy(10,1);
                    break;
                case 3 :
                    lcd_gotoxy(13,1);
    22f6:	61 e0       	ldi	r22, 0x01	; 1
    22f8:	8d e0       	ldi	r24, 0x0D	; 13
    22fa:	08 c0       	rjmp	.+16     	; 0x230c <Key_id+0x1f8>
            else        sprintf(lcd_buffer, "%2d %3d \377 %2d %3d ", menu_channel, menu_id, send_channel, id);
            lcd_puts(lcd_buffer);
            switch (menu_x)
            {
                case 0 :
                    lcd_gotoxy(1,1);
    22fc:	61 e0       	ldi	r22, 0x01	; 1
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	05 c0       	rjmp	.+10     	; 0x230c <Key_id+0x1f8>
                    break;
                case 1 :
                    lcd_gotoxy(4,1);
    2302:	61 e0       	ldi	r22, 0x01	; 1
    2304:	84 e0       	ldi	r24, 0x04	; 4
    2306:	02 c0       	rjmp	.+4      	; 0x230c <Key_id+0x1f8>
                    break;
                case 2 :
                    lcd_gotoxy(10,1);
    2308:	61 e0       	ldi	r22, 0x01	; 1
    230a:	8a e0       	ldi	r24, 0x0A	; 10
                    break;
                case 3 :
                    lcd_gotoxy(13,1);
    230c:	0e 94 23 08 	call	0x1046	; 0x1046 <lcd_gotoxy>
                    break;
            }
            rfm12_channel(menu_channel);
    2310:	80 91 63 00 	lds	r24, 0x0063
    2314:	0e 94 b4 0a 	call	0x1568	; 0x1568 <rfm12_channel>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2318:	cf bf       	out	0x3f, r28	; 63
        }
	}

	return 1;
}
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	cf 91       	pop	r28
    231e:	08 95       	ret

00002320 <Key_ok>:



uint8_t Key_ok(msg_par par)
{
	if( par == KEY_OK )
    2320:	85 30       	cpi	r24, 0x05	; 5
    2322:	39 f4       	brne	.+14     	; 0x2332 <Key_ok+0x12>
	{
        killHandler(MSG_KEY_PRESS, &Key_ok);
    2324:	60 e9       	ldi	r22, 0x90	; 144
    2326:	71 e1       	ldi	r23, 0x11	; 17
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	0e 94 9c 13 	call	0x2738	; 0x2738 <killHandler>
        startMenu();
    232e:	0e 94 c6 0c 	call	0x198c	; 0x198c <startMenu>
	}
	return 1;
}
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	08 95       	ret

00002336 <Key_scall>:


uint8_t Key_scall(msg_par par)
{

	switch (par)
    2336:	82 30       	cpi	r24, 0x02	; 2
    2338:	21 f0       	breq	.+8      	; 0x2342 <Key_scall+0xc>
    233a:	85 30       	cpi	r24, 0x05	; 5
    233c:	69 f0       	breq	.+26     	; 0x2358 <Key_scall+0x22>
    233e:	81 30       	cpi	r24, 0x01	; 1
    2340:	e1 f4       	brne	.+56     	; 0x237a <Key_scall+0x44>
	{
        case KEY_DOWN:
        {
            if(nevent) nevent = 0;
    2342:	80 91 4b 02 	lds	r24, 0x024B
    2346:	88 23       	and	r24, r24
    2348:	19 f0       	breq	.+6      	; 0x2350 <Key_scall+0x1a>
    234a:	10 92 4b 02 	sts	0x024B, r1
    234e:	17 c0       	rjmp	.+46     	; 0x237e <Key_scall+0x48>
            else       nevent = 1;
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	80 93 4b 02 	sts	0x024B, r24
    2356:	13 c0       	rjmp	.+38     	; 0x237e <Key_scall+0x48>
            break;
        }

        case KEY_OK:
        {
            second_call = nevent;
    2358:	80 91 4b 02 	lds	r24, 0x024B
    235c:	80 93 bd 02 	sts	0x02BD, r24
            ds_write_byte(SECOND_CALL_POINTER, second_call);
    2360:	60 91 bd 02 	lds	r22, 0x02BD
    2364:	81 e1       	ldi	r24, 0x11	; 17
    2366:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <ds_write_byte>

            killHandler(MSG_KEY_PRESS, &Key_scall);
    236a:	6b e9       	ldi	r22, 0x9B	; 155
    236c:	71 e1       	ldi	r23, 0x11	; 17
    236e:	81 e0       	ldi	r24, 0x01	; 1
    2370:	0e 94 9c 13 	call	0x2738	; 0x2738 <killHandler>
            startMenu();
    2374:	0e 94 c6 0c 	call	0x198c	; 0x198c <startMenu>
    2378:	15 c0       	rjmp	.+42     	; 0x23a4 <Key_scall+0x6e>
            break;
        }
	}

	if ( (par == KEY_UP) || (par == KEY_DOWN) || (par == 0) )
    237a:	83 30       	cpi	r24, 0x03	; 3
    237c:	98 f4       	brcc	.+38     	; 0x23a4 <Key_scall+0x6e>
    {
        lcd_gotoxy(0,1);
    237e:	61 e0       	ldi	r22, 0x01	; 1
    2380:	80 e0       	ldi	r24, 0x00	; 0
    2382:	0e 94 23 08 	call	0x1046	; 0x1046 <lcd_gotoxy>
        if(nevent) lcd_puts("   \276p\270\275\270\274a\277\304    ");
    2386:	80 91 4b 02 	lds	r24, 0x024B
    238a:	88 23       	and	r24, r24
    238c:	19 f0       	breq	.+6      	; 0x2394 <Key_scall+0x5e>
    238e:	82 ee       	ldi	r24, 0xE2	; 226
    2390:	91 e0       	ldi	r25, 0x01	; 1
    2392:	02 c0       	rjmp	.+4      	; 0x2398 <Key_scall+0x62>
        else       lcd_puts("  \270\264\275op\270po\263a\277\304  ");
    2394:	83 ef       	ldi	r24, 0xF3	; 243
    2396:	91 e0       	ldi	r25, 0x01	; 1
    2398:	0e 94 55 08 	call	0x10aa	; 0x10aa <lcd_puts>
        lcd_gotoxy(8,1);
    239c:	61 e0       	ldi	r22, 0x01	; 1
    239e:	88 e0       	ldi	r24, 0x08	; 8
    23a0:	0e 94 23 08 	call	0x1046	; 0x1046 <lcd_gotoxy>
	}

	return 1;
}
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	08 95       	ret

000023a8 <Key_channel>:
}


uint8_t Key_channel(msg_par par)
{
	switch (par)
    23a8:	82 30       	cpi	r24, 0x02	; 2
    23aa:	29 f0       	breq	.+10     	; 0x23b6 <Key_channel+0xe>
    23ac:	85 30       	cpi	r24, 0x05	; 5
    23ae:	b9 f0       	breq	.+46     	; 0x23de <Key_channel+0x36>
    23b0:	81 30       	cpi	r24, 0x01	; 1
    23b2:	31 f5       	brne	.+76     	; 0x2400 <Key_channel+0x58>
    23b4:	0a c0       	rjmp	.+20     	; 0x23ca <Key_channel+0x22>
	{
        case KEY_DOWN:
        {
            if(channel > 1)  --channel;
    23b6:	80 91 bc 02 	lds	r24, 0x02BC
    23ba:	82 30       	cpi	r24, 0x02	; 2
    23bc:	20 f0       	brcs	.+8      	; 0x23c6 <Key_channel+0x1e>
    23be:	80 91 bc 02 	lds	r24, 0x02BC
    23c2:	81 50       	subi	r24, 0x01	; 1
    23c4:	09 c0       	rjmp	.+18     	; 0x23d8 <Key_channel+0x30>
            else             channel = 14;
    23c6:	8e e0       	ldi	r24, 0x0E	; 14
    23c8:	07 c0       	rjmp	.+14     	; 0x23d8 <Key_channel+0x30>
            break;
        }

        case KEY_UP:
        {
            if(channel < 14) ++channel;
    23ca:	90 91 bc 02 	lds	r25, 0x02BC
    23ce:	9e 30       	cpi	r25, 0x0E	; 14
    23d0:	18 f4       	brcc	.+6      	; 0x23d8 <Key_channel+0x30>
    23d2:	80 91 bc 02 	lds	r24, 0x02BC
    23d6:	8f 5f       	subi	r24, 0xFF	; 255
            else             channel = 1;
    23d8:	80 93 bc 02 	sts	0x02BC, r24
    23dc:	13 c0       	rjmp	.+38     	; 0x2404 <Key_channel+0x5c>
            break;
        }

        case KEY_OK:
        {
            ds_write_byte(CHANNEL_POINTER, channel);
    23de:	60 91 bc 02 	lds	r22, 0x02BC
    23e2:	8e e0       	ldi	r24, 0x0E	; 14
    23e4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <ds_write_byte>

            rfm12_channel(channel);
    23e8:	80 91 bc 02 	lds	r24, 0x02BC
    23ec:	0e 94 b4 0a 	call	0x1568	; 0x1568 <rfm12_channel>

            killHandler(MSG_KEY_PRESS, &Key_channel);
    23f0:	64 ed       	ldi	r22, 0xD4	; 212
    23f2:	71 e1       	ldi	r23, 0x11	; 17
    23f4:	81 e0       	ldi	r24, 0x01	; 1
    23f6:	0e 94 9c 13 	call	0x2738	; 0x2738 <killHandler>
            startMenu();
    23fa:	0e 94 c6 0c 	call	0x198c	; 0x198c <startMenu>
    23fe:	22 c0       	rjmp	.+68     	; 0x2444 <Key_channel+0x9c>
            break;
        }
	}

	if ( (par == KEY_UP) || (par == KEY_DOWN) || (par == 0) )
    2400:	83 30       	cpi	r24, 0x03	; 3
    2402:	00 f5       	brcc	.+64     	; 0x2444 <Key_channel+0x9c>
    {
        lcd_gotoxy(0,1);
    2404:	61 e0       	ldi	r22, 0x01	; 1
    2406:	80 e0       	ldi	r24, 0x00	; 0
    2408:	0e 94 23 08 	call	0x1046	; 0x1046 <lcd_gotoxy>
        sprintf(lcd_buffer, "Ka\275a\273: %2d", channel);    // Канал: channel
    240c:	80 91 bc 02 	lds	r24, 0x02BC
    2410:	1f 92       	push	r1
    2412:	8f 93       	push	r24
    2414:	84 e0       	ldi	r24, 0x04	; 4
    2416:	92 e0       	ldi	r25, 0x02	; 2
    2418:	9f 93       	push	r25
    241a:	8f 93       	push	r24
    241c:	85 ea       	ldi	r24, 0xA5	; 165
    241e:	92 e0       	ldi	r25, 0x02	; 2
    2420:	9f 93       	push	r25
    2422:	8f 93       	push	r24
    2424:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <sprintf>
        lcd_puts(lcd_buffer);
    2428:	85 ea       	ldi	r24, 0xA5	; 165
    242a:	92 e0       	ldi	r25, 0x02	; 2
    242c:	0e 94 55 08 	call	0x10aa	; 0x10aa <lcd_puts>
        lcd_gotoxy(8,1);
    2430:	61 e0       	ldi	r22, 0x01	; 1
    2432:	88 e0       	ldi	r24, 0x08	; 8
    2434:	0e 94 23 08 	call	0x1046	; 0x1046 <lcd_gotoxy>
    2438:	0f 90       	pop	r0
    243a:	0f 90       	pop	r0
    243c:	0f 90       	pop	r0
    243e:	0f 90       	pop	r0
    2440:	0f 90       	pop	r0
    2442:	0f 90       	pop	r0
	}
    return 1;
}
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	08 95       	ret

00002448 <Key_event>:
}



uint8_t Key_event(msg_par par)
{
    2448:	cf 93       	push	r28
	switch (par)
    244a:	82 30       	cpi	r24, 0x02	; 2
    244c:	29 f0       	breq	.+10     	; 0x2458 <Key_event+0x10>
    244e:	85 30       	cpi	r24, 0x05	; 5
    2450:	01 f1       	breq	.+64     	; 0x2492 <Key_event+0x4a>
    2452:	81 30       	cpi	r24, 0x01	; 1
    2454:	31 f5       	brne	.+76     	; 0x24a2 <Key_event+0x5a>
    2456:	15 c0       	rjmp	.+42     	; 0x2482 <Key_event+0x3a>
	{
        case KEY_DOWN :
        {
            if( nevent < ((seep_pointer>>3)-2) )
    2458:	40 91 4b 02 	lds	r20, 0x024B
    245c:	80 91 ba 02 	lds	r24, 0x02BA
    2460:	90 91 bb 02 	lds	r25, 0x02BB
    2464:	24 2f       	mov	r18, r20
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	63 e0       	ldi	r22, 0x03	; 3
    246a:	96 95       	lsr	r25
    246c:	87 95       	ror	r24
    246e:	6a 95       	dec	r22
    2470:	e1 f7       	brne	.-8      	; 0x246a <Key_event+0x22>
    2472:	02 97       	sbiw	r24, 0x02	; 2
    2474:	28 17       	cp	r18, r24
    2476:	39 07       	cpc	r19, r25
    2478:	b8 f4       	brcc	.+46     	; 0x24a8 <Key_event+0x60>
                ++nevent;
    247a:	4f 5f       	subi	r20, 0xFF	; 255
    247c:	40 93 4b 02 	sts	0x024B, r20
    2480:	13 c0       	rjmp	.+38     	; 0x24a8 <Key_event+0x60>
            break;
        }

        case KEY_UP :
        {
            if (nevent > 0)
    2482:	80 91 4b 02 	lds	r24, 0x024B
    2486:	88 23       	and	r24, r24
    2488:	79 f0       	breq	.+30     	; 0x24a8 <Key_event+0x60>
                --nevent;
    248a:	81 50       	subi	r24, 0x01	; 1
    248c:	80 93 4b 02 	sts	0x024B, r24
    2490:	0b c0       	rjmp	.+22     	; 0x24a8 <Key_event+0x60>
            break;
        }

        case KEY_OK:
        {
            killHandler(MSG_KEY_PRESS, &Key_event);
    2492:	64 e2       	ldi	r22, 0x24	; 36
    2494:	72 e1       	ldi	r23, 0x12	; 18
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	0e 94 9c 13 	call	0x2738	; 0x2738 <killHandler>
            startMenu();
    249c:	0e 94 c6 0c 	call	0x198c	; 0x198c <startMenu>
    24a0:	85 c0       	rjmp	.+266    	; 0x25ac <Key_event+0x164>
            break;
        }
	}

	if ( (par == KEY_UP) || (par == KEY_DOWN) || (par == 0) )
    24a2:	83 30       	cpi	r24, 0x03	; 3
    24a4:	08 f0       	brcs	.+2      	; 0x24a8 <Key_event+0x60>
    24a6:	82 c0       	rjmp	.+260    	; 0x25ac <Key_event+0x164>
    {
        ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    24a8:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    24aa:	f8 94       	cli
        {
            seep_read(seep_pointer - ((nevent+1)<<3), event_buffer, RECORD_SIZE);
    24ac:	80 91 ba 02 	lds	r24, 0x02BA
    24b0:	90 91 bb 02 	lds	r25, 0x02BB
    24b4:	20 91 4b 02 	lds	r18, 0x024B
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	2f 5f       	subi	r18, 0xFF	; 255
    24bc:	3f 4f       	sbci	r19, 0xFF	; 255
    24be:	43 e0       	ldi	r20, 0x03	; 3
    24c0:	22 0f       	add	r18, r18
    24c2:	33 1f       	adc	r19, r19
    24c4:	4a 95       	dec	r20
    24c6:	e1 f7       	brne	.-8      	; 0x24c0 <Key_event+0x78>
    24c8:	48 e0       	ldi	r20, 0x08	; 8
    24ca:	6e ed       	ldi	r22, 0xDE	; 222
    24cc:	72 e0       	ldi	r23, 0x02	; 2
    24ce:	82 1b       	sub	r24, r18
    24d0:	93 0b       	sbc	r25, r19
    24d2:	0e 94 16 04 	call	0x82c	; 0x82c <seep_read>
            lcd_gotoxy(0,0);
    24d6:	60 e0       	ldi	r22, 0x00	; 0
    24d8:	80 e0       	ldi	r24, 0x00	; 0
    24da:	0e 94 23 08 	call	0x1046	; 0x1046 <lcd_gotoxy>
            sprintf(lcd_buffer, "\xcc%04d #%03d ", (seep_pointer>>3) - nevent-1, event_buffer[1]);    // №xxxx #xxx
    24de:	80 91 ba 02 	lds	r24, 0x02BA
    24e2:	90 91 bb 02 	lds	r25, 0x02BB
    24e6:	20 91 df 02 	lds	r18, 0x02DF
    24ea:	1f 92       	push	r1
    24ec:	2f 93       	push	r18
    24ee:	53 e0       	ldi	r21, 0x03	; 3
    24f0:	96 95       	lsr	r25
    24f2:	87 95       	ror	r24
    24f4:	5a 95       	dec	r21
    24f6:	e1 f7       	brne	.-8      	; 0x24f0 <Key_event+0xa8>
    24f8:	01 97       	sbiw	r24, 0x01	; 1
    24fa:	20 91 4b 02 	lds	r18, 0x024B
    24fe:	82 1b       	sub	r24, r18
    2500:	91 09       	sbc	r25, r1
    2502:	9f 93       	push	r25
    2504:	8f 93       	push	r24
    2506:	8f e0       	ldi	r24, 0x0F	; 15
    2508:	92 e0       	ldi	r25, 0x02	; 2
    250a:	9f 93       	push	r25
    250c:	8f 93       	push	r24
    250e:	85 ea       	ldi	r24, 0xA5	; 165
    2510:	92 e0       	ldi	r25, 0x02	; 2
    2512:	9f 93       	push	r25
    2514:	8f 93       	push	r24
    2516:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <sprintf>
            lcd_puts(lcd_buffer);
    251a:	85 ea       	ldi	r24, 0xA5	; 165
    251c:	92 e0       	ldi	r25, 0x02	; 2
    251e:	0e 94 55 08 	call	0x10aa	; 0x10aa <lcd_puts>
            if(event_buffer[0] == CALL)    lcd_puts("\263\303\267.");
    2522:	8d b7       	in	r24, 0x3d	; 61
    2524:	9e b7       	in	r25, 0x3e	; 62
    2526:	08 96       	adiw	r24, 0x08	; 8
    2528:	0f b6       	in	r0, 0x3f	; 63
    252a:	f8 94       	cli
    252c:	9e bf       	out	0x3e, r25	; 62
    252e:	0f be       	out	0x3f, r0	; 63
    2530:	8d bf       	out	0x3d, r24	; 61
    2532:	80 91 de 02 	lds	r24, 0x02DE
    2536:	81 30       	cpi	r24, 0x01	; 1
    2538:	19 f4       	brne	.+6      	; 0x2540 <Key_event+0xf8>
    253a:	8c e1       	ldi	r24, 0x1C	; 28
    253c:	92 e0       	ldi	r25, 0x02	; 2
    253e:	02 c0       	rjmp	.+4      	; 0x2544 <Key_event+0xfc>
            else                           lcd_puts("o\277\274.");
    2540:	81 e2       	ldi	r24, 0x21	; 33
    2542:	92 e0       	ldi	r25, 0x02	; 2
    2544:	0e 94 55 08 	call	0x10aa	; 0x10aa <lcd_puts>
            lcd_gotoxy(0,1);
    2548:	61 e0       	ldi	r22, 0x01	; 1
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	0e 94 23 08 	call	0x1046	; 0x1046 <lcd_gotoxy>
            sprintf(lcd_buffer, "%02d.%02d %02d:%02d:%02d ", event_buffer[4], event_buffer[3], event_buffer[5], event_buffer[6], event_buffer[7]);
    2550:	80 91 e5 02 	lds	r24, 0x02E5
    2554:	1f 92       	push	r1
    2556:	8f 93       	push	r24
    2558:	80 91 e4 02 	lds	r24, 0x02E4
    255c:	1f 92       	push	r1
    255e:	8f 93       	push	r24
    2560:	80 91 e3 02 	lds	r24, 0x02E3
    2564:	1f 92       	push	r1
    2566:	8f 93       	push	r24
    2568:	80 91 e1 02 	lds	r24, 0x02E1
    256c:	1f 92       	push	r1
    256e:	8f 93       	push	r24
    2570:	80 91 e2 02 	lds	r24, 0x02E2
    2574:	1f 92       	push	r1
    2576:	8f 93       	push	r24
    2578:	86 e2       	ldi	r24, 0x26	; 38
    257a:	92 e0       	ldi	r25, 0x02	; 2
    257c:	9f 93       	push	r25
    257e:	8f 93       	push	r24
    2580:	85 ea       	ldi	r24, 0xA5	; 165
    2582:	92 e0       	ldi	r25, 0x02	; 2
    2584:	9f 93       	push	r25
    2586:	8f 93       	push	r24
    2588:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <sprintf>
            lcd_puts(lcd_buffer);
    258c:	85 ea       	ldi	r24, 0xA5	; 165
    258e:	92 e0       	ldi	r25, 0x02	; 2
    2590:	0e 94 55 08 	call	0x10aa	; 0x10aa <lcd_puts>
            killTimer(MSG_KEY_REPEAT);
    2594:	82 e0       	ldi	r24, 0x02	; 2
    2596:	0e 94 fd 14 	call	0x29fa	; 0x29fa <killTimer>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    259a:	cf bf       	out	0x3f, r28	; 63
    __asm__ volatile ("" ::: "memory");
    259c:	8d b7       	in	r24, 0x3d	; 61
    259e:	9e b7       	in	r25, 0x3e	; 62
    25a0:	0e 96       	adiw	r24, 0x0e	; 14
    25a2:	0f b6       	in	r0, 0x3f	; 63
    25a4:	f8 94       	cli
    25a6:	9e bf       	out	0x3e, r25	; 62
    25a8:	0f be       	out	0x3f, r0	; 63
    25aa:	8d bf       	out	0x3d, r24	; 61
        }
    }
	return 1;
}
    25ac:	81 e0       	ldi	r24, 0x01	; 1
    25ae:	cf 91       	pop	r28
    25b0:	08 95       	ret

000025b2 <Key_active>:
	return 1;
}


uint8_t Key_active(msg_par par)
{
    25b2:	ff 92       	push	r15
    25b4:	0f 93       	push	r16
    25b6:	1f 93       	push	r17
    25b8:	cf 93       	push	r28
    25ba:	df 93       	push	r29
    uint8_t i;

    active_on = 1;
    25bc:	91 e0       	ldi	r25, 0x01	; 1
    25be:	90 93 49 02 	sts	0x0249, r25

	switch (par)
    25c2:	82 30       	cpi	r24, 0x02	; 2
    25c4:	29 f0       	breq	.+10     	; 0x25d0 <Key_active+0x1e>
    25c6:	85 30       	cpi	r24, 0x05	; 5
    25c8:	d1 f0       	breq	.+52     	; 0x25fe <Key_active+0x4c>
    25ca:	81 30       	cpi	r24, 0x01	; 1
    25cc:	11 f5       	brne	.+68     	; 0x2612 <Key_active+0x60>
    25ce:	0f c0       	rjmp	.+30     	; 0x25ee <Key_active+0x3c>
	{
        case KEY_DOWN:
        {
            if ( (nevent+8) < (n_active_calls) )
    25d0:	40 91 4b 02 	lds	r20, 0x024B
    25d4:	20 91 4e 02 	lds	r18, 0x024E
    25d8:	84 2f       	mov	r24, r20
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	08 96       	adiw	r24, 0x08	; 8
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	82 17       	cp	r24, r18
    25e2:	93 07       	cpc	r25, r19
    25e4:	cc f4       	brge	.+50     	; 0x2618 <Key_active+0x66>
                nevent += 8;
    25e6:	48 5f       	subi	r20, 0xF8	; 248
    25e8:	40 93 4b 02 	sts	0x024B, r20
    25ec:	15 c0       	rjmp	.+42     	; 0x2618 <Key_active+0x66>
            break;
        }

        case KEY_UP:
        {
            if( nevent > 7 )
    25ee:	80 91 4b 02 	lds	r24, 0x024B
    25f2:	88 30       	cpi	r24, 0x08	; 8
    25f4:	88 f0       	brcs	.+34     	; 0x2618 <Key_active+0x66>
                nevent -= 8;
    25f6:	88 50       	subi	r24, 0x08	; 8
    25f8:	80 93 4b 02 	sts	0x024B, r24
    25fc:	0d c0       	rjmp	.+26     	; 0x2618 <Key_active+0x66>
            break;
        }

        case KEY_OK:
        {
            active_on = 0;
    25fe:	10 92 49 02 	sts	0x0249, r1
            killHandler(MSG_KEY_PRESS, &Key_active);
    2602:	69 ed       	ldi	r22, 0xD9	; 217
    2604:	72 e1       	ldi	r23, 0x12	; 18
    2606:	81 e0       	ldi	r24, 0x01	; 1
    2608:	0e 94 9c 13 	call	0x2738	; 0x2738 <killHandler>
            startMenu();
    260c:	0e 94 c6 0c 	call	0x198c	; 0x198c <startMenu>
    2610:	5a c0       	rjmp	.+180    	; 0x26c6 <Key_active+0x114>
            break;
        }
	}

	if ( (par == KEY_UP) || (par == KEY_DOWN) || (par == 0) )
    2612:	83 30       	cpi	r24, 0x03	; 3
    2614:	08 f0       	brcs	.+2      	; 0x2618 <Key_active+0x66>
    2616:	57 c0       	rjmp	.+174    	; 0x26c6 <Key_active+0x114>
    {
        lcd_clrscr();
    2618:	0e 94 2e 08 	call	0x105c	; 0x105c <lcd_clrscr>

        if(n_active_calls)
    261c:	80 91 4e 02 	lds	r24, 0x024E
    2620:	88 23       	and	r24, r24
    2622:	09 f4       	brne	.+2      	; 0x2626 <Key_active+0x74>
    2624:	48 c0       	rjmp	.+144    	; 0x26b6 <Key_active+0x104>
        {
            for ( i=nevent ; (i < (nevent + 8)) && (i < n_active_calls) ; ++i )
    2626:	f0 90 4b 02 	lds	r15, 0x024B
            {
                sprintf(lcd_buffer, "%03d ", active_call_id[i]);
    262a:	c6 e1       	ldi	r28, 0x16	; 22
    262c:	d2 e0       	ldi	r29, 0x02	; 2
    262e:	05 ea       	ldi	r16, 0xA5	; 165
    2630:	12 e0       	ldi	r17, 0x02	; 2
    {
        lcd_clrscr();

        if(n_active_calls)
        {
            for ( i=nevent ; (i < (nevent + 8)) && (i < n_active_calls) ; ++i )
    2632:	40 91 4b 02 	lds	r20, 0x024B
    2636:	2f 2d       	mov	r18, r15
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	84 2f       	mov	r24, r20
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	07 96       	adiw	r24, 0x07	; 7
    2640:	82 17       	cp	r24, r18
    2642:	93 07       	cpc	r25, r19
    2644:	54 f4       	brge	.+20     	; 0x265a <Key_active+0xa8>
            {
                sprintf(lcd_buffer, "%03d ", active_call_id[i]);
                lcd_puts(lcd_buffer);
            }
            if(nevent > 1) {
    2646:	42 30       	cpi	r20, 0x02	; 2
    2648:	20 f1       	brcs	.+72     	; 0x2692 <Key_active+0xe0>
                lcd_gotoxy(15,0);
    264a:	60 e0       	ldi	r22, 0x00	; 0
    264c:	8f e0       	ldi	r24, 0x0F	; 15
    264e:	0e 94 23 08 	call	0x1046	; 0x1046 <lcd_gotoxy>
                lcd_putc(0xd9);
    2652:	89 ed       	ldi	r24, 0xD9	; 217
    2654:	0e 94 34 08 	call	0x1068	; 0x1068 <lcd_putc>
    2658:	1c c0       	rjmp	.+56     	; 0x2692 <Key_active+0xe0>
    {
        lcd_clrscr();

        if(n_active_calls)
        {
            for ( i=nevent ; (i < (nevent + 8)) && (i < n_active_calls) ; ++i )
    265a:	80 91 4e 02 	lds	r24, 0x024E
    265e:	f8 16       	cp	r15, r24
    2660:	90 f7       	brcc	.-28     	; 0x2646 <Key_active+0x94>
            {
                sprintf(lcd_buffer, "%03d ", active_call_id[i]);
    2662:	f9 01       	movw	r30, r18
    2664:	ef 5a       	subi	r30, 0xAF	; 175
    2666:	fd 4f       	sbci	r31, 0xFD	; 253
    2668:	80 81       	ld	r24, Z
    266a:	1f 92       	push	r1
    266c:	8f 93       	push	r24
    266e:	df 93       	push	r29
    2670:	cf 93       	push	r28
    2672:	1f 93       	push	r17
    2674:	0f 93       	push	r16
    2676:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <sprintf>
                lcd_puts(lcd_buffer);
    267a:	85 ea       	ldi	r24, 0xA5	; 165
    267c:	92 e0       	ldi	r25, 0x02	; 2
    267e:	0e 94 55 08 	call	0x10aa	; 0x10aa <lcd_puts>
    {
        lcd_clrscr();

        if(n_active_calls)
        {
            for ( i=nevent ; (i < (nevent + 8)) && (i < n_active_calls) ; ++i )
    2682:	f3 94       	inc	r15
    2684:	0f 90       	pop	r0
    2686:	0f 90       	pop	r0
    2688:	0f 90       	pop	r0
    268a:	0f 90       	pop	r0
    268c:	0f 90       	pop	r0
    268e:	0f 90       	pop	r0
    2690:	d0 cf       	rjmp	.-96     	; 0x2632 <Key_active+0x80>
            }
            if(nevent > 1) {
                lcd_gotoxy(15,0);
                lcd_putc(0xd9);
            }
            if(n_active_calls > (nevent+8)) {
    2692:	20 91 4e 02 	lds	r18, 0x024E
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	80 91 4b 02 	lds	r24, 0x024B
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	08 96       	adiw	r24, 0x08	; 8
    26a0:	82 17       	cp	r24, r18
    26a2:	93 07       	cpc	r25, r19
    26a4:	84 f4       	brge	.+32     	; 0x26c6 <Key_active+0x114>
                lcd_gotoxy(15,1);
    26a6:	61 e0       	ldi	r22, 0x01	; 1
    26a8:	8f e0       	ldi	r24, 0x0F	; 15
    26aa:	0e 94 23 08 	call	0x1046	; 0x1046 <lcd_gotoxy>
                lcd_putc(0xda);
    26ae:	8a ed       	ldi	r24, 0xDA	; 218
    26b0:	0e 94 34 08 	call	0x1068	; 0x1068 <lcd_putc>
    26b4:	08 c0       	rjmp	.+16     	; 0x26c6 <Key_active+0x114>
            }
        }
        else
        {
            lcd_gotoxy(2,1);
    26b6:	61 e0       	ldi	r22, 0x01	; 1
    26b8:	82 e0       	ldi	r24, 0x02	; 2
    26ba:	0e 94 23 08 	call	0x1046	; 0x1046 <lcd_gotoxy>
            lcd_puts("He\277 \263\303\267o\263o\263");
    26be:	84 e4       	ldi	r24, 0x44	; 68
    26c0:	91 e0       	ldi	r25, 0x01	; 1
    26c2:	0e 94 55 08 	call	0x10aa	; 0x10aa <lcd_puts>
        }
    }

	return 1;
}
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	df 91       	pop	r29
    26ca:	cf 91       	pop	r28
    26cc:	1f 91       	pop	r17
    26ce:	0f 91       	pop	r16
    26d0:	ff 90       	pop	r15
    26d2:	08 95       	ret

000026d4 <kill_password>:

uint8_t kill_password(msg_par par)
{
    static uint8_t counter = 0;

    if (++counter > 29)
    26d4:	80 91 4d 02 	lds	r24, 0x024D
    26d8:	8f 5f       	subi	r24, 0xFF	; 255
    26da:	80 93 4d 02 	sts	0x024D, r24
    26de:	8e 31       	cpi	r24, 0x1E	; 30
    26e0:	28 f0       	brcs	.+10     	; 0x26ec <kill_password+0x18>
    {
        psw_on = 0;
    26e2:	10 92 46 02 	sts	0x0246, r1
        killTimer(MSG_KILL_PSW);
    26e6:	8b e0       	ldi	r24, 0x0B	; 11
    26e8:	0e 94 fd 14 	call	0x29fa	; 0x29fa <killTimer>
    }
    return 0;
}
    26ec:	80 e0       	ldi	r24, 0x00	; 0
    26ee:	08 95       	ret

000026f0 <setHandler>:
volatile uint16_t lMesPointer, hMesPointer; // указатели на начало и конец буфера

// установка обработчика события
// вызывается: setHandler(MSG_KEY_PRESS, &checkKey);
void setHandler(msg_num msg, handler hnd) {
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    26f0:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    26f2:	f8 94       	cli
		if (numHandlers < maxHandlers) {
    26f4:	20 91 ee 02 	lds	r18, 0x02EE
    26f8:	20 31       	cpi	r18, 0x10	; 16
    26fa:	e0 f4       	brcc	.+56     	; 0x2734 <setHandler+0x44>
			lHandler[numHandlers].hnd = hnd; // и регистрирем обработчик
    26fc:	20 91 ee 02 	lds	r18, 0x02EE
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	f9 01       	movw	r30, r18
    2704:	ee 0f       	add	r30, r30
    2706:	ff 1f       	adc	r31, r31
    2708:	e2 0f       	add	r30, r18
    270a:	f3 1f       	adc	r31, r19
    270c:	e1 51       	subi	r30, 0x11	; 17
    270e:	fd 4f       	sbci	r31, 0xFD	; 253
    2710:	72 83       	std	Z+2, r23	; 0x02
    2712:	61 83       	std	Z+1, r22	; 0x01
			lHandler[numHandlers].msg = msg;
    2714:	20 91 ee 02 	lds	r18, 0x02EE
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	f9 01       	movw	r30, r18
    271c:	ee 0f       	add	r30, r30
    271e:	ff 1f       	adc	r31, r31
    2720:	e2 0f       	add	r30, r18
    2722:	f3 1f       	adc	r31, r19
    2724:	e1 51       	subi	r30, 0x11	; 17
    2726:	fd 4f       	sbci	r31, 0xFD	; 253
    2728:	80 83       	st	Z, r24
			numHandlers++;
    272a:	80 91 ee 02 	lds	r24, 0x02EE
    272e:	8f 5f       	subi	r24, 0xFF	; 255
    2730:	80 93 ee 02 	sts	0x02EE, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2734:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    2736:	08 95       	ret

00002738 <killHandler>:

// снятие обработчика события
// вызывается: killHandler(MSG_KEY_PRESS, &checkKey);
// удаляет один последний обработчик.
void killHandler(msg_num msg, handler hnd) {
	if (numHandlers==0)
    2738:	90 91 ee 02 	lds	r25, 0x02EE
    273c:	99 23       	and	r25, r25
    273e:	09 f4       	brne	.+2      	; 0x2742 <killHandler+0xa>
    2740:	47 c0       	rjmp	.+142    	; 0x27d0 <killHandler+0x98>
		return;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2742:	5f b7       	in	r21, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2744:	f8 94       	cli
		int8_t i, j;
		j = 0;
		for (i = numHandlers-1; i >= 0; i--) {
    2746:	40 91 ee 02 	lds	r20, 0x02EE
    274a:	41 50       	subi	r20, 0x01	; 1
    274c:	47 fd       	sbrc	r20, 7
    274e:	3f c0       	rjmp	.+126    	; 0x27ce <killHandler+0x96>

			if ((lHandler[i].msg == msg) && (lHandler[i].hnd == hnd)) {
    2750:	24 2f       	mov	r18, r20
    2752:	33 27       	eor	r19, r19
    2754:	27 fd       	sbrc	r18, 7
    2756:	30 95       	com	r19
    2758:	f9 01       	movw	r30, r18
    275a:	ee 0f       	add	r30, r30
    275c:	ff 1f       	adc	r31, r31
    275e:	e2 0f       	add	r30, r18
    2760:	f3 1f       	adc	r31, r19
    2762:	e1 51       	subi	r30, 0x11	; 17
    2764:	fd 4f       	sbci	r31, 0xFD	; 253
    2766:	90 81       	ld	r25, Z
    2768:	98 13       	cpse	r25, r24
    276a:	ef cf       	rjmp	.-34     	; 0x274a <killHandler+0x12>
    276c:	21 81       	ldd	r18, Z+1	; 0x01
    276e:	32 81       	ldd	r19, Z+2	; 0x02
    2770:	26 17       	cp	r18, r22
    2772:	37 07       	cpc	r19, r23
    2774:	51 f7       	brne	.-44     	; 0x274a <killHandler+0x12>

				// сдвигаем все записи к началу списка, чтобы дырок не было
				for (j = i; j < numHandlers-1 ; j++) {
    2776:	84 2f       	mov	r24, r20
    2778:	99 27       	eor	r25, r25
    277a:	87 fd       	sbrc	r24, 7
    277c:	90 95       	com	r25
    277e:	20 91 ee 02 	lds	r18, 0x02EE
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	21 50       	subi	r18, 0x01	; 1
    2786:	31 09       	sbc	r19, r1
    2788:	82 17       	cp	r24, r18
    278a:	93 07       	cpc	r25, r19
    278c:	dc f4       	brge	.+54     	; 0x27c4 <killHandler+0x8c>
					lHandler[j].msg = lHandler[j + 1].msg;
    278e:	9c 01       	movw	r18, r24
    2790:	2f 5f       	subi	r18, 0xFF	; 255
    2792:	3f 4f       	sbci	r19, 0xFF	; 255
    2794:	d9 01       	movw	r26, r18
    2796:	aa 0f       	add	r26, r26
    2798:	bb 1f       	adc	r27, r27
    279a:	a2 0f       	add	r26, r18
    279c:	b3 1f       	adc	r27, r19
    279e:	a1 51       	subi	r26, 0x11	; 17
    27a0:	bd 4f       	sbci	r27, 0xFD	; 253
    27a2:	2c 91       	ld	r18, X
    27a4:	fc 01       	movw	r30, r24
    27a6:	ee 0f       	add	r30, r30
    27a8:	ff 1f       	adc	r31, r31
    27aa:	e8 0f       	add	r30, r24
    27ac:	f9 1f       	adc	r31, r25
    27ae:	e1 51       	subi	r30, 0x11	; 17
    27b0:	fd 4f       	sbci	r31, 0xFD	; 253
    27b2:	20 83       	st	Z, r18
					lHandler[j].hnd = lHandler[j + 1].hnd;
    27b4:	11 96       	adiw	r26, 0x01	; 1
    27b6:	8d 91       	ld	r24, X+
    27b8:	9c 91       	ld	r25, X
    27ba:	12 97       	sbiw	r26, 0x02	; 2
    27bc:	92 83       	std	Z+2, r25	; 0x02
    27be:	81 83       	std	Z+1, r24	; 0x01
    27c0:	4f 5f       	subi	r20, 0xFF	; 255
    27c2:	d9 cf       	rjmp	.-78     	; 0x2776 <killHandler+0x3e>
				}
				numHandlers--;
    27c4:	80 91 ee 02 	lds	r24, 0x02EE
    27c8:	81 50       	subi	r24, 0x01	; 1
    27ca:	80 93 ee 02 	sts	0x02EE, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    27ce:	5f bf       	out	0x3f, r21	; 63
    __asm__ volatile ("" ::: "memory");
    27d0:	08 95       	ret

000027d2 <killHandlersNum>:
	}
}


void killHandlersNum(msg_num msg) {
	if (numHandlers==0)
    27d2:	90 91 ee 02 	lds	r25, 0x02EE
    27d6:	99 23       	and	r25, r25
    27d8:	09 f4       	brne	.+2      	; 0x27dc <killHandlersNum+0xa>
    27da:	44 c0       	rjmp	.+136    	; 0x2864 <killHandlersNum+0x92>
		return;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    27dc:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    27de:	f8 94       	cli
		int8_t i, j;
		j = 0;
		for (i = numHandlers-1; i >= 0; i--) {
    27e0:	90 91 ee 02 	lds	r25, 0x02EE
    27e4:	91 50       	subi	r25, 0x01	; 1
    27e6:	97 fd       	sbrc	r25, 7
    27e8:	3c c0       	rjmp	.+120    	; 0x2862 <killHandlersNum+0x90>

			if (lHandler[i].msg == msg) {
    27ea:	29 2f       	mov	r18, r25
    27ec:	33 27       	eor	r19, r19
    27ee:	27 fd       	sbrc	r18, 7
    27f0:	30 95       	com	r19
    27f2:	f9 01       	movw	r30, r18
    27f4:	ee 0f       	add	r30, r30
    27f6:	ff 1f       	adc	r31, r31
    27f8:	e2 0f       	add	r30, r18
    27fa:	f3 1f       	adc	r31, r19
    27fc:	e1 51       	subi	r30, 0x11	; 17
    27fe:	fd 4f       	sbci	r31, 0xFD	; 253
    2800:	20 81       	ld	r18, Z
    2802:	28 13       	cpse	r18, r24
    2804:	ef cf       	rjmp	.-34     	; 0x27e4 <killHandlersNum+0x12>
    2806:	69 2f       	mov	r22, r25

				// сдвигаем все записи к началу списка, чтобы дырок не было
				for (j = i; j < numHandlers-1 ; j++) {
    2808:	26 2f       	mov	r18, r22
    280a:	33 27       	eor	r19, r19
    280c:	27 fd       	sbrc	r18, 7
    280e:	30 95       	com	r19
    2810:	40 91 ee 02 	lds	r20, 0x02EE
    2814:	50 e0       	ldi	r21, 0x00	; 0
    2816:	41 50       	subi	r20, 0x01	; 1
    2818:	51 09       	sbc	r21, r1
    281a:	24 17       	cp	r18, r20
    281c:	35 07       	cpc	r19, r21
    281e:	dc f4       	brge	.+54     	; 0x2856 <killHandlersNum+0x84>
					lHandler[j].msg = lHandler[j + 1].msg;
    2820:	a9 01       	movw	r20, r18
    2822:	4f 5f       	subi	r20, 0xFF	; 255
    2824:	5f 4f       	sbci	r21, 0xFF	; 255
    2826:	da 01       	movw	r26, r20
    2828:	aa 0f       	add	r26, r26
    282a:	bb 1f       	adc	r27, r27
    282c:	a4 0f       	add	r26, r20
    282e:	b5 1f       	adc	r27, r21
    2830:	a1 51       	subi	r26, 0x11	; 17
    2832:	bd 4f       	sbci	r27, 0xFD	; 253
    2834:	4c 91       	ld	r20, X
    2836:	f9 01       	movw	r30, r18
    2838:	ee 0f       	add	r30, r30
    283a:	ff 1f       	adc	r31, r31
    283c:	e2 0f       	add	r30, r18
    283e:	f3 1f       	adc	r31, r19
    2840:	e1 51       	subi	r30, 0x11	; 17
    2842:	fd 4f       	sbci	r31, 0xFD	; 253
    2844:	40 83       	st	Z, r20
					lHandler[j].hnd = lHandler[j + 1].hnd;
    2846:	11 96       	adiw	r26, 0x01	; 1
    2848:	2d 91       	ld	r18, X+
    284a:	3c 91       	ld	r19, X
    284c:	12 97       	sbiw	r26, 0x02	; 2
    284e:	32 83       	std	Z+2, r19	; 0x02
    2850:	21 83       	std	Z+1, r18	; 0x01
    2852:	6f 5f       	subi	r22, 0xFF	; 255
    2854:	d9 cf       	rjmp	.-78     	; 0x2808 <killHandlersNum+0x36>
				}
				numHandlers--;
    2856:	20 91 ee 02 	lds	r18, 0x02EE
    285a:	21 50       	subi	r18, 0x01	; 1
    285c:	20 93 ee 02 	sts	0x02EE, r18
    2860:	c1 cf       	rjmp	.-126    	; 0x27e4 <killHandlersNum+0x12>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2862:	7f bf       	out	0x3f, r23	; 63
    __asm__ volatile ("" ::: "memory");
    2864:	08 95       	ret

00002866 <sendMessage>:

// занести событие в очередь
// пример вызова: sendMessage(MSG_KEY_PRESS, KEY_MENU)
void sendMessage(msg_num msg, msg_par par) {

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2866:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2868:	f8 94       	cli
		hMesPointer = (hMesPointer + 1) & (maxMessages - 1); // сдвигаем указатель головы
    286a:	20 91 ea 02 	lds	r18, 0x02EA
    286e:	30 91 eb 02 	lds	r19, 0x02EB
    2872:	2f 5f       	subi	r18, 0xFF	; 255
    2874:	3f 4f       	sbci	r19, 0xFF	; 255
    2876:	2f 70       	andi	r18, 0x0F	; 15
    2878:	33 27       	eor	r19, r19
    287a:	30 93 eb 02 	sts	0x02EB, r19
    287e:	20 93 ea 02 	sts	0x02EA, r18

		lMessage[hMesPointer].msg = msg; // заносим событие и параметр
    2882:	e0 91 ea 02 	lds	r30, 0x02EA
    2886:	f0 91 eb 02 	lds	r31, 0x02EB
    288a:	ee 0f       	add	r30, r30
    288c:	ff 1f       	adc	r31, r31
    288e:	e0 5b       	subi	r30, 0xB0	; 176
    2890:	fc 4f       	sbci	r31, 0xFC	; 252
    2892:	80 83       	st	Z, r24
		lMessage[hMesPointer].par = par;
    2894:	e0 91 ea 02 	lds	r30, 0x02EA
    2898:	f0 91 eb 02 	lds	r31, 0x02EB
    289c:	ee 0f       	add	r30, r30
    289e:	ff 1f       	adc	r31, r31
    28a0:	e0 5b       	subi	r30, 0xB0	; 176
    28a2:	fc 4f       	sbci	r31, 0xFC	; 252
    28a4:	61 83       	std	Z+1, r22	; 0x01
		if (hMesPointer == lMesPointer) { // догнали начало очереди, убиваем необработанное сообытие
    28a6:	20 91 ea 02 	lds	r18, 0x02EA
    28aa:	30 91 eb 02 	lds	r19, 0x02EB
    28ae:	80 91 ec 02 	lds	r24, 0x02EC
    28b2:	90 91 ed 02 	lds	r25, 0x02ED
    28b6:	28 17       	cp	r18, r24
    28b8:	39 07       	cpc	r19, r25
    28ba:	11 f0       	breq	.+4      	; 0x28c0 <sendMessage+0x5a>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    28bc:	4f bf       	out	0x3f, r20	; 63
    __asm__ volatile ("" ::: "memory");
    28be:	08 95       	ret
			lMesPointer = (lMesPointer + 1) & (maxMessages - 1);
    28c0:	80 91 ec 02 	lds	r24, 0x02EC
    28c4:	90 91 ed 02 	lds	r25, 0x02ED
    28c8:	01 96       	adiw	r24, 0x01	; 1
    28ca:	8f 70       	andi	r24, 0x0F	; 15
    28cc:	99 27       	eor	r25, r25
    28ce:	90 93 ed 02 	sts	0x02ED, r25
    28d2:	80 93 ec 02 	sts	0x02EC, r24
    28d6:	f2 cf       	rjmp	.-28     	; 0x28bc <sendMessage+0x56>

000028d8 <dispatchMessage>:
	}
}
;

// обработка событий
void dispatchMessage(void) {
    28d8:	1f 93       	push	r17
    28da:	cf 93       	push	r28
    28dc:	df 93       	push	r29
	int8_t i;
	uint8_t res;
	msg_num msg;
	msg_par par;

	if (hMesPointer == lMesPointer) { // если пустая очередь - возврат
    28de:	20 91 ea 02 	lds	r18, 0x02EA
    28e2:	30 91 eb 02 	lds	r19, 0x02EB
    28e6:	80 91 ec 02 	lds	r24, 0x02EC
    28ea:	90 91 ed 02 	lds	r25, 0x02ED
    28ee:	28 17       	cp	r18, r24
    28f0:	39 07       	cpc	r19, r25
    28f2:	09 f4       	brne	.+2      	; 0x28f6 <dispatchMessage+0x1e>
    28f4:	40 c0       	rjmp	.+128    	; 0x2976 <dispatchMessage+0x9e>
		return;
	}

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    28f6:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    28f8:	f8 94       	cli
		lMesPointer = (lMesPointer + 1) & (maxMessages - 1); // сдвинем указатель
    28fa:	80 91 ec 02 	lds	r24, 0x02EC
    28fe:	90 91 ed 02 	lds	r25, 0x02ED
    2902:	01 96       	adiw	r24, 0x01	; 1
    2904:	8f 70       	andi	r24, 0x0F	; 15
    2906:	99 27       	eor	r25, r25
    2908:	90 93 ed 02 	sts	0x02ED, r25
    290c:	80 93 ec 02 	sts	0x02EC, r24

		msg = lMessage[lMesPointer].msg;
    2910:	e0 91 ec 02 	lds	r30, 0x02EC
    2914:	f0 91 ed 02 	lds	r31, 0x02ED
    2918:	ee 0f       	add	r30, r30
    291a:	ff 1f       	adc	r31, r31
    291c:	e0 5b       	subi	r30, 0xB0	; 176
    291e:	fc 4f       	sbci	r31, 0xFC	; 252
    2920:	d0 81       	ld	r29, Z
		par = lMessage[lMesPointer].par;
    2922:	e0 91 ec 02 	lds	r30, 0x02EC
    2926:	f0 91 ed 02 	lds	r31, 0x02ED
    292a:	ee 0f       	add	r30, r30
    292c:	ff 1f       	adc	r31, r31
    292e:	e0 5b       	subi	r30, 0xB0	; 176
    2930:	fc 4f       	sbci	r31, 0xFC	; 252
    2932:	11 81       	ldd	r17, Z+1	; 0x01
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2934:	2f bf       	out	0x3f, r18	; 63
	}

	if (msg != 0 && numHandlers > 0) {
    2936:	dd 23       	and	r29, r29
    2938:	f1 f0       	breq	.+60     	; 0x2976 <dispatchMessage+0x9e>
    293a:	80 91 ee 02 	lds	r24, 0x02EE
    293e:	88 23       	and	r24, r24
    2940:	d1 f0       	breq	.+52     	; 0x2976 <dispatchMessage+0x9e>
		for (i = numHandlers - 1; i >= 0; i--) { // просматриваем обработчики с конца
    2942:	c0 91 ee 02 	lds	r28, 0x02EE
    2946:	c1 50       	subi	r28, 0x01	; 1
    2948:	c7 fd       	sbrc	r28, 7
    294a:	15 c0       	rjmp	.+42     	; 0x2976 <dispatchMessage+0x9e>
			if (lHandler[i].msg == msg) { // последний занесенный имеет приоритет
    294c:	2c 2f       	mov	r18, r28
    294e:	33 27       	eor	r19, r19
    2950:	27 fd       	sbrc	r18, 7
    2952:	30 95       	com	r19
    2954:	f9 01       	movw	r30, r18
    2956:	ee 0f       	add	r30, r30
    2958:	ff 1f       	adc	r31, r31
    295a:	e2 0f       	add	r30, r18
    295c:	f3 1f       	adc	r31, r19
    295e:	e1 51       	subi	r30, 0x11	; 17
    2960:	fd 4f       	sbci	r31, 0xFD	; 253
    2962:	80 81       	ld	r24, Z
    2964:	8d 13       	cpse	r24, r29
    2966:	ef cf       	rjmp	.-34     	; 0x2946 <dispatchMessage+0x6e>
				res = lHandler[i].hnd(par); // вызываем обработчик
    2968:	01 80       	ldd	r0, Z+1	; 0x01
    296a:	f2 81       	ldd	r31, Z+2	; 0x02
    296c:	e0 2d       	mov	r30, r0
    296e:	81 2f       	mov	r24, r17
    2970:	09 95       	icall
				if (res) { // если обработчик вернул 1, перываем обработку события
    2972:	88 23       	and	r24, r24
    2974:	41 f3       	breq	.-48     	; 0x2946 <dispatchMessage+0x6e>
					break;
				}
			}
		}
	}
}
    2976:	df 91       	pop	r29
    2978:	cf 91       	pop	r28
    297a:	1f 91       	pop	r17
    297c:	08 95       	ret

0000297e <setTimer>:

// установить таймер
// пример вызова: setTimer(MSG_LCD_REFRESH, 0, 50);
void setTimer(msg_num msg, msg_par par, uint16_t time) {
	uint8_t i, firstFree;
	if (time == 0) {
    297e:	41 15       	cp	r20, r1
    2980:	51 05       	cpc	r21, r1
    2982:	11 f4       	brne	.+4      	; 0x2988 <setTimer+0xa>
		sendMessage(msg, par);
    2984:	0c 94 33 14 	jmp	0x2866	; 0x2866 <sendMessage>
	} else {

		ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2988:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    298a:	f8 94       	cli
			firstFree = numTimers + 1;

			for (i = 0; i <= numTimers; i++) { // ищем установленный таймер
				if (lTimer[i].msg == 0) {
    298c:	26 e0       	ldi	r18, 0x06	; 6
	if (time == 0) {
		sendMessage(msg, par);
	} else {

		ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
			firstFree = numTimers + 1;
    298e:	90 91 4f 03 	lds	r25, 0x034F
    2992:	9f 5f       	subi	r25, 0xFF	; 255

			for (i = 0; i <= numTimers; i++) { // ищем установленный таймер
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	e0 91 4f 03 	lds	r30, 0x034F
    299a:	e3 17       	cp	r30, r19
    299c:	a0 f0       	brcs	.+40     	; 0x29c6 <setTimer+0x48>
				if (lTimer[i].msg == 0) {
    299e:	23 9f       	mul	r18, r19
    29a0:	f0 01       	movw	r30, r0
    29a2:	11 24       	eor	r1, r1
    29a4:	e1 5e       	subi	r30, 0xE1	; 225
    29a6:	fc 4f       	sbci	r31, 0xFC	; 252
    29a8:	a0 81       	ld	r26, Z
    29aa:	aa 23       	and	r26, r26
    29ac:	49 f0       	breq	.+18     	; 0x29c0 <setTimer+0x42>
					firstFree = i;
				} else { // если нашли - обновляем время
					//if ((lTimer[i].msg == msg) && (lTimer[i].par == par)) {
					if (lTimer[i].msg == msg) {
    29ae:	a0 81       	ld	r26, Z
    29b0:	a8 13       	cpse	r26, r24
    29b2:	07 c0       	rjmp	.+14     	; 0x29c2 <setTimer+0x44>
						lTimer[i].time = time;
    29b4:	53 83       	std	Z+3, r21	; 0x03
    29b6:	42 83       	std	Z+2, r20	; 0x02
						lTimer[i].timeOrigin = time;
    29b8:	55 83       	std	Z+5, r21	; 0x05
    29ba:	44 83       	std	Z+4, r20	; 0x04
						lTimer[i].par = par;
    29bc:	61 83       	std	Z+1, r22	; 0x01
    29be:	1b c0       	rjmp	.+54     	; 0x29f6 <setTimer+0x78>
    29c0:	93 2f       	mov	r25, r19
	} else {

		ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
			firstFree = numTimers + 1;

			for (i = 0; i <= numTimers; i++) { // ищем установленный таймер
    29c2:	3f 5f       	subi	r19, 0xFF	; 255
    29c4:	e8 cf       	rjmp	.-48     	; 0x2996 <setTimer+0x18>
						firstFree = maxTimers + 1;
						break;
					}
				}
			}
			if (firstFree <= maxTimers) { // иначе - просто добавляем новый
    29c6:	99 30       	cpi	r25, 0x09	; 9
    29c8:	b0 f4       	brcc	.+44     	; 0x29f6 <setTimer+0x78>
				lTimer[firstFree].msg = msg;
    29ca:	29 9f       	mul	r18, r25
    29cc:	90 01       	movw	r18, r0
    29ce:	11 24       	eor	r1, r1
    29d0:	21 5e       	subi	r18, 0xE1	; 225
    29d2:	3c 4f       	sbci	r19, 0xFC	; 252
    29d4:	f9 01       	movw	r30, r18
    29d6:	81 93       	st	Z+, r24
				lTimer[firstFree].par = par;
    29d8:	60 83       	st	Z, r22
				lTimer[firstFree].time = time;
    29da:	f9 01       	movw	r30, r18
    29dc:	32 96       	adiw	r30, 0x02	; 2
    29de:	51 83       	std	Z+1, r21	; 0x01
    29e0:	40 83       	st	Z, r20
				lTimer[firstFree].timeOrigin = time;
    29e2:	f9 01       	movw	r30, r18
    29e4:	34 96       	adiw	r30, 0x04	; 4
    29e6:	51 83       	std	Z+1, r21	; 0x01
    29e8:	40 83       	st	Z, r20

				if (firstFree > numTimers)
    29ea:	80 91 4f 03 	lds	r24, 0x034F
    29ee:	89 17       	cp	r24, r25
    29f0:	10 f4       	brcc	.+4      	; 0x29f6 <setTimer+0x78>
					numTimers = firstFree;
    29f2:	90 93 4f 03 	sts	0x034F, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    29f6:	7f bf       	out	0x3f, r23	; 63
    __asm__ volatile ("" ::: "memory");
    29f8:	08 95       	ret

000029fa <killTimer>:
// убить таймер
// особенность - убивает все установленные таймеры на данное событие,
// не зависимо от параметра события
void killTimer(msg_num msg) {
	uint8_t i;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    29fa:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    29fc:	f8 94       	cli
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	30 e0       	ldi	r19, 0x00	; 0
		for (i = 0; i < maxTimers; i++) {
			if (lTimer[i].msg == msg) {
    2a02:	46 e0       	ldi	r20, 0x06	; 6
    2a04:	42 9f       	mul	r20, r18
    2a06:	f0 01       	movw	r30, r0
    2a08:	43 9f       	mul	r20, r19
    2a0a:	f0 0d       	add	r31, r0
    2a0c:	11 24       	eor	r1, r1
    2a0e:	e1 5e       	subi	r30, 0xE1	; 225
    2a10:	fc 4f       	sbci	r31, 0xFC	; 252
    2a12:	50 81       	ld	r21, Z
    2a14:	58 13       	cpse	r21, r24
    2a16:	01 c0       	rjmp	.+2      	; 0x2a1a <killTimer+0x20>
				lTimer[i].msg = 0;
    2a18:	10 82       	st	Z, r1
    2a1a:	2f 5f       	subi	r18, 0xFF	; 255
    2a1c:	3f 4f       	sbci	r19, 0xFF	; 255
// особенность - убивает все установленные таймеры на данное событие,
// не зависимо от параметра события
void killTimer(msg_num msg) {
	uint8_t i;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		for (i = 0; i < maxTimers; i++) {
    2a1e:	28 30       	cpi	r18, 0x08	; 8
    2a20:	31 05       	cpc	r19, r1
    2a22:	81 f7       	brne	.-32     	; 0x2a04 <killTimer+0xa>
			if (lTimer[i].msg == msg) {
				lTimer[i].msg = 0;
			}
		}
		while ((lTimer[numTimers].msg == 0) && (numTimers > 0))
    2a24:	26 e0       	ldi	r18, 0x06	; 6
    2a26:	e0 91 4f 03 	lds	r30, 0x034F
    2a2a:	2e 9f       	mul	r18, r30
    2a2c:	f0 01       	movw	r30, r0
    2a2e:	11 24       	eor	r1, r1
    2a30:	e1 5e       	subi	r30, 0xE1	; 225
    2a32:	fc 4f       	sbci	r31, 0xFC	; 252
    2a34:	80 81       	ld	r24, Z
    2a36:	81 11       	cpse	r24, r1
    2a38:	0a c0       	rjmp	.+20     	; 0x2a4e <killTimer+0x54>
    2a3a:	80 91 4f 03 	lds	r24, 0x034F
    2a3e:	88 23       	and	r24, r24
    2a40:	31 f0       	breq	.+12     	; 0x2a4e <killTimer+0x54>
			numTimers--;
    2a42:	80 91 4f 03 	lds	r24, 0x034F
    2a46:	81 50       	subi	r24, 0x01	; 1
    2a48:	80 93 4f 03 	sts	0x034F, r24
    2a4c:	ec cf       	rjmp	.-40     	; 0x2a26 <killTimer+0x2c>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2a4e:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    2a50:	08 95       	ret

00002a52 <dispatchTimer>:
	}
}

// диспетчер таймеров

void dispatchTimer(void) {
    2a52:	0f 93       	push	r16
    2a54:	1f 93       	push	r17
    2a56:	cf 93       	push	r28
    2a58:	df 93       	push	r29
	uint8_t i;

	for (i = 0; i <= numTimers; i++) {
    2a5a:	10 e0       	ldi	r17, 0x00	; 0
		if (lTimer[i].msg == 0)
    2a5c:	06 e0       	ldi	r16, 0x06	; 6
// диспетчер таймеров

void dispatchTimer(void) {
	uint8_t i;

	for (i = 0; i <= numTimers; i++) {
    2a5e:	80 91 4f 03 	lds	r24, 0x034F
    2a62:	81 17       	cp	r24, r17
    2a64:	d0 f0       	brcs	.+52     	; 0x2a9a <dispatchTimer+0x48>
		if (lTimer[i].msg == 0)
    2a66:	01 9f       	mul	r16, r17
    2a68:	e0 01       	movw	r28, r0
    2a6a:	11 24       	eor	r1, r1
    2a6c:	c1 5e       	subi	r28, 0xE1	; 225
    2a6e:	dc 4f       	sbci	r29, 0xFC	; 252
    2a70:	88 81       	ld	r24, Y
    2a72:	88 23       	and	r24, r24
    2a74:	81 f0       	breq	.+32     	; 0x2a96 <dispatchTimer+0x44>
			continue;

		if (lTimer[i].time > 0) { // если не пришло время
    2a76:	8a 81       	ldd	r24, Y+2	; 0x02
    2a78:	9b 81       	ldd	r25, Y+3	; 0x03
    2a7a:	89 2b       	or	r24, r25
    2a7c:	21 f0       	breq	.+8      	; 0x2a86 <dispatchTimer+0x34>
			lTimer[i].time--; // просто уменьшаем время
    2a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a80:	9b 81       	ldd	r25, Y+3	; 0x03
    2a82:	01 97       	sbiw	r24, 0x01	; 1
    2a84:	06 c0       	rjmp	.+12     	; 0x2a92 <dispatchTimer+0x40>
		} else {
			sendMessage(lTimer[i].msg, lTimer[i].par); // создаем событие
    2a86:	69 81       	ldd	r22, Y+1	; 0x01
    2a88:	88 81       	ld	r24, Y
    2a8a:	0e 94 33 14 	call	0x2866	; 0x2866 <sendMessage>
			lTimer[i].time = lTimer[i].timeOrigin;
    2a8e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a90:	9d 81       	ldd	r25, Y+5	; 0x05
    2a92:	9b 83       	std	Y+3, r25	; 0x03
    2a94:	8a 83       	std	Y+2, r24	; 0x02
// диспетчер таймеров

void dispatchTimer(void) {
	uint8_t i;

	for (i = 0; i <= numTimers; i++) {
    2a96:	1f 5f       	subi	r17, 0xFF	; 255
    2a98:	e2 cf       	rjmp	.-60     	; 0x2a5e <dispatchTimer+0xc>
		} else {
			sendMessage(lTimer[i].msg, lTimer[i].par); // создаем событие
			lTimer[i].time = lTimer[i].timeOrigin;
		}
	}
}
    2a9a:	df 91       	pop	r29
    2a9c:	cf 91       	pop	r28
    2a9e:	1f 91       	pop	r17
    2aa0:	0f 91       	pop	r16
    2aa2:	08 95       	ret

00002aa4 <initMessages>:

void initMessages() {
	numHandlers = 0;
    2aa4:	10 92 ee 02 	sts	0x02EE, r1
	numTimers = 0;
    2aa8:	10 92 4f 03 	sts	0x034F, r1
	lMesPointer = 0;
    2aac:	10 92 ed 02 	sts	0x02ED, r1
    2ab0:	10 92 ec 02 	sts	0x02EC, r1
	hMesPointer = 0;
    2ab4:	10 92 eb 02 	sts	0x02EB, r1
    2ab8:	10 92 ea 02 	sts	0x02EA, r1

	// главный таймер
	TCCR2 = _BV(WGM21) | _BV(CS22) | _BV(CS20);     // делитель 128
    2abc:	8d e0       	ldi	r24, 0x0D	; 13
    2abe:	85 bd       	out	0x25, r24	; 37
	OCR2 = F_CPU / 204800; // период 600 мксек, вычисляется как 128/x
    2ac0:	8e e4       	ldi	r24, 0x4E	; 78
    2ac2:	83 bd       	out	0x23, r24	; 35
	TIMSK |= _BV(OCIE2);
    2ac4:	89 b7       	in	r24, 0x39	; 57
    2ac6:	80 68       	ori	r24, 0x80	; 128
    2ac8:	89 bf       	out	0x39, r24	; 57
    2aca:	08 95       	ret

00002acc <__vector_4>:
    2acc:	1f 92       	push	r1
    2ace:	0f 92       	push	r0
    2ad0:	0f b6       	in	r0, 0x3f	; 63
    2ad2:	0f 92       	push	r0
    2ad4:	11 24       	eor	r1, r1
    2ad6:	2f 93       	push	r18
    2ad8:	3f 93       	push	r19
    2ada:	4f 93       	push	r20
    2adc:	5f 93       	push	r21
    2ade:	6f 93       	push	r22
    2ae0:	7f 93       	push	r23
    2ae2:	8f 93       	push	r24
    2ae4:	9f 93       	push	r25
    2ae6:	af 93       	push	r26
    2ae8:	bf 93       	push	r27
    2aea:	ef 93       	push	r30
    2aec:	ff 93       	push	r31
    2aee:	0e 94 29 15 	call	0x2a52	; 0x2a52 <dispatchTimer>
    2af2:	ff 91       	pop	r31
    2af4:	ef 91       	pop	r30
    2af6:	bf 91       	pop	r27
    2af8:	af 91       	pop	r26
    2afa:	9f 91       	pop	r25
    2afc:	8f 91       	pop	r24
    2afe:	7f 91       	pop	r23
    2b00:	6f 91       	pop	r22
    2b02:	5f 91       	pop	r21
    2b04:	4f 91       	pop	r20
    2b06:	3f 91       	pop	r19
    2b08:	2f 91       	pop	r18
    2b0a:	0f 90       	pop	r0
    2b0c:	0f be       	out	0x3f, r0	; 63
    2b0e:	0f 90       	pop	r0
    2b10:	1f 90       	pop	r1
    2b12:	18 95       	reti

00002b14 <main>:
    2b14:	cf 93       	push	r28
    2b16:	df 93       	push	r29
    2b18:	cd b7       	in	r28, 0x3d	; 61
    2b1a:	de b7       	in	r29, 0x3e	; 62
    2b1c:	29 97       	sbiw	r28, 0x09	; 9
    2b1e:	0f b6       	in	r0, 0x3f	; 63
    2b20:	f8 94       	cli
    2b22:	de bf       	out	0x3e, r29	; 62
    2b24:	0f be       	out	0x3f, r0	; 63
    2b26:	cd bf       	out	0x3d, r28	; 61
    2b28:	80 e7       	ldi	r24, 0x70	; 112
    2b2a:	97 e1       	ldi	r25, 0x17	; 23
    2b2c:	20 e9       	ldi	r18, 0x90	; 144
    2b2e:	31 e0       	ldi	r19, 0x01	; 1
    2b30:	f9 01       	movw	r30, r18
    2b32:	31 97       	sbiw	r30, 0x01	; 1
    2b34:	f1 f7       	brne	.-4      	; 0x2b32 <main+0x1e>
    2b36:	01 97       	sbiw	r24, 0x01	; 1
    2b38:	00 97       	sbiw	r24, 0x00	; 0
    2b3a:	d1 f7       	brne	.-12     	; 0x2b30 <main+0x1c>
    2b3c:	89 e0       	ldi	r24, 0x09	; 9
    2b3e:	eb e6       	ldi	r30, 0x6B	; 107
    2b40:	f0 e0       	ldi	r31, 0x00	; 0
    2b42:	de 01       	movw	r26, r28
    2b44:	11 96       	adiw	r26, 0x01	; 1
    2b46:	01 90       	ld	r0, Z+
    2b48:	0d 92       	st	X+, r0
    2b4a:	8a 95       	dec	r24
    2b4c:	e1 f7       	brne	.-8      	; 0x2b46 <main+0x32>
    2b4e:	8c e0       	ldi	r24, 0x0C	; 12
    2b50:	0e 94 83 08 	call	0x1106	; 0x1106 <lcd_init>
    2b54:	69 e0       	ldi	r22, 0x09	; 9
    2b56:	ce 01       	movw	r24, r28
    2b58:	01 96       	adiw	r24, 0x01	; 1
    2b5a:	0e 94 ce 05 	call	0xb9c	; 0xb9c <ds_init>
    2b5e:	0e 94 ee 03 	call	0x7dc	; 0x7dc <seep_init>
    2b62:	0e 94 4d 06 	call	0xc9a	; 0xc9a <uart_init>
    2b66:	0e 94 68 09 	call	0x12d0	; 0x12d0 <rfm12_init>
    2b6a:	b8 9a       	sbi	0x17, 0	; 23
    2b6c:	49 e0       	ldi	r20, 0x09	; 9
    2b6e:	be 01       	movw	r22, r28
    2b70:	6f 5f       	subi	r22, 0xFF	; 255
    2b72:	7f 4f       	sbci	r23, 0xFF	; 255
    2b74:	89 e0       	ldi	r24, 0x09	; 9
    2b76:	0e 94 61 05 	call	0xac2	; 0xac2 <ds_read>
    2b7a:	89 81       	ldd	r24, Y+1	; 0x01
    2b7c:	80 93 a1 02 	sts	0x02A1, r24
    2b80:	8a 81       	ldd	r24, Y+2	; 0x02
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	98 2f       	mov	r25, r24
    2b86:	88 27       	eor	r24, r24
    2b88:	2b 81       	ldd	r18, Y+3	; 0x03
    2b8a:	82 0f       	add	r24, r18
    2b8c:	91 1d       	adc	r25, r1
    2b8e:	90 93 a3 02 	sts	0x02A3, r25
    2b92:	80 93 a2 02 	sts	0x02A2, r24
    2b96:	8c 81       	ldd	r24, Y+4	; 0x04
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	98 2f       	mov	r25, r24
    2b9c:	88 27       	eor	r24, r24
    2b9e:	2d 81       	ldd	r18, Y+5	; 0x05
    2ba0:	82 0f       	add	r24, r18
    2ba2:	91 1d       	adc	r25, r1
    2ba4:	90 93 50 02 	sts	0x0250, r25
    2ba8:	80 93 4f 02 	sts	0x024F, r24
    2bac:	8e 81       	ldd	r24, Y+6	; 0x06
    2bae:	80 93 bc 02 	sts	0x02BC, r24
    2bb2:	8f 81       	ldd	r24, Y+7	; 0x07
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	98 2f       	mov	r25, r24
    2bb8:	88 27       	eor	r24, r24
    2bba:	28 85       	ldd	r18, Y+8	; 0x08
    2bbc:	82 0f       	add	r24, r18
    2bbe:	91 1d       	adc	r25, r1
    2bc0:	90 93 bb 02 	sts	0x02BB, r25
    2bc4:	80 93 ba 02 	sts	0x02BA, r24
    2bc8:	89 85       	ldd	r24, Y+9	; 0x09
    2bca:	80 93 bd 02 	sts	0x02BD, r24
    2bce:	80 91 bc 02 	lds	r24, 0x02BC
    2bd2:	0e 94 b4 0a 	call	0x1568	; 0x1568 <rfm12_channel>
    2bd6:	80 e2       	ldi	r24, 0x20	; 32
    2bd8:	80 93 a4 02 	sts	0x02A4, r24
    2bdc:	80 93 b7 02 	sts	0x02B7, r24
    2be0:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <initMessages>
    2be4:	0e 94 b0 07 	call	0xf60	; 0xf60 <KBD_init>
    2be8:	62 e8       	ldi	r22, 0x82	; 130
    2bea:	7b e0       	ldi	r23, 0x0B	; 11
    2bec:	85 e0       	ldi	r24, 0x05	; 5
    2bee:	0e 94 78 13 	call	0x26f0	; 0x26f0 <setHandler>
    2bf2:	41 e0       	ldi	r20, 0x01	; 1
    2bf4:	50 e0       	ldi	r21, 0x00	; 0
    2bf6:	60 e0       	ldi	r22, 0x00	; 0
    2bf8:	85 e0       	ldi	r24, 0x05	; 5
    2bfa:	0e 94 bf 14 	call	0x297e	; 0x297e <setTimer>
    2bfe:	64 ef       	ldi	r22, 0xF4	; 244
    2c00:	7a e0       	ldi	r23, 0x0A	; 10
    2c02:	87 e0       	ldi	r24, 0x07	; 7
    2c04:	0e 94 78 13 	call	0x26f0	; 0x26f0 <setHandler>
    2c08:	40 e2       	ldi	r20, 0x20	; 32
    2c0a:	53 e0       	ldi	r21, 0x03	; 3
    2c0c:	60 e0       	ldi	r22, 0x00	; 0
    2c0e:	87 e0       	ldi	r24, 0x07	; 7
    2c10:	0e 94 bf 14 	call	0x297e	; 0x297e <setTimer>
    2c14:	60 e0       	ldi	r22, 0x00	; 0
    2c16:	87 e0       	ldi	r24, 0x07	; 7
    2c18:	0e 94 33 14 	call	0x2866	; 0x2866 <sendMessage>
    2c1c:	64 e0       	ldi	r22, 0x04	; 4
    2c1e:	77 e0       	ldi	r23, 0x07	; 7
    2c20:	88 e0       	ldi	r24, 0x08	; 8
    2c22:	0e 94 78 13 	call	0x26f0	; 0x26f0 <setHandler>
    2c26:	44 e1       	ldi	r20, 0x14	; 20
    2c28:	50 e0       	ldi	r21, 0x00	; 0
    2c2a:	60 e0       	ldi	r22, 0x00	; 0
    2c2c:	88 e0       	ldi	r24, 0x08	; 8
    2c2e:	0e 94 bf 14 	call	0x297e	; 0x297e <setTimer>
    2c32:	6a ee       	ldi	r22, 0xEA	; 234
    2c34:	7a e0       	ldi	r23, 0x0A	; 10
    2c36:	8a e0       	ldi	r24, 0x0A	; 10
    2c38:	0e 94 78 13 	call	0x26f0	; 0x26f0 <setHandler>
    2c3c:	63 e4       	ldi	r22, 0x43	; 67
    2c3e:	7b e0       	ldi	r23, 0x0B	; 11
    2c40:	89 e0       	ldi	r24, 0x09	; 9
    2c42:	0e 94 78 13 	call	0x26f0	; 0x26f0 <setHandler>
    2c46:	67 ee       	ldi	r22, 0xE7	; 231
    2c48:	7c e0       	ldi	r23, 0x0C	; 12
    2c4a:	86 e0       	ldi	r24, 0x06	; 6
    2c4c:	0e 94 78 13 	call	0x26f0	; 0x26f0 <setHandler>
    2c50:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <startMenuNull>
    2c54:	67 e5       	ldi	r22, 0x57	; 87
    2c56:	7b e0       	ldi	r23, 0x0B	; 11
    2c58:	8c e0       	ldi	r24, 0x0C	; 12
    2c5a:	0e 94 78 13 	call	0x26f0	; 0x26f0 <setHandler>
    2c5e:	44 ef       	ldi	r20, 0xF4	; 244
    2c60:	51 e0       	ldi	r21, 0x01	; 1
    2c62:	60 e0       	ldi	r22, 0x00	; 0
    2c64:	8c e0       	ldi	r24, 0x0C	; 12
    2c66:	0e 94 bf 14 	call	0x297e	; 0x297e <setTimer>
    2c6a:	6a e6       	ldi	r22, 0x6A	; 106
    2c6c:	73 e1       	ldi	r23, 0x13	; 19
    2c6e:	8b e0       	ldi	r24, 0x0B	; 11
    2c70:	0e 94 78 13 	call	0x26f0	; 0x26f0 <setHandler>
    2c74:	80 91 ba 02 	lds	r24, 0x02BA
    2c78:	90 91 bb 02 	lds	r25, 0x02BB
    2c7c:	08 96       	adiw	r24, 0x08	; 8
    2c7e:	8f 3f       	cpi	r24, 0xFF	; 255
    2c80:	99 4f       	sbci	r25, 0xF9	; 249
    2c82:	58 f0       	brcs	.+22     	; 0x2c9a <main+0x186>
    2c84:	61 e0       	ldi	r22, 0x01	; 1
    2c86:	80 e0       	ldi	r24, 0x00	; 0
    2c88:	0e 94 23 08 	call	0x1046	; 0x1046 <lcd_gotoxy>
    2c8c:	8e ea       	ldi	r24, 0xAE	; 174
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	0e 94 55 08 	call	0x10aa	; 0x10aa <lcd_puts>
    2c94:	81 e2       	ldi	r24, 0x21	; 33
    2c96:	80 93 b7 02 	sts	0x02B7, r24
    2c9a:	78 94       	sei
    2c9c:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <dispatchMessage>
    2ca0:	fd cf       	rjmp	.-6      	; 0x2c9c <main+0x188>

00002ca2 <__udivmodqi4>:
    2ca2:	99 1b       	sub	r25, r25
    2ca4:	79 e0       	ldi	r23, 0x09	; 9
    2ca6:	04 c0       	rjmp	.+8      	; 0x2cb0 <__udivmodqi4_ep>

00002ca8 <__udivmodqi4_loop>:
    2ca8:	99 1f       	adc	r25, r25
    2caa:	96 17       	cp	r25, r22
    2cac:	08 f0       	brcs	.+2      	; 0x2cb0 <__udivmodqi4_ep>
    2cae:	96 1b       	sub	r25, r22

00002cb0 <__udivmodqi4_ep>:
    2cb0:	88 1f       	adc	r24, r24
    2cb2:	7a 95       	dec	r23
    2cb4:	c9 f7       	brne	.-14     	; 0x2ca8 <__udivmodqi4_loop>
    2cb6:	80 95       	com	r24
    2cb8:	08 95       	ret

00002cba <__udivmodhi4>:
    2cba:	aa 1b       	sub	r26, r26
    2cbc:	bb 1b       	sub	r27, r27
    2cbe:	51 e1       	ldi	r21, 0x11	; 17
    2cc0:	07 c0       	rjmp	.+14     	; 0x2cd0 <__udivmodhi4_ep>

00002cc2 <__udivmodhi4_loop>:
    2cc2:	aa 1f       	adc	r26, r26
    2cc4:	bb 1f       	adc	r27, r27
    2cc6:	a6 17       	cp	r26, r22
    2cc8:	b7 07       	cpc	r27, r23
    2cca:	10 f0       	brcs	.+4      	; 0x2cd0 <__udivmodhi4_ep>
    2ccc:	a6 1b       	sub	r26, r22
    2cce:	b7 0b       	sbc	r27, r23

00002cd0 <__udivmodhi4_ep>:
    2cd0:	88 1f       	adc	r24, r24
    2cd2:	99 1f       	adc	r25, r25
    2cd4:	5a 95       	dec	r21
    2cd6:	a9 f7       	brne	.-22     	; 0x2cc2 <__udivmodhi4_loop>
    2cd8:	80 95       	com	r24
    2cda:	90 95       	com	r25
    2cdc:	bc 01       	movw	r22, r24
    2cde:	cd 01       	movw	r24, r26
    2ce0:	08 95       	ret

00002ce2 <__tablejump2__>:
    2ce2:	ee 0f       	add	r30, r30
    2ce4:	ff 1f       	adc	r31, r31

00002ce6 <__tablejump__>:
    2ce6:	05 90       	lpm	r0, Z+
    2ce8:	f4 91       	lpm	r31, Z
    2cea:	e0 2d       	mov	r30, r0
    2cec:	09 94       	ijmp

00002cee <__cmpsf2>:
    2cee:	40 d0       	rcall	.+128    	; 0x2d70 <__fp_cmp>
    2cf0:	08 f4       	brcc	.+2      	; 0x2cf4 <__cmpsf2+0x6>
    2cf2:	81 e0       	ldi	r24, 0x01	; 1
    2cf4:	08 95       	ret

00002cf6 <__floatunsisf>:
    2cf6:	e8 94       	clt
    2cf8:	09 c0       	rjmp	.+18     	; 0x2d0c <__floatsisf+0x12>

00002cfa <__floatsisf>:
    2cfa:	97 fb       	bst	r25, 7
    2cfc:	3e f4       	brtc	.+14     	; 0x2d0c <__floatsisf+0x12>
    2cfe:	90 95       	com	r25
    2d00:	80 95       	com	r24
    2d02:	70 95       	com	r23
    2d04:	61 95       	neg	r22
    2d06:	7f 4f       	sbci	r23, 0xFF	; 255
    2d08:	8f 4f       	sbci	r24, 0xFF	; 255
    2d0a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d0c:	99 23       	and	r25, r25
    2d0e:	a9 f0       	breq	.+42     	; 0x2d3a <__floatsisf+0x40>
    2d10:	f9 2f       	mov	r31, r25
    2d12:	96 e9       	ldi	r25, 0x96	; 150
    2d14:	bb 27       	eor	r27, r27
    2d16:	93 95       	inc	r25
    2d18:	f6 95       	lsr	r31
    2d1a:	87 95       	ror	r24
    2d1c:	77 95       	ror	r23
    2d1e:	67 95       	ror	r22
    2d20:	b7 95       	ror	r27
    2d22:	f1 11       	cpse	r31, r1
    2d24:	f8 cf       	rjmp	.-16     	; 0x2d16 <__floatsisf+0x1c>
    2d26:	fa f4       	brpl	.+62     	; 0x2d66 <__floatsisf+0x6c>
    2d28:	bb 0f       	add	r27, r27
    2d2a:	11 f4       	brne	.+4      	; 0x2d30 <__floatsisf+0x36>
    2d2c:	60 ff       	sbrs	r22, 0
    2d2e:	1b c0       	rjmp	.+54     	; 0x2d66 <__floatsisf+0x6c>
    2d30:	6f 5f       	subi	r22, 0xFF	; 255
    2d32:	7f 4f       	sbci	r23, 0xFF	; 255
    2d34:	8f 4f       	sbci	r24, 0xFF	; 255
    2d36:	9f 4f       	sbci	r25, 0xFF	; 255
    2d38:	16 c0       	rjmp	.+44     	; 0x2d66 <__floatsisf+0x6c>
    2d3a:	88 23       	and	r24, r24
    2d3c:	11 f0       	breq	.+4      	; 0x2d42 <__floatsisf+0x48>
    2d3e:	96 e9       	ldi	r25, 0x96	; 150
    2d40:	11 c0       	rjmp	.+34     	; 0x2d64 <__floatsisf+0x6a>
    2d42:	77 23       	and	r23, r23
    2d44:	21 f0       	breq	.+8      	; 0x2d4e <__floatsisf+0x54>
    2d46:	9e e8       	ldi	r25, 0x8E	; 142
    2d48:	87 2f       	mov	r24, r23
    2d4a:	76 2f       	mov	r23, r22
    2d4c:	05 c0       	rjmp	.+10     	; 0x2d58 <__floatsisf+0x5e>
    2d4e:	66 23       	and	r22, r22
    2d50:	71 f0       	breq	.+28     	; 0x2d6e <__floatsisf+0x74>
    2d52:	96 e8       	ldi	r25, 0x86	; 134
    2d54:	86 2f       	mov	r24, r22
    2d56:	70 e0       	ldi	r23, 0x00	; 0
    2d58:	60 e0       	ldi	r22, 0x00	; 0
    2d5a:	2a f0       	brmi	.+10     	; 0x2d66 <__floatsisf+0x6c>
    2d5c:	9a 95       	dec	r25
    2d5e:	66 0f       	add	r22, r22
    2d60:	77 1f       	adc	r23, r23
    2d62:	88 1f       	adc	r24, r24
    2d64:	da f7       	brpl	.-10     	; 0x2d5c <__floatsisf+0x62>
    2d66:	88 0f       	add	r24, r24
    2d68:	96 95       	lsr	r25
    2d6a:	87 95       	ror	r24
    2d6c:	97 f9       	bld	r25, 7
    2d6e:	08 95       	ret

00002d70 <__fp_cmp>:
    2d70:	99 0f       	add	r25, r25
    2d72:	00 08       	sbc	r0, r0
    2d74:	55 0f       	add	r21, r21
    2d76:	aa 0b       	sbc	r26, r26
    2d78:	e0 e8       	ldi	r30, 0x80	; 128
    2d7a:	fe ef       	ldi	r31, 0xFE	; 254
    2d7c:	16 16       	cp	r1, r22
    2d7e:	17 06       	cpc	r1, r23
    2d80:	e8 07       	cpc	r30, r24
    2d82:	f9 07       	cpc	r31, r25
    2d84:	c0 f0       	brcs	.+48     	; 0x2db6 <__fp_cmp+0x46>
    2d86:	12 16       	cp	r1, r18
    2d88:	13 06       	cpc	r1, r19
    2d8a:	e4 07       	cpc	r30, r20
    2d8c:	f5 07       	cpc	r31, r21
    2d8e:	98 f0       	brcs	.+38     	; 0x2db6 <__fp_cmp+0x46>
    2d90:	62 1b       	sub	r22, r18
    2d92:	73 0b       	sbc	r23, r19
    2d94:	84 0b       	sbc	r24, r20
    2d96:	95 0b       	sbc	r25, r21
    2d98:	39 f4       	brne	.+14     	; 0x2da8 <__fp_cmp+0x38>
    2d9a:	0a 26       	eor	r0, r26
    2d9c:	61 f0       	breq	.+24     	; 0x2db6 <__fp_cmp+0x46>
    2d9e:	23 2b       	or	r18, r19
    2da0:	24 2b       	or	r18, r20
    2da2:	25 2b       	or	r18, r21
    2da4:	21 f4       	brne	.+8      	; 0x2dae <__fp_cmp+0x3e>
    2da6:	08 95       	ret
    2da8:	0a 26       	eor	r0, r26
    2daa:	09 f4       	brne	.+2      	; 0x2dae <__fp_cmp+0x3e>
    2dac:	a1 40       	sbci	r26, 0x01	; 1
    2dae:	a6 95       	lsr	r26
    2db0:	8f ef       	ldi	r24, 0xFF	; 255
    2db2:	81 1d       	adc	r24, r1
    2db4:	81 1d       	adc	r24, r1
    2db6:	08 95       	ret

00002db8 <strcpy>:
    2db8:	fb 01       	movw	r30, r22
    2dba:	dc 01       	movw	r26, r24
    2dbc:	01 90       	ld	r0, Z+
    2dbe:	0d 92       	st	X+, r0
    2dc0:	00 20       	and	r0, r0
    2dc2:	e1 f7       	brne	.-8      	; 0x2dbc <strcpy+0x4>
    2dc4:	08 95       	ret

00002dc6 <sprintf>:
    2dc6:	ae e0       	ldi	r26, 0x0E	; 14
    2dc8:	b0 e0       	ldi	r27, 0x00	; 0
    2dca:	e9 ee       	ldi	r30, 0xE9	; 233
    2dcc:	f6 e1       	ldi	r31, 0x16	; 22
    2dce:	0c 94 8b 19 	jmp	0x3316	; 0x3316 <__prologue_saves__+0x1c>
    2dd2:	0d 89       	ldd	r16, Y+21	; 0x15
    2dd4:	1e 89       	ldd	r17, Y+22	; 0x16
    2dd6:	86 e0       	ldi	r24, 0x06	; 6
    2dd8:	8c 83       	std	Y+4, r24	; 0x04
    2dda:	1a 83       	std	Y+2, r17	; 0x02
    2ddc:	09 83       	std	Y+1, r16	; 0x01
    2dde:	8f ef       	ldi	r24, 0xFF	; 255
    2de0:	9f e7       	ldi	r25, 0x7F	; 127
    2de2:	9e 83       	std	Y+6, r25	; 0x06
    2de4:	8d 83       	std	Y+5, r24	; 0x05
    2de6:	ae 01       	movw	r20, r28
    2de8:	47 5e       	subi	r20, 0xE7	; 231
    2dea:	5f 4f       	sbci	r21, 0xFF	; 255
    2dec:	6f 89       	ldd	r22, Y+23	; 0x17
    2dee:	78 8d       	ldd	r23, Y+24	; 0x18
    2df0:	ce 01       	movw	r24, r28
    2df2:	01 96       	adiw	r24, 0x01	; 1
    2df4:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <vfprintf>
    2df8:	ef 81       	ldd	r30, Y+7	; 0x07
    2dfa:	f8 85       	ldd	r31, Y+8	; 0x08
    2dfc:	e0 0f       	add	r30, r16
    2dfe:	f1 1f       	adc	r31, r17
    2e00:	10 82       	st	Z, r1
    2e02:	2e 96       	adiw	r28, 0x0e	; 14
    2e04:	e4 e0       	ldi	r30, 0x04	; 4
    2e06:	0c 94 a7 19 	jmp	0x334e	; 0x334e <__epilogue_restores__+0x1c>

00002e0a <vfprintf>:
    2e0a:	ac e0       	ldi	r26, 0x0C	; 12
    2e0c:	b0 e0       	ldi	r27, 0x00	; 0
    2e0e:	eb e0       	ldi	r30, 0x0B	; 11
    2e10:	f7 e1       	ldi	r31, 0x17	; 23
    2e12:	0c 94 7d 19 	jmp	0x32fa	; 0x32fa <__prologue_saves__>
    2e16:	7c 01       	movw	r14, r24
    2e18:	6b 01       	movw	r12, r22
    2e1a:	8a 01       	movw	r16, r20
    2e1c:	fc 01       	movw	r30, r24
    2e1e:	17 82       	std	Z+7, r1	; 0x07
    2e20:	16 82       	std	Z+6, r1	; 0x06
    2e22:	83 81       	ldd	r24, Z+3	; 0x03
    2e24:	81 ff       	sbrs	r24, 1
    2e26:	bd c1       	rjmp	.+890    	; 0x31a2 <vfprintf+0x398>
    2e28:	ce 01       	movw	r24, r28
    2e2a:	01 96       	adiw	r24, 0x01	; 1
    2e2c:	4c 01       	movw	r8, r24
    2e2e:	f7 01       	movw	r30, r14
    2e30:	93 81       	ldd	r25, Z+3	; 0x03
    2e32:	f6 01       	movw	r30, r12
    2e34:	93 fd       	sbrc	r25, 3
    2e36:	85 91       	lpm	r24, Z+
    2e38:	93 ff       	sbrs	r25, 3
    2e3a:	81 91       	ld	r24, Z+
    2e3c:	6f 01       	movw	r12, r30
    2e3e:	88 23       	and	r24, r24
    2e40:	09 f4       	brne	.+2      	; 0x2e44 <vfprintf+0x3a>
    2e42:	ab c1       	rjmp	.+854    	; 0x319a <vfprintf+0x390>
    2e44:	85 32       	cpi	r24, 0x25	; 37
    2e46:	39 f4       	brne	.+14     	; 0x2e56 <vfprintf+0x4c>
    2e48:	93 fd       	sbrc	r25, 3
    2e4a:	85 91       	lpm	r24, Z+
    2e4c:	93 ff       	sbrs	r25, 3
    2e4e:	81 91       	ld	r24, Z+
    2e50:	6f 01       	movw	r12, r30
    2e52:	85 32       	cpi	r24, 0x25	; 37
    2e54:	29 f4       	brne	.+10     	; 0x2e60 <vfprintf+0x56>
    2e56:	b7 01       	movw	r22, r14
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	0e 94 ed 18 	call	0x31da	; 0x31da <fputc>
    2e5e:	e7 cf       	rjmp	.-50     	; 0x2e2e <vfprintf+0x24>
    2e60:	51 2c       	mov	r5, r1
    2e62:	31 2c       	mov	r3, r1
    2e64:	20 e0       	ldi	r18, 0x00	; 0
    2e66:	20 32       	cpi	r18, 0x20	; 32
    2e68:	a0 f4       	brcc	.+40     	; 0x2e92 <vfprintf+0x88>
    2e6a:	8b 32       	cpi	r24, 0x2B	; 43
    2e6c:	69 f0       	breq	.+26     	; 0x2e88 <vfprintf+0x7e>
    2e6e:	30 f4       	brcc	.+12     	; 0x2e7c <vfprintf+0x72>
    2e70:	80 32       	cpi	r24, 0x20	; 32
    2e72:	59 f0       	breq	.+22     	; 0x2e8a <vfprintf+0x80>
    2e74:	83 32       	cpi	r24, 0x23	; 35
    2e76:	69 f4       	brne	.+26     	; 0x2e92 <vfprintf+0x88>
    2e78:	20 61       	ori	r18, 0x10	; 16
    2e7a:	2c c0       	rjmp	.+88     	; 0x2ed4 <vfprintf+0xca>
    2e7c:	8d 32       	cpi	r24, 0x2D	; 45
    2e7e:	39 f0       	breq	.+14     	; 0x2e8e <vfprintf+0x84>
    2e80:	80 33       	cpi	r24, 0x30	; 48
    2e82:	39 f4       	brne	.+14     	; 0x2e92 <vfprintf+0x88>
    2e84:	21 60       	ori	r18, 0x01	; 1
    2e86:	26 c0       	rjmp	.+76     	; 0x2ed4 <vfprintf+0xca>
    2e88:	22 60       	ori	r18, 0x02	; 2
    2e8a:	24 60       	ori	r18, 0x04	; 4
    2e8c:	23 c0       	rjmp	.+70     	; 0x2ed4 <vfprintf+0xca>
    2e8e:	28 60       	ori	r18, 0x08	; 8
    2e90:	21 c0       	rjmp	.+66     	; 0x2ed4 <vfprintf+0xca>
    2e92:	27 fd       	sbrc	r18, 7
    2e94:	27 c0       	rjmp	.+78     	; 0x2ee4 <vfprintf+0xda>
    2e96:	30 ed       	ldi	r19, 0xD0	; 208
    2e98:	38 0f       	add	r19, r24
    2e9a:	3a 30       	cpi	r19, 0x0A	; 10
    2e9c:	78 f4       	brcc	.+30     	; 0x2ebc <vfprintf+0xb2>
    2e9e:	26 ff       	sbrs	r18, 6
    2ea0:	06 c0       	rjmp	.+12     	; 0x2eae <vfprintf+0xa4>
    2ea2:	fa e0       	ldi	r31, 0x0A	; 10
    2ea4:	5f 9e       	mul	r5, r31
    2ea6:	30 0d       	add	r19, r0
    2ea8:	11 24       	eor	r1, r1
    2eaa:	53 2e       	mov	r5, r19
    2eac:	13 c0       	rjmp	.+38     	; 0x2ed4 <vfprintf+0xca>
    2eae:	8a e0       	ldi	r24, 0x0A	; 10
    2eb0:	38 9e       	mul	r3, r24
    2eb2:	30 0d       	add	r19, r0
    2eb4:	11 24       	eor	r1, r1
    2eb6:	33 2e       	mov	r3, r19
    2eb8:	20 62       	ori	r18, 0x20	; 32
    2eba:	0c c0       	rjmp	.+24     	; 0x2ed4 <vfprintf+0xca>
    2ebc:	8e 32       	cpi	r24, 0x2E	; 46
    2ebe:	21 f4       	brne	.+8      	; 0x2ec8 <vfprintf+0xbe>
    2ec0:	26 fd       	sbrc	r18, 6
    2ec2:	6b c1       	rjmp	.+726    	; 0x319a <vfprintf+0x390>
    2ec4:	20 64       	ori	r18, 0x40	; 64
    2ec6:	06 c0       	rjmp	.+12     	; 0x2ed4 <vfprintf+0xca>
    2ec8:	8c 36       	cpi	r24, 0x6C	; 108
    2eca:	11 f4       	brne	.+4      	; 0x2ed0 <vfprintf+0xc6>
    2ecc:	20 68       	ori	r18, 0x80	; 128
    2ece:	02 c0       	rjmp	.+4      	; 0x2ed4 <vfprintf+0xca>
    2ed0:	88 36       	cpi	r24, 0x68	; 104
    2ed2:	41 f4       	brne	.+16     	; 0x2ee4 <vfprintf+0xda>
    2ed4:	f6 01       	movw	r30, r12
    2ed6:	93 fd       	sbrc	r25, 3
    2ed8:	85 91       	lpm	r24, Z+
    2eda:	93 ff       	sbrs	r25, 3
    2edc:	81 91       	ld	r24, Z+
    2ede:	6f 01       	movw	r12, r30
    2ee0:	81 11       	cpse	r24, r1
    2ee2:	c1 cf       	rjmp	.-126    	; 0x2e66 <vfprintf+0x5c>
    2ee4:	98 2f       	mov	r25, r24
    2ee6:	9f 7d       	andi	r25, 0xDF	; 223
    2ee8:	95 54       	subi	r25, 0x45	; 69
    2eea:	93 30       	cpi	r25, 0x03	; 3
    2eec:	28 f4       	brcc	.+10     	; 0x2ef8 <vfprintf+0xee>
    2eee:	0c 5f       	subi	r16, 0xFC	; 252
    2ef0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ef2:	ff e3       	ldi	r31, 0x3F	; 63
    2ef4:	f9 83       	std	Y+1, r31	; 0x01
    2ef6:	0d c0       	rjmp	.+26     	; 0x2f12 <vfprintf+0x108>
    2ef8:	83 36       	cpi	r24, 0x63	; 99
    2efa:	31 f0       	breq	.+12     	; 0x2f08 <vfprintf+0xfe>
    2efc:	83 37       	cpi	r24, 0x73	; 115
    2efe:	71 f0       	breq	.+28     	; 0x2f1c <vfprintf+0x112>
    2f00:	83 35       	cpi	r24, 0x53	; 83
    2f02:	09 f0       	breq	.+2      	; 0x2f06 <vfprintf+0xfc>
    2f04:	5b c0       	rjmp	.+182    	; 0x2fbc <vfprintf+0x1b2>
    2f06:	22 c0       	rjmp	.+68     	; 0x2f4c <vfprintf+0x142>
    2f08:	f8 01       	movw	r30, r16
    2f0a:	80 81       	ld	r24, Z
    2f0c:	89 83       	std	Y+1, r24	; 0x01
    2f0e:	0e 5f       	subi	r16, 0xFE	; 254
    2f10:	1f 4f       	sbci	r17, 0xFF	; 255
    2f12:	44 24       	eor	r4, r4
    2f14:	43 94       	inc	r4
    2f16:	51 2c       	mov	r5, r1
    2f18:	54 01       	movw	r10, r8
    2f1a:	15 c0       	rjmp	.+42     	; 0x2f46 <vfprintf+0x13c>
    2f1c:	38 01       	movw	r6, r16
    2f1e:	f2 e0       	ldi	r31, 0x02	; 2
    2f20:	6f 0e       	add	r6, r31
    2f22:	71 1c       	adc	r7, r1
    2f24:	f8 01       	movw	r30, r16
    2f26:	a0 80       	ld	r10, Z
    2f28:	b1 80       	ldd	r11, Z+1	; 0x01
    2f2a:	26 ff       	sbrs	r18, 6
    2f2c:	03 c0       	rjmp	.+6      	; 0x2f34 <vfprintf+0x12a>
    2f2e:	65 2d       	mov	r22, r5
    2f30:	70 e0       	ldi	r23, 0x00	; 0
    2f32:	02 c0       	rjmp	.+4      	; 0x2f38 <vfprintf+0x12e>
    2f34:	6f ef       	ldi	r22, 0xFF	; 255
    2f36:	7f ef       	ldi	r23, 0xFF	; 255
    2f38:	c5 01       	movw	r24, r10
    2f3a:	2c 87       	std	Y+12, r18	; 0x0c
    2f3c:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <strnlen>
    2f40:	2c 01       	movw	r4, r24
    2f42:	83 01       	movw	r16, r6
    2f44:	2c 85       	ldd	r18, Y+12	; 0x0c
    2f46:	2f 77       	andi	r18, 0x7F	; 127
    2f48:	22 2e       	mov	r2, r18
    2f4a:	17 c0       	rjmp	.+46     	; 0x2f7a <vfprintf+0x170>
    2f4c:	38 01       	movw	r6, r16
    2f4e:	f2 e0       	ldi	r31, 0x02	; 2
    2f50:	6f 0e       	add	r6, r31
    2f52:	71 1c       	adc	r7, r1
    2f54:	f8 01       	movw	r30, r16
    2f56:	a0 80       	ld	r10, Z
    2f58:	b1 80       	ldd	r11, Z+1	; 0x01
    2f5a:	26 ff       	sbrs	r18, 6
    2f5c:	03 c0       	rjmp	.+6      	; 0x2f64 <vfprintf+0x15a>
    2f5e:	65 2d       	mov	r22, r5
    2f60:	70 e0       	ldi	r23, 0x00	; 0
    2f62:	02 c0       	rjmp	.+4      	; 0x2f68 <vfprintf+0x15e>
    2f64:	6f ef       	ldi	r22, 0xFF	; 255
    2f66:	7f ef       	ldi	r23, 0xFF	; 255
    2f68:	c5 01       	movw	r24, r10
    2f6a:	2c 87       	std	Y+12, r18	; 0x0c
    2f6c:	0e 94 d7 18 	call	0x31ae	; 0x31ae <strnlen_P>
    2f70:	2c 01       	movw	r4, r24
    2f72:	2c 85       	ldd	r18, Y+12	; 0x0c
    2f74:	20 68       	ori	r18, 0x80	; 128
    2f76:	22 2e       	mov	r2, r18
    2f78:	83 01       	movw	r16, r6
    2f7a:	23 fc       	sbrc	r2, 3
    2f7c:	1b c0       	rjmp	.+54     	; 0x2fb4 <vfprintf+0x1aa>
    2f7e:	83 2d       	mov	r24, r3
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	48 16       	cp	r4, r24
    2f84:	59 06       	cpc	r5, r25
    2f86:	b0 f4       	brcc	.+44     	; 0x2fb4 <vfprintf+0x1aa>
    2f88:	b7 01       	movw	r22, r14
    2f8a:	80 e2       	ldi	r24, 0x20	; 32
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	0e 94 ed 18 	call	0x31da	; 0x31da <fputc>
    2f92:	3a 94       	dec	r3
    2f94:	f4 cf       	rjmp	.-24     	; 0x2f7e <vfprintf+0x174>
    2f96:	f5 01       	movw	r30, r10
    2f98:	27 fc       	sbrc	r2, 7
    2f9a:	85 91       	lpm	r24, Z+
    2f9c:	27 fe       	sbrs	r2, 7
    2f9e:	81 91       	ld	r24, Z+
    2fa0:	5f 01       	movw	r10, r30
    2fa2:	b7 01       	movw	r22, r14
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	0e 94 ed 18 	call	0x31da	; 0x31da <fputc>
    2faa:	31 10       	cpse	r3, r1
    2fac:	3a 94       	dec	r3
    2fae:	f1 e0       	ldi	r31, 0x01	; 1
    2fb0:	4f 1a       	sub	r4, r31
    2fb2:	51 08       	sbc	r5, r1
    2fb4:	41 14       	cp	r4, r1
    2fb6:	51 04       	cpc	r5, r1
    2fb8:	71 f7       	brne	.-36     	; 0x2f96 <vfprintf+0x18c>
    2fba:	e5 c0       	rjmp	.+458    	; 0x3186 <vfprintf+0x37c>
    2fbc:	84 36       	cpi	r24, 0x64	; 100
    2fbe:	11 f0       	breq	.+4      	; 0x2fc4 <vfprintf+0x1ba>
    2fc0:	89 36       	cpi	r24, 0x69	; 105
    2fc2:	39 f5       	brne	.+78     	; 0x3012 <vfprintf+0x208>
    2fc4:	f8 01       	movw	r30, r16
    2fc6:	27 ff       	sbrs	r18, 7
    2fc8:	07 c0       	rjmp	.+14     	; 0x2fd8 <vfprintf+0x1ce>
    2fca:	60 81       	ld	r22, Z
    2fcc:	71 81       	ldd	r23, Z+1	; 0x01
    2fce:	82 81       	ldd	r24, Z+2	; 0x02
    2fd0:	93 81       	ldd	r25, Z+3	; 0x03
    2fd2:	0c 5f       	subi	r16, 0xFC	; 252
    2fd4:	1f 4f       	sbci	r17, 0xFF	; 255
    2fd6:	08 c0       	rjmp	.+16     	; 0x2fe8 <vfprintf+0x1de>
    2fd8:	60 81       	ld	r22, Z
    2fda:	71 81       	ldd	r23, Z+1	; 0x01
    2fdc:	88 27       	eor	r24, r24
    2fde:	77 fd       	sbrc	r23, 7
    2fe0:	80 95       	com	r24
    2fe2:	98 2f       	mov	r25, r24
    2fe4:	0e 5f       	subi	r16, 0xFE	; 254
    2fe6:	1f 4f       	sbci	r17, 0xFF	; 255
    2fe8:	2f 76       	andi	r18, 0x6F	; 111
    2fea:	b2 2e       	mov	r11, r18
    2fec:	97 ff       	sbrs	r25, 7
    2fee:	09 c0       	rjmp	.+18     	; 0x3002 <vfprintf+0x1f8>
    2ff0:	90 95       	com	r25
    2ff2:	80 95       	com	r24
    2ff4:	70 95       	com	r23
    2ff6:	61 95       	neg	r22
    2ff8:	7f 4f       	sbci	r23, 0xFF	; 255
    2ffa:	8f 4f       	sbci	r24, 0xFF	; 255
    2ffc:	9f 4f       	sbci	r25, 0xFF	; 255
    2ffe:	20 68       	ori	r18, 0x80	; 128
    3000:	b2 2e       	mov	r11, r18
    3002:	2a e0       	ldi	r18, 0x0A	; 10
    3004:	30 e0       	ldi	r19, 0x00	; 0
    3006:	a4 01       	movw	r20, r8
    3008:	0e 94 1f 19 	call	0x323e	; 0x323e <__ultoa_invert>
    300c:	a8 2e       	mov	r10, r24
    300e:	a8 18       	sub	r10, r8
    3010:	44 c0       	rjmp	.+136    	; 0x309a <vfprintf+0x290>
    3012:	85 37       	cpi	r24, 0x75	; 117
    3014:	29 f4       	brne	.+10     	; 0x3020 <vfprintf+0x216>
    3016:	2f 7e       	andi	r18, 0xEF	; 239
    3018:	b2 2e       	mov	r11, r18
    301a:	2a e0       	ldi	r18, 0x0A	; 10
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	25 c0       	rjmp	.+74     	; 0x306a <vfprintf+0x260>
    3020:	f2 2f       	mov	r31, r18
    3022:	f9 7f       	andi	r31, 0xF9	; 249
    3024:	bf 2e       	mov	r11, r31
    3026:	8f 36       	cpi	r24, 0x6F	; 111
    3028:	c1 f0       	breq	.+48     	; 0x305a <vfprintf+0x250>
    302a:	18 f4       	brcc	.+6      	; 0x3032 <vfprintf+0x228>
    302c:	88 35       	cpi	r24, 0x58	; 88
    302e:	79 f0       	breq	.+30     	; 0x304e <vfprintf+0x244>
    3030:	b4 c0       	rjmp	.+360    	; 0x319a <vfprintf+0x390>
    3032:	80 37       	cpi	r24, 0x70	; 112
    3034:	19 f0       	breq	.+6      	; 0x303c <vfprintf+0x232>
    3036:	88 37       	cpi	r24, 0x78	; 120
    3038:	21 f0       	breq	.+8      	; 0x3042 <vfprintf+0x238>
    303a:	af c0       	rjmp	.+350    	; 0x319a <vfprintf+0x390>
    303c:	2f 2f       	mov	r18, r31
    303e:	20 61       	ori	r18, 0x10	; 16
    3040:	b2 2e       	mov	r11, r18
    3042:	b4 fe       	sbrs	r11, 4
    3044:	0d c0       	rjmp	.+26     	; 0x3060 <vfprintf+0x256>
    3046:	8b 2d       	mov	r24, r11
    3048:	84 60       	ori	r24, 0x04	; 4
    304a:	b8 2e       	mov	r11, r24
    304c:	09 c0       	rjmp	.+18     	; 0x3060 <vfprintf+0x256>
    304e:	24 ff       	sbrs	r18, 4
    3050:	0a c0       	rjmp	.+20     	; 0x3066 <vfprintf+0x25c>
    3052:	9f 2f       	mov	r25, r31
    3054:	96 60       	ori	r25, 0x06	; 6
    3056:	b9 2e       	mov	r11, r25
    3058:	06 c0       	rjmp	.+12     	; 0x3066 <vfprintf+0x25c>
    305a:	28 e0       	ldi	r18, 0x08	; 8
    305c:	30 e0       	ldi	r19, 0x00	; 0
    305e:	05 c0       	rjmp	.+10     	; 0x306a <vfprintf+0x260>
    3060:	20 e1       	ldi	r18, 0x10	; 16
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	02 c0       	rjmp	.+4      	; 0x306a <vfprintf+0x260>
    3066:	20 e1       	ldi	r18, 0x10	; 16
    3068:	32 e0       	ldi	r19, 0x02	; 2
    306a:	f8 01       	movw	r30, r16
    306c:	b7 fe       	sbrs	r11, 7
    306e:	07 c0       	rjmp	.+14     	; 0x307e <vfprintf+0x274>
    3070:	60 81       	ld	r22, Z
    3072:	71 81       	ldd	r23, Z+1	; 0x01
    3074:	82 81       	ldd	r24, Z+2	; 0x02
    3076:	93 81       	ldd	r25, Z+3	; 0x03
    3078:	0c 5f       	subi	r16, 0xFC	; 252
    307a:	1f 4f       	sbci	r17, 0xFF	; 255
    307c:	06 c0       	rjmp	.+12     	; 0x308a <vfprintf+0x280>
    307e:	60 81       	ld	r22, Z
    3080:	71 81       	ldd	r23, Z+1	; 0x01
    3082:	80 e0       	ldi	r24, 0x00	; 0
    3084:	90 e0       	ldi	r25, 0x00	; 0
    3086:	0e 5f       	subi	r16, 0xFE	; 254
    3088:	1f 4f       	sbci	r17, 0xFF	; 255
    308a:	a4 01       	movw	r20, r8
    308c:	0e 94 1f 19 	call	0x323e	; 0x323e <__ultoa_invert>
    3090:	a8 2e       	mov	r10, r24
    3092:	a8 18       	sub	r10, r8
    3094:	fb 2d       	mov	r31, r11
    3096:	ff 77       	andi	r31, 0x7F	; 127
    3098:	bf 2e       	mov	r11, r31
    309a:	b6 fe       	sbrs	r11, 6
    309c:	0b c0       	rjmp	.+22     	; 0x30b4 <vfprintf+0x2aa>
    309e:	2b 2d       	mov	r18, r11
    30a0:	2e 7f       	andi	r18, 0xFE	; 254
    30a2:	a5 14       	cp	r10, r5
    30a4:	50 f4       	brcc	.+20     	; 0x30ba <vfprintf+0x2b0>
    30a6:	b4 fe       	sbrs	r11, 4
    30a8:	0a c0       	rjmp	.+20     	; 0x30be <vfprintf+0x2b4>
    30aa:	b2 fc       	sbrc	r11, 2
    30ac:	08 c0       	rjmp	.+16     	; 0x30be <vfprintf+0x2b4>
    30ae:	2b 2d       	mov	r18, r11
    30b0:	2e 7e       	andi	r18, 0xEE	; 238
    30b2:	05 c0       	rjmp	.+10     	; 0x30be <vfprintf+0x2b4>
    30b4:	7a 2c       	mov	r7, r10
    30b6:	2b 2d       	mov	r18, r11
    30b8:	03 c0       	rjmp	.+6      	; 0x30c0 <vfprintf+0x2b6>
    30ba:	7a 2c       	mov	r7, r10
    30bc:	01 c0       	rjmp	.+2      	; 0x30c0 <vfprintf+0x2b6>
    30be:	75 2c       	mov	r7, r5
    30c0:	24 ff       	sbrs	r18, 4
    30c2:	0d c0       	rjmp	.+26     	; 0x30de <vfprintf+0x2d4>
    30c4:	fe 01       	movw	r30, r28
    30c6:	ea 0d       	add	r30, r10
    30c8:	f1 1d       	adc	r31, r1
    30ca:	80 81       	ld	r24, Z
    30cc:	80 33       	cpi	r24, 0x30	; 48
    30ce:	11 f4       	brne	.+4      	; 0x30d4 <vfprintf+0x2ca>
    30d0:	29 7e       	andi	r18, 0xE9	; 233
    30d2:	09 c0       	rjmp	.+18     	; 0x30e6 <vfprintf+0x2dc>
    30d4:	22 ff       	sbrs	r18, 2
    30d6:	06 c0       	rjmp	.+12     	; 0x30e4 <vfprintf+0x2da>
    30d8:	73 94       	inc	r7
    30da:	73 94       	inc	r7
    30dc:	04 c0       	rjmp	.+8      	; 0x30e6 <vfprintf+0x2dc>
    30de:	82 2f       	mov	r24, r18
    30e0:	86 78       	andi	r24, 0x86	; 134
    30e2:	09 f0       	breq	.+2      	; 0x30e6 <vfprintf+0x2dc>
    30e4:	73 94       	inc	r7
    30e6:	23 fd       	sbrc	r18, 3
    30e8:	13 c0       	rjmp	.+38     	; 0x3110 <vfprintf+0x306>
    30ea:	20 ff       	sbrs	r18, 0
    30ec:	06 c0       	rjmp	.+12     	; 0x30fa <vfprintf+0x2f0>
    30ee:	5a 2c       	mov	r5, r10
    30f0:	73 14       	cp	r7, r3
    30f2:	18 f4       	brcc	.+6      	; 0x30fa <vfprintf+0x2f0>
    30f4:	53 0c       	add	r5, r3
    30f6:	57 18       	sub	r5, r7
    30f8:	73 2c       	mov	r7, r3
    30fa:	73 14       	cp	r7, r3
    30fc:	68 f4       	brcc	.+26     	; 0x3118 <vfprintf+0x30e>
    30fe:	b7 01       	movw	r22, r14
    3100:	80 e2       	ldi	r24, 0x20	; 32
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	2c 87       	std	Y+12, r18	; 0x0c
    3106:	0e 94 ed 18 	call	0x31da	; 0x31da <fputc>
    310a:	73 94       	inc	r7
    310c:	2c 85       	ldd	r18, Y+12	; 0x0c
    310e:	f5 cf       	rjmp	.-22     	; 0x30fa <vfprintf+0x2f0>
    3110:	73 14       	cp	r7, r3
    3112:	10 f4       	brcc	.+4      	; 0x3118 <vfprintf+0x30e>
    3114:	37 18       	sub	r3, r7
    3116:	01 c0       	rjmp	.+2      	; 0x311a <vfprintf+0x310>
    3118:	31 2c       	mov	r3, r1
    311a:	24 ff       	sbrs	r18, 4
    311c:	12 c0       	rjmp	.+36     	; 0x3142 <vfprintf+0x338>
    311e:	b7 01       	movw	r22, r14
    3120:	80 e3       	ldi	r24, 0x30	; 48
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	2c 87       	std	Y+12, r18	; 0x0c
    3126:	0e 94 ed 18 	call	0x31da	; 0x31da <fputc>
    312a:	2c 85       	ldd	r18, Y+12	; 0x0c
    312c:	22 ff       	sbrs	r18, 2
    312e:	17 c0       	rjmp	.+46     	; 0x315e <vfprintf+0x354>
    3130:	21 ff       	sbrs	r18, 1
    3132:	03 c0       	rjmp	.+6      	; 0x313a <vfprintf+0x330>
    3134:	88 e5       	ldi	r24, 0x58	; 88
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	02 c0       	rjmp	.+4      	; 0x313e <vfprintf+0x334>
    313a:	88 e7       	ldi	r24, 0x78	; 120
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	b7 01       	movw	r22, r14
    3140:	0c c0       	rjmp	.+24     	; 0x315a <vfprintf+0x350>
    3142:	82 2f       	mov	r24, r18
    3144:	86 78       	andi	r24, 0x86	; 134
    3146:	59 f0       	breq	.+22     	; 0x315e <vfprintf+0x354>
    3148:	21 fd       	sbrc	r18, 1
    314a:	02 c0       	rjmp	.+4      	; 0x3150 <vfprintf+0x346>
    314c:	80 e2       	ldi	r24, 0x20	; 32
    314e:	01 c0       	rjmp	.+2      	; 0x3152 <vfprintf+0x348>
    3150:	8b e2       	ldi	r24, 0x2B	; 43
    3152:	27 fd       	sbrc	r18, 7
    3154:	8d e2       	ldi	r24, 0x2D	; 45
    3156:	b7 01       	movw	r22, r14
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	0e 94 ed 18 	call	0x31da	; 0x31da <fputc>
    315e:	a5 14       	cp	r10, r5
    3160:	38 f4       	brcc	.+14     	; 0x3170 <vfprintf+0x366>
    3162:	b7 01       	movw	r22, r14
    3164:	80 e3       	ldi	r24, 0x30	; 48
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	0e 94 ed 18 	call	0x31da	; 0x31da <fputc>
    316c:	5a 94       	dec	r5
    316e:	f7 cf       	rjmp	.-18     	; 0x315e <vfprintf+0x354>
    3170:	aa 94       	dec	r10
    3172:	f4 01       	movw	r30, r8
    3174:	ea 0d       	add	r30, r10
    3176:	f1 1d       	adc	r31, r1
    3178:	80 81       	ld	r24, Z
    317a:	b7 01       	movw	r22, r14
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	0e 94 ed 18 	call	0x31da	; 0x31da <fputc>
    3182:	a1 10       	cpse	r10, r1
    3184:	f5 cf       	rjmp	.-22     	; 0x3170 <vfprintf+0x366>
    3186:	33 20       	and	r3, r3
    3188:	09 f4       	brne	.+2      	; 0x318c <vfprintf+0x382>
    318a:	51 ce       	rjmp	.-862    	; 0x2e2e <vfprintf+0x24>
    318c:	b7 01       	movw	r22, r14
    318e:	80 e2       	ldi	r24, 0x20	; 32
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	0e 94 ed 18 	call	0x31da	; 0x31da <fputc>
    3196:	3a 94       	dec	r3
    3198:	f6 cf       	rjmp	.-20     	; 0x3186 <vfprintf+0x37c>
    319a:	f7 01       	movw	r30, r14
    319c:	86 81       	ldd	r24, Z+6	; 0x06
    319e:	97 81       	ldd	r25, Z+7	; 0x07
    31a0:	02 c0       	rjmp	.+4      	; 0x31a6 <vfprintf+0x39c>
    31a2:	8f ef       	ldi	r24, 0xFF	; 255
    31a4:	9f ef       	ldi	r25, 0xFF	; 255
    31a6:	2c 96       	adiw	r28, 0x0c	; 12
    31a8:	e2 e1       	ldi	r30, 0x12	; 18
    31aa:	0c 94 99 19 	jmp	0x3332	; 0x3332 <__epilogue_restores__>

000031ae <strnlen_P>:
    31ae:	fc 01       	movw	r30, r24
    31b0:	05 90       	lpm	r0, Z+
    31b2:	61 50       	subi	r22, 0x01	; 1
    31b4:	70 40       	sbci	r23, 0x00	; 0
    31b6:	01 10       	cpse	r0, r1
    31b8:	d8 f7       	brcc	.-10     	; 0x31b0 <strnlen_P+0x2>
    31ba:	80 95       	com	r24
    31bc:	90 95       	com	r25
    31be:	8e 0f       	add	r24, r30
    31c0:	9f 1f       	adc	r25, r31
    31c2:	08 95       	ret

000031c4 <strnlen>:
    31c4:	fc 01       	movw	r30, r24
    31c6:	61 50       	subi	r22, 0x01	; 1
    31c8:	70 40       	sbci	r23, 0x00	; 0
    31ca:	01 90       	ld	r0, Z+
    31cc:	01 10       	cpse	r0, r1
    31ce:	d8 f7       	brcc	.-10     	; 0x31c6 <strnlen+0x2>
    31d0:	80 95       	com	r24
    31d2:	90 95       	com	r25
    31d4:	8e 0f       	add	r24, r30
    31d6:	9f 1f       	adc	r25, r31
    31d8:	08 95       	ret

000031da <fputc>:
    31da:	0f 93       	push	r16
    31dc:	1f 93       	push	r17
    31de:	cf 93       	push	r28
    31e0:	df 93       	push	r29
    31e2:	18 2f       	mov	r17, r24
    31e4:	09 2f       	mov	r16, r25
    31e6:	eb 01       	movw	r28, r22
    31e8:	8b 81       	ldd	r24, Y+3	; 0x03
    31ea:	81 fd       	sbrc	r24, 1
    31ec:	03 c0       	rjmp	.+6      	; 0x31f4 <fputc+0x1a>
    31ee:	8f ef       	ldi	r24, 0xFF	; 255
    31f0:	9f ef       	ldi	r25, 0xFF	; 255
    31f2:	20 c0       	rjmp	.+64     	; 0x3234 <fputc+0x5a>
    31f4:	82 ff       	sbrs	r24, 2
    31f6:	10 c0       	rjmp	.+32     	; 0x3218 <fputc+0x3e>
    31f8:	4e 81       	ldd	r20, Y+6	; 0x06
    31fa:	5f 81       	ldd	r21, Y+7	; 0x07
    31fc:	2c 81       	ldd	r18, Y+4	; 0x04
    31fe:	3d 81       	ldd	r19, Y+5	; 0x05
    3200:	42 17       	cp	r20, r18
    3202:	53 07       	cpc	r21, r19
    3204:	7c f4       	brge	.+30     	; 0x3224 <fputc+0x4a>
    3206:	e8 81       	ld	r30, Y
    3208:	f9 81       	ldd	r31, Y+1	; 0x01
    320a:	9f 01       	movw	r18, r30
    320c:	2f 5f       	subi	r18, 0xFF	; 255
    320e:	3f 4f       	sbci	r19, 0xFF	; 255
    3210:	39 83       	std	Y+1, r19	; 0x01
    3212:	28 83       	st	Y, r18
    3214:	10 83       	st	Z, r17
    3216:	06 c0       	rjmp	.+12     	; 0x3224 <fputc+0x4a>
    3218:	e8 85       	ldd	r30, Y+8	; 0x08
    321a:	f9 85       	ldd	r31, Y+9	; 0x09
    321c:	81 2f       	mov	r24, r17
    321e:	09 95       	icall
    3220:	89 2b       	or	r24, r25
    3222:	29 f7       	brne	.-54     	; 0x31ee <fputc+0x14>
    3224:	2e 81       	ldd	r18, Y+6	; 0x06
    3226:	3f 81       	ldd	r19, Y+7	; 0x07
    3228:	2f 5f       	subi	r18, 0xFF	; 255
    322a:	3f 4f       	sbci	r19, 0xFF	; 255
    322c:	3f 83       	std	Y+7, r19	; 0x07
    322e:	2e 83       	std	Y+6, r18	; 0x06
    3230:	81 2f       	mov	r24, r17
    3232:	90 2f       	mov	r25, r16
    3234:	df 91       	pop	r29
    3236:	cf 91       	pop	r28
    3238:	1f 91       	pop	r17
    323a:	0f 91       	pop	r16
    323c:	08 95       	ret

0000323e <__ultoa_invert>:
    323e:	fa 01       	movw	r30, r20
    3240:	aa 27       	eor	r26, r26
    3242:	28 30       	cpi	r18, 0x08	; 8
    3244:	51 f1       	breq	.+84     	; 0x329a <__ultoa_invert+0x5c>
    3246:	20 31       	cpi	r18, 0x10	; 16
    3248:	81 f1       	breq	.+96     	; 0x32aa <__ultoa_invert+0x6c>
    324a:	e8 94       	clt
    324c:	6f 93       	push	r22
    324e:	6e 7f       	andi	r22, 0xFE	; 254
    3250:	6e 5f       	subi	r22, 0xFE	; 254
    3252:	7f 4f       	sbci	r23, 0xFF	; 255
    3254:	8f 4f       	sbci	r24, 0xFF	; 255
    3256:	9f 4f       	sbci	r25, 0xFF	; 255
    3258:	af 4f       	sbci	r26, 0xFF	; 255
    325a:	b1 e0       	ldi	r27, 0x01	; 1
    325c:	3e d0       	rcall	.+124    	; 0x32da <__ultoa_invert+0x9c>
    325e:	b4 e0       	ldi	r27, 0x04	; 4
    3260:	3c d0       	rcall	.+120    	; 0x32da <__ultoa_invert+0x9c>
    3262:	67 0f       	add	r22, r23
    3264:	78 1f       	adc	r23, r24
    3266:	89 1f       	adc	r24, r25
    3268:	9a 1f       	adc	r25, r26
    326a:	a1 1d       	adc	r26, r1
    326c:	68 0f       	add	r22, r24
    326e:	79 1f       	adc	r23, r25
    3270:	8a 1f       	adc	r24, r26
    3272:	91 1d       	adc	r25, r1
    3274:	a1 1d       	adc	r26, r1
    3276:	6a 0f       	add	r22, r26
    3278:	71 1d       	adc	r23, r1
    327a:	81 1d       	adc	r24, r1
    327c:	91 1d       	adc	r25, r1
    327e:	a1 1d       	adc	r26, r1
    3280:	20 d0       	rcall	.+64     	; 0x32c2 <__ultoa_invert+0x84>
    3282:	09 f4       	brne	.+2      	; 0x3286 <__ultoa_invert+0x48>
    3284:	68 94       	set
    3286:	3f 91       	pop	r19
    3288:	2a e0       	ldi	r18, 0x0A	; 10
    328a:	26 9f       	mul	r18, r22
    328c:	11 24       	eor	r1, r1
    328e:	30 19       	sub	r19, r0
    3290:	30 5d       	subi	r19, 0xD0	; 208
    3292:	31 93       	st	Z+, r19
    3294:	de f6       	brtc	.-74     	; 0x324c <__ultoa_invert+0xe>
    3296:	cf 01       	movw	r24, r30
    3298:	08 95       	ret
    329a:	46 2f       	mov	r20, r22
    329c:	47 70       	andi	r20, 0x07	; 7
    329e:	40 5d       	subi	r20, 0xD0	; 208
    32a0:	41 93       	st	Z+, r20
    32a2:	b3 e0       	ldi	r27, 0x03	; 3
    32a4:	0f d0       	rcall	.+30     	; 0x32c4 <__ultoa_invert+0x86>
    32a6:	c9 f7       	brne	.-14     	; 0x329a <__ultoa_invert+0x5c>
    32a8:	f6 cf       	rjmp	.-20     	; 0x3296 <__ultoa_invert+0x58>
    32aa:	46 2f       	mov	r20, r22
    32ac:	4f 70       	andi	r20, 0x0F	; 15
    32ae:	40 5d       	subi	r20, 0xD0	; 208
    32b0:	4a 33       	cpi	r20, 0x3A	; 58
    32b2:	18 f0       	brcs	.+6      	; 0x32ba <__ultoa_invert+0x7c>
    32b4:	49 5d       	subi	r20, 0xD9	; 217
    32b6:	31 fd       	sbrc	r19, 1
    32b8:	40 52       	subi	r20, 0x20	; 32
    32ba:	41 93       	st	Z+, r20
    32bc:	02 d0       	rcall	.+4      	; 0x32c2 <__ultoa_invert+0x84>
    32be:	a9 f7       	brne	.-22     	; 0x32aa <__ultoa_invert+0x6c>
    32c0:	ea cf       	rjmp	.-44     	; 0x3296 <__ultoa_invert+0x58>
    32c2:	b4 e0       	ldi	r27, 0x04	; 4
    32c4:	a6 95       	lsr	r26
    32c6:	97 95       	ror	r25
    32c8:	87 95       	ror	r24
    32ca:	77 95       	ror	r23
    32cc:	67 95       	ror	r22
    32ce:	ba 95       	dec	r27
    32d0:	c9 f7       	brne	.-14     	; 0x32c4 <__ultoa_invert+0x86>
    32d2:	00 97       	sbiw	r24, 0x00	; 0
    32d4:	61 05       	cpc	r22, r1
    32d6:	71 05       	cpc	r23, r1
    32d8:	08 95       	ret
    32da:	9b 01       	movw	r18, r22
    32dc:	ac 01       	movw	r20, r24
    32de:	0a 2e       	mov	r0, r26
    32e0:	06 94       	lsr	r0
    32e2:	57 95       	ror	r21
    32e4:	47 95       	ror	r20
    32e6:	37 95       	ror	r19
    32e8:	27 95       	ror	r18
    32ea:	ba 95       	dec	r27
    32ec:	c9 f7       	brne	.-14     	; 0x32e0 <__ultoa_invert+0xa2>
    32ee:	62 0f       	add	r22, r18
    32f0:	73 1f       	adc	r23, r19
    32f2:	84 1f       	adc	r24, r20
    32f4:	95 1f       	adc	r25, r21
    32f6:	a0 1d       	adc	r26, r0
    32f8:	08 95       	ret

000032fa <__prologue_saves__>:
    32fa:	2f 92       	push	r2
    32fc:	3f 92       	push	r3
    32fe:	4f 92       	push	r4
    3300:	5f 92       	push	r5
    3302:	6f 92       	push	r6
    3304:	7f 92       	push	r7
    3306:	8f 92       	push	r8
    3308:	9f 92       	push	r9
    330a:	af 92       	push	r10
    330c:	bf 92       	push	r11
    330e:	cf 92       	push	r12
    3310:	df 92       	push	r13
    3312:	ef 92       	push	r14
    3314:	ff 92       	push	r15
    3316:	0f 93       	push	r16
    3318:	1f 93       	push	r17
    331a:	cf 93       	push	r28
    331c:	df 93       	push	r29
    331e:	cd b7       	in	r28, 0x3d	; 61
    3320:	de b7       	in	r29, 0x3e	; 62
    3322:	ca 1b       	sub	r28, r26
    3324:	db 0b       	sbc	r29, r27
    3326:	0f b6       	in	r0, 0x3f	; 63
    3328:	f8 94       	cli
    332a:	de bf       	out	0x3e, r29	; 62
    332c:	0f be       	out	0x3f, r0	; 63
    332e:	cd bf       	out	0x3d, r28	; 61
    3330:	09 94       	ijmp

00003332 <__epilogue_restores__>:
    3332:	2a 88       	ldd	r2, Y+18	; 0x12
    3334:	39 88       	ldd	r3, Y+17	; 0x11
    3336:	48 88       	ldd	r4, Y+16	; 0x10
    3338:	5f 84       	ldd	r5, Y+15	; 0x0f
    333a:	6e 84       	ldd	r6, Y+14	; 0x0e
    333c:	7d 84       	ldd	r7, Y+13	; 0x0d
    333e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3340:	9b 84       	ldd	r9, Y+11	; 0x0b
    3342:	aa 84       	ldd	r10, Y+10	; 0x0a
    3344:	b9 84       	ldd	r11, Y+9	; 0x09
    3346:	c8 84       	ldd	r12, Y+8	; 0x08
    3348:	df 80       	ldd	r13, Y+7	; 0x07
    334a:	ee 80       	ldd	r14, Y+6	; 0x06
    334c:	fd 80       	ldd	r15, Y+5	; 0x05
    334e:	0c 81       	ldd	r16, Y+4	; 0x04
    3350:	1b 81       	ldd	r17, Y+3	; 0x03
    3352:	aa 81       	ldd	r26, Y+2	; 0x02
    3354:	b9 81       	ldd	r27, Y+1	; 0x01
    3356:	ce 0f       	add	r28, r30
    3358:	d1 1d       	adc	r29, r1
    335a:	0f b6       	in	r0, 0x3f	; 63
    335c:	f8 94       	cli
    335e:	de bf       	out	0x3e, r29	; 62
    3360:	0f be       	out	0x3f, r0	; 63
    3362:	cd bf       	out	0x3d, r28	; 61
    3364:	ed 01       	movw	r28, r26
    3366:	08 95       	ret

00003368 <_exit>:
    3368:	f8 94       	cli

0000336a <__stop_program>:
    336a:	ff cf       	rjmp	.-2      	; 0x336a <__stop_program>
